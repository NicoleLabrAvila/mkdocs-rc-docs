---
title: Matlab
layout: application
---
{{Applications

|name=Matlab
|platform=Legion
|version=Full Matlab R2018a, including UCL licensed toolboxes and the NAG Toolbox for Matlab, is available on Legion, Myriad and Aristotle at present.

'''''THIS PAGE IS CURRENTLY BEING UPDATED.''


|short=
MATLAB is a high-level language and interactive environment for numerical computation, visualization, and programming.
|about=
Matlab release R2018a is available on Legion, Myriad and Aristotle. Note: this is the full Matlab, not just the runtime environment and has all the toolboxes included in UCL's Total Academic Headcount-Campus licence and the Matlab Distributed Computing Server. We also have the [http://www.nag.co.uk/numeric/mb/design.asp NAG toolbox for Matlab] available.  You can submit single node multi-threaded Matlab jobs and Matlab jobs that can fully utilise the Parallel Computing Toolbox and Matlab's Distributed Computing Server - these are currently restricted to being able to run only within a single node.

It is also possible to submit Matlab jobs to Legion from Matlab running on your own desktop or laptop.

It is still possible to build standalone Matlab programs using the Matlab Compiler on another system and run them on Legion using the Matlab runtime environment. See [[Building and Running Matlab Programs]] for more information.

Matlab is intended to be run primarily within batch jobs however you may run short (less than 5 minutes execution time) interactive tests on the Login Nodes and longer (up to two hours) on the User Test Nodes. Interactive work can be done using the full Matlab GUI provided you have X-windows functionality enabled though your ssh connection or using a Matlab terminal session. See our [[:Category:Legion User Guide | Legion User Guide]] for more information about [[Accessing_RC_Systems#Running_graphical_applications_using_X-forwarding | enabling X-windows functionality]] and the [[Legion_Test_Nodes | User Test nodes]].

We still have the following earlier releases of Matlab available - R2016b and R2017a.

|link1= [http://www.mathworks.co.uk/products/compiler/ Matlab compiler]
|setup-intro=
|module-intro=Before you can use Matlab interactively or in a job, you need to load the Matlab module using:
|moduleunload1=
|moduleunload2=
|moduleunload3=
|moduleunload4=
|moduleunload5=
|moduleunload6=
|moduleunload7=
|moduleunload8=
|moduleload1=xorg-utils/X11R7.7
|moduleload2=matlab/full/r2018a/9.4
|moduleload3=
|moduleload4=
|moduleload5=
|moduleload6=
|moduleload7=
|moduleload8=
|setup-notes=
The first time you load the module it will setup your ''~/.matlab'' directory as a symbolic link to ''~/Scratch/.matlab'' - this is needed as Compute Nodes do not have write access to home directories. This first load of the module '''MUST''' be done on a Login Node. You can check that the module is loaded using:
<code>
 module list 
</code>

==Matlab Jobs on Legion and Myriad==

On the Legion and Myriad clusters you can submit single-node jobs using a jobscript, as mentioned below. 

On Legion you can also submit Matlab DCS jobs but the jobs must run within a single node. This means that your jobs are restricted to a maximum of 12 Matlab workers on X and Y nodes, 16 workers on U nodes and 32 if you request enough memory to use a T node. Remote submission is also available.

On Myriad submission of Matlab DCS jobs will soon be possible. 
{{Script

|script-title=Interactive Matlab and single node multi-threaded jobs
|script-intro=
Make sure you load the Matlab modules as described above. You can now start an interactive Matlab session using either:
<code>
 matlab
</code>
using the full Matlab GUI or:
<code>
 matlab -nodesktop -nodisplay
</code>
for a Matlab terminal session.

To submit batch jobs to the clusters you will need a jobscript. Before you submit your first Matlab job you '''MUST''' have loaded the Matlab module in an interactive session on a login node as shown in the [[#Setup | Setup]] section. This needs to be done on each cluster! If you do not do this, your Matlab jobs will fail. Here is a simple example Matlab jobscript for multi-threaded jobs including comments:
|script-code=
<nowiki>
#!/bin/bash -l

# Batch script to run a multi-threaded Matlab job on Legion or Myriad with the upgraded
# software stack under SGE.
#
# Based on openmp.sh by:
# Owain Kenway, Research Computing, 20/Sept/2010

# 1. Force bash as the executing shell.
#$ -S /bin/bash

# 2. Request ten minutes of wallclock time (format hours:minutes:seconds).
#$ -l h_rt=0:10:0

# 3. Request 1 gigabyte of RAM per core. 
#$ -l mem=1G

# 4. Request 15 gigabyte of TMPDIR space (default is 10 GB)
#$ -l tmpfs=15G

# 5. Select 12 threads (the most possible on Legion X and Y nodes). On Myriad
# you could set the number of threads to a maximium of 36. 
#$ -pe smp 12

# 6. Reserve one Matlab licence - this stops your job starting and failing when no
#    licences are available.
#$ -l matlab=1

# 7. The way Matlab threads work requires Matlab to not share nodes with other
# jobs.
#$ -ac exclusive

# 8. Set the name of the job.
#$ -N Matlab_multiThreadedJob1

# 9. Set the working directory to somewhere in your scratch space.  This is
# a necessary step with the upgraded software stack as compute nodes cannot
# write to $HOME.
# Replace "<your_UCL_id>" with your UCL user ID :)
#$ -wd /home/<your_UCL_id>/Scratch/Matlab_examples

# 10. Your work *must* be done in $TMPDIR on Legion
cd $TMPDIR

# 11. Copy main Matlab input file and any additional files to TMPDIR

cp $infile .
Matlab_infile=`basename $infile`
for file in `echo $addinfiles | tr ':' ' '` 
do
  cp $file .
done

# 12. Run Matlab job

# module use --append ~ccaabaa/lib/modulefiles/applications
module load xorg-utils/X11R7.7
module load matlab/full/r2018a/9.4
module list

echo ""
echo "Running matlab -nosplash -nodisplay < $Matlab_infile ..."
echo ""
matlab -nosplash -nodesktop -nodisplay < $Matlab_infile

# 13. Preferably, tar-up (archive) all output files onto the shared scratch area
tar zcvf $HOME/Scratch/Matlab_examples/files_from_job_${JOB_ID}.tgz $TMPDIR

# Make sure you have given enough time for the copy to complete!

</nowiki>
|script-path=/shared/ucl/apps/Matlab/R2018a/run-matlab.sh
|script-notes=Note: the Matlab module is being loaded in the jobscript - this is required. The example jobscript is available on both Legion and Myriad.

Please copy if you wish and edit it to suit your jobs. You will need to change the ''-wd /home/<your_UCL_id>/Scratch/Matlab_examples'' SGE directive and may need to change the memory, wallclock time and job name directives as well. A suitable qsub command to submit a single Matlab job using this jobscript would be:
<code>
 qsub -v infile=`pwd`/myMatlabJob.m run-matlab.sh
</code>
If your jobs uses more than one Matlab file for additional functions etc then a suitable qsub command would be:

<code>
 qsub -v infile=`pwd`/myMatlabJob.m,addinfiles=`pwd`/initialise.m:`pwd`/analyse.m run-matlab.sh
</code>

where ''myMatlabJob.m'' is the file containing your Matlab commands and ''initialise.m'' and ''analyse.m'' contain  additional functions initialise and analyse. In these examples input files, and your jobscript files are in your current working directory. The output file is saved in the tar archive produced by the last  command in the jobscript and will be in ''$HOME/Scratch/Matlab_examples''.

===Alternative syntax===

Instead of using Unix input redirection like
<code>
 matlab -nosplash -nodesktop -nodisplay < $Matlab_infile
</code>
you can also do
<code>
 matlab -nosplash -nodesktop -nodisplay -r $Matlab_infile
</code>

===Run without the JVM===

You can give the <code>-nojvm</code> option to tell Matlab to run without the Java Virtual Machine. This will speed up startup time, possibly execution time, and remove some memory overhead, but will prevent you using any tools that require Java (eg, tools that use the Java API for I/O and networking like URLREAD, or call Java object methods).

===Single-threaded Matlab jobs===

Most of the time, Matlab will create many threads and use them as it wishes. If you know your Matlab job is entirely single-threaded, you can force Matlab to run with only one thread on one core, which will allow you to have more jobs running at once as they won't all need to request an entire node.

In this case, you remove the <code>#$ -ac exclusive</code> from your script as you no longer need exclusive access to the node, change the cores requested to 1 with <code>#$ -pe smp 1</code>and you run Matlab like this:

<code>
 matlab -nosplash -nodesktop -nodisplay -nojvm -singleCompThread < $Matlab_infile
</code>

The <code>-singleCompThread</code> force Matlab to run single-threaded, and the <code>-nojvm</code> tells it to run without the Java Virtual Machine, as above. 

[[#top | back to top]]
}}
{{Script

|script-title=Submitting parallel jobs using the Distributed Computing Server (DCS)
|script-intro=


Make sure you load the Matlab modules as described in the [[#Setup | Setup]] section before you attempt to submit any Matlab DCS jobs. Currently Matlab DCS jobs need to be submitted from an interactive or scripted Matlab session which can be running on the cluster login nodes or on your own machine. The single node constraint means that your jobs are restricted to a maximum of 12 Matlab workers on X and Y nodes, 16 workers on U nodes and 32 if you request enough memory to use a T node.

===Importing the Legion Cluster Profile===

Before you can submit any DCS jobs to Legion, you need to import Legion's cluster profile into your Matlab environment and set it as the default. You only need to do this once because the imported profile will be automatically saved in your Matlab settings directory. Importing the profile can be done either by calling a couple of Matlab functions or via the GUI interface. The Legion profile is stored in the file:
<code>
 /shared/ucl/apps/Matlab/toolbox_local/Legion/R2018a/LegionGraceProfile_R2018a.settings
</code>
To import using Matlab functions run:
<code>
 profile_Legion = parallel.importProfile ('/shared/ucl/apps/Matlab/toolbox_local/Legion/R2018a/LegionGraceProfile_R2018a.settings');
 parallel.defaultClusterProfile ('LegionGraceProfileR2018a');
</code>
from a Matlab session. To import from the GUI do the following:

# From the Home tab select the Parallel menu and click on the ''Manage Cluster Profiles...'' item.
# The Cluster Profile Manager window will open.<br />[[File:ClusterProfBefore.png]]
# Select the Import item and in the Import Profiles from file window navigate to the LegionGraceProfile.settings file shown above and select Open.
# Select the resulting LegionGraceProfile and click Set as Default. The Cluster Profile Manager widow should now look like this:<br />[[File:ClusterProfAfterR2018a.png|518px]]

In both cases after you quit Matlab your Legion profile will be saved for future use.

===Environment Variables Required to Support Job Submission===

Three Grid Engine environment variables to assist with job submission from within a Matlab session have been set up. They are needed as setting parameters like Legion project and wallclock time are not supported by the internal Matlab job submission mechanism. (Note: users who applied after July 2014 will typically not have projects). The variables are: 

; SGE_CONTEXT
: a comma separated list of context variables treated as if added via the -ac option; e.g., ''exclusive''
; SGE_OPT
: a comma separated list of resources that will be treated as if added via the -l option; e.g., ''h_rt=0:10:0,mem=1G,tmpfs=15G''
; SGE_PROJECT
: your project. This is not normally needed.

The first two need to be set before starting your Matlab session using the usual Bash method of exporting environment variables. For example:
<code>
 export SGE_CONTEXT=exclusive
 export SGE_OPT=h_rt=0:15:0,mem=2G,tmpfs=15G
 export SGE_PROJECT=<your project ID> # optional
</code>
Or they can be set from a Matlab session using Matlab's setenv function. For example:
<code>
 setenv ('SGE_CONTEXT', 'exclusive');
 setenv ('SGE_OPT', 'h_rt=0:15:0,mem=2G,tmpfs=15G'); 
 setenv ('SGE_PROJECT', '<your project ID>'); # optional
</code>

===Submitting a Simple DCS Job===

Any Matlab session you use to submit jobs must be running from a directory in your Scratch area. This is because jobs will inherit this directory as their working directory. Here is a simple annotated job submission example with only one Matlab source file.

# Before starting Matlab change to your directory in Scratch where you want the job to run from and set the SGE environment variables:<br /><code>cd ~/Scratch/Matlab_examples<br />export SGE_OPT=h_rt=0:10:0,mem=1G,tmpfs=15G</code>
# Start the Matlab GUI:<br /><code>matlab</code><br />or start a Matlab terminal session:<br /><code>matlab -nodesktop -nodisplay</code>
# In your Matlab session create a cluster object using the Legion cluster profile:<br /><code>c = parcluster ('LegionGraceProfileR2018a');</code>
# Using your cluster object create a job object of the required type. For this example the job is a parallel job with communication between Matlab workers of type "Single Program Multiple Data":<br /><code>myJob = createCommunicatingJob (c, 'Type', 'SPMD');</code>
# Set the number of Matlab workers:<br /><code>num_workers = 12;</code>
# Tell the job the files needed to be made available to each worker - in this example there is only one file:<br /><code>myJob.AttachedFiles = {'colsum.m'};</code><br />''colsum.m'' contains the simple magic square example from the Matlab manual "Parallel Computing Toolbox User's Guide".
# Set the minimum and maximium number of workers for the job:<br /><code>myJob.NumWorkersRange = [num_workers, num_workers];</code>
# Create a MATLAB task to be executed as part of the job. For this example it will consist of executing the Matlab function colsum. The rest of arguments indicate that the task returns one parameter and and there are no input arguments to the ''colsum'' function:<br /><code>task = createTask (myJob, @colsum, 1, {});</code>
# Submit the job:<br /><code>submit (myJob);</code><br />Your job is now submitted to the Legion job queue. You will be able to see your job's queue status using the qstat command in the normal way. You can also monitor jobs using Matlab's  Job Monitor GUI. Select Monitor Jobs from the Parallel menu on the ''Home'' tab.
# When the job has completed get the results using:<br /><code>results = fetchOutputs(myJob)</code>

You can access  the job log from Matlab using:
<code>
 logMess = getDebugLog (c, myJob);
</code>

===An Example of a Job with more than One Input File===

Here is an example of submitting a different type of job with many input files. The job type is "Matlab Pool". A "pool" job runs the specified task function with a MATLAB pool available to run the body of parfor loops or spmd blocks and is the default job type. This example was kindly supplied to assist in testing Matlab by colleagues from CoMPLEX.

The first part of creating the job is the same as the above example apart from the longer runtime and larger amount of memory per core:

# <code>cd ~/Scratch/Matlab_examples<br />export SGE_OPT=h_rt=1:0:0,mem=2G,tmpfs=15G<br />matlab</code><br />to launch the GUI or:<br /><code>matlab -nodesktop -nodisplay</code><br />to start a terminal session.<br /><code>c = parcluster ('LegionGraceProfileR2018a');</code>
# Using our cluster object create a job object of type "pool":<br /><code>myJob2 = createCommunicatingJob (c, 'Type', 'Pool');</code>
# Set the number of Matlab workers and another variable used to by the example:<br /><code>num_workers = 8;<br />simulation_duration_ms = 1000;</code>
# Tell the job all the input files needed to be made available to each worker as a cell array:<br /><code>myJob2.AttachedFiles = {<br />    'AssemblyFiniteDifferencesMatrix.m'<br />    'AssemblyFiniteDifferencesRightHandSide.m'<br />    'CellModelsComputeIonicCurrents.m'<br />    'CellModelsGetVoltage.m'<br />    'CellModelsInitialise.m'<br />    'CellModelsSetVoltage.m'<br />    'GetStimuliForTimeStep.m'<br />    'SubmitMonodomainJob.m'<br />    'RegressionTest.m'<br />    'RunAndVisualiseMonodomainSimulation.m'<br />    'SolveLinearSystem.m'<br />    'luo_rudy_1991_iionic.m'<br />    'luo_rudy_1991_time_deriv.m'};</code>
# Set the minimum and maximium number of workers for the job:<br /><code>myJob2.NumWorkersRange = [num_workers, num_workers];</code>
# Create a MATLAB task to be executed as part of the job. For this example it will consist of executing the Matlab function ''RunAndVisualiseMonodomainSimulation''. The rest of arguments indicate that the task returns three parameters and  there are five input arguments to the function. These are passed as a cell array:<br /><code>task = createTask (myJob2, @RunAndVisualiseMonodomainSimulation, 3, {5000, simulation_duration_ms, 1.4, 1.4, false});</code>
# Submit the job:<br /><code>submit (myJob2);</code>

As before use FetchOutputs to collect the results.

If you closed your session, you can get your results by:

<code>
 c = parcluster ('LegionGraceProfileR2018a'); # get a cluster object
 jobs = findJob(c) # gets a list of jobs submitted to that cluster
 job = jobs(3); # pick a particular job
 results = fetchOutputs(job)
</code>

You can get other information: <code>diary(job)</code> will give you the job diary, and <code>load(job)</code> will load the workspace.

===Further Reading===

There is a lot more information about using the Matlab Distributed Computing Server in the Matlab manual [https://uk.mathworks.com/help/distcomp/index.html Parallel Computing Toolbox User’s Guide].

|script-code=
|script-path=
|script-notes=

}} 

{{Script

|script-title=Submitting Matlab jobs from desktop systems and personal laptops
|script-intro=
You can submit Matlab jobs to Legion from Matlab sessions running on your own desktop workstation or laptop systems provided they are running the same version of Matlab and your computer is within the UCL firewall.

===Prerequisites===

# You must already have an account on Legion!
# Have Matlab R2018a installed on your local workstation/laptop. The older Matlab R2016b version is also available. The local version must match the version running jobs.  Matlab R2018a can be downloaded from the UCL Software Database ([http://swdb.ucl.ac.uk/package/view/id/2?filter=Matlab Matlab entry on the UCL SWDB]).
# If your local workstation/laptop is not directly connected to the UCL network (at home for example), you need to have the UCL VPN client installed and running on it. Details about the UCL VPN client are available on [http://www.ucl.ac.uk/isd/services/get-connected/remote-working/vpn these web pages].

===Setup===
<ol>
<li>On Legion create a directory to hold remotely submitted job details. For example:<br />
<code>
 mkdir ~/Scratch/Matlab_remote_jobs
</code><br />
This directory needs to be in your Scratch directory as Compute Nodes need to be able to write to it. Also you shouldn't use this directory for anything else.</li>
<li>On your local workstation/laptop create a directory to hold information about jobs that have been submitted to Legion. Again you shouldn't use this directory for anything else.</li>
<li>Download the [https://wiki.rc.ucl.ac.uk/wiki/File:Legion_submit.zip support files for remote submission to Legion from here for R2016b] or [https://wiki.rc.ucl.ac.uk/wiki/File:Legion_submit_R2018a.zip support files for remote submission to Legion from here for R2018a]. Make sure you download the correct one for your version of Matlab!</li>
<li>This step '''MUST''' be done while Matlab is shut down. Unzip the archive into Matlab's local toolbox directory. Default locations for the local toolbox directory are:
;Linux:The default local toolbox location is ''/usr/local/MATLAB/R2018a/toolbox/local'' for R2018a. Navigate to this directory and use unzip -x archive_name.
;Mac OS X:The default local toolbox location is ''/Applications/MATLAB_R2018a.app/toolbox/local'' for R2018a. In order to view or change the contents of an application package, open /Applications in a Finder window. Then right-click the application and select "View Package Contents." Then navigate to the appropriate directory. '''Note:''' If you don't have access to ''/Applications/MATLAB_R2018a.app/toolbox/local'', you can unzip the support files into ''~/Documents/MATLAB/'' instead.
;Windows:The default local toolbox location is ''C:\Program Files\MATLAB\R2018a\toolbox\local'' for R2018a. Extract the archive here.</li>
<li>Download the [https://wiki.rc.ucl.ac.uk/wiki/File:ParallelProfileLegion.m.zip parallelProfileLegion function from here] to your local workstation/laptop. It will need to be unzipped. This function creates a cluster profile for Legion.</li>
<li>Start Matlab, navigate to where you saved the ''parallelProfileLegion.m'' file, run the function by typing:<br />
<code>
 parallelProfileLegion
</code><br />
at your Matlab prompt (in your Matlab Command Window if running the Matlab GUI) and answer the questions.</li>
</ol>
===Submitting a Job to Legion===
<ol>
<li>You need to set values to the three Grid Engine support environment variables described above on your local computer suitable for the job or jobs you are going to submit.</li>
<li>In your Matlab session create a cluster object using the cluster profile created by the parallelProfileLegion function:
<code>
 c&nbsp;=&nbsp;parcluster&nbsp;('legion_R2018a');
</code>
</li>
<li>You can now create and submit jobs in a similar way to that shown in the examples above starting from item 4 in the first example and 2 in the second.</li></ol>

===Viewing your results===
After submitting your job remotely from your desktop, you can close MATLAB and come back later. To see your jobs:

Click Parallel > Monitor jobs

This will bring up the job monitor where you can see the status of your jobs and whether they are finished. MATLAB numbers the jobs sequentially.

Right-click on a job and choose fetch outputs.

It will execute this, with the corresponding ID number:

<code>
 myCluster = parcluster('legion_R2018a');
 job4 = myCluster.findJob('ID',4);
 job4_output = fetchOutputs(job4);
</code>

The Workspace will show the available data and you can view your results. The data is fetched from the Matlab_remote_jobs  directory you created on Legion in [https://wiki.rc.ucl.ac.uk/mediawiki119/index.php?title=Full_Matlab_on_Legion&action=submit#Setup_2 Setup step 1], so that will also have files and directories in it called job1, job2 and so on. 

If you have already fetched the data, you can view the results straight away by selecting that job. If you need to reload everything, you can right-click on the job and the option will be to load variables instead.

====Writing intermediate results====

If you want to explicitly write out intermediate results, you need to provide a full path to somewhere in Scratch otherwise MATLAB will try to write them in your home, which isn't writable by the compute nodes.

[[#top | back to top]]

==Troubleshooting==

===MATLAB parpools===

If you run multiple local parpool jobs at once, you will likely end up with your <code>~/.matlab/local_cluster_jobs/R2018a/matlab_metadata.mat</code> file becoming corrupted frequently causing your jobs to start failing, as parpool jobs will all write to it. Once this happens, you will need to delete and recreate the <code>~/.matlab/R2018a</code> and <code>~/.matlab/local_cluster_jobs/R2018a</code> directories (if you're using a different version, replace R2018a with the correct version). <code>~/.matlab</code> is a symlink to <code>~/Scratch/.matlab</code> so it is writable by the compute nodes.

The solution is to set a separate MATLAB preferences directory for each parpool job, and then each one will have its own local_cluster_jobs directory. They can then run at the same time without interfering with each other.

<code>
 export MATLAB_PREFDIR=/home/username/Scratch/matlab_prefs/$JOB_ID/prefs
</code>

The local_cluster_jobs is created one level up from the preferences so you must have the additional directory inside $JOB_ID.

Put that in your jobscript followed by your normal MATLAB execution command. MATLAB should then create that directory when it starts. This can be cleaned up after the job, either inside the jobscript or manually if you want to check any of its contents. If you're using an array job you'll want to use <code>$JOB_ID.$SGE_TASK_ID/prefs</code> to have a unique directory for each task.

|script-code=
|script-path=
|script-notes=

}}

}}
[[Category:Legion Applications |Matlab]]