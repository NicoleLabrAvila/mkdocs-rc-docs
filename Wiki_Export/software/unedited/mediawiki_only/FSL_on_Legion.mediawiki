---
title: FSL
categories:
 - Applications
 - Pages with bash scripts
 - Software

layout: application
---
{{Applications

|name=FSL
|platform=Legion
|short=
FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data.
|about=
The FMRIB Software Library is a set of tools for analysis and visualization of  FMRI, MRI and DTI brain imaging data. It is developed by the FMRIB Analysis Group of the Nuffield Department of Clinical Neurosciences at the University of Oxford. FSL is intended to be run primarily within batch jobs however you may run short (less than 5 minutes execution time) interactive tests on the Login Nodes and longer interactive tests on the User Test Nodes. Output can be displayed using the ''slices'' program.
|version=5.0.9
|link1= [http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/ FSL Wiki at Oxford]
|moduleunload1=
|moduleunload2=
|moduleunload3=
|moduleunload4=
|moduleunload5=
|moduleunload6=
|moduleunload7=
|moduleunload8=
|moduleload1=
|moduleload2=
|moduleload3=
|moduleload4=
|moduleload5=
|moduleload6=
|moduleload7=
|moduleload8=
|setup-notes=
Before you can use FSL you need to load the FSL module and call FSL's set up script. 
<code>
 module load fsl/5.0.9
 source $FSLDIR/etc/fslconf/fsl.sh
</code>

FSL 5 can be used in combination with R. FSL programs can now be run in command line mode for example:
<code>
 susan structural.nii.gz 2000 2 3 1 0 structural_susan.nii.gz
</code>
With FSL version 5 some programs eg FEAT can submit jobs directly to the cluster and will do this by default. For other programs you will need a runscript.
|scripts=
{{Script

|script-title=Example FSL 5 runscript
|script-intro=
|script-code=
<nowiki>
#!/bin/bash -l

# Batch script to run FSL 5 example jobs on Legion with the upgraded
# software stack under SGE.
#
# Oct 2015
#
# Based on serial.sh by:
#
# Owain Kenway, Research Computing, 16/Sept/2010

#$ -S /bin/bash

# 1. Request 1 hour of wallclock time (format hours:minutes:seconds).
#$ -l h_rt=1:0:0

# 2. Request 4 gigabyte of RAM.
#$ -l mem=4G

# Note: some FSL programs are multi-threaded eg FEAT and you will need to
# use -pe smp <number of cores> as well.

# 3. Set the name of the job.
#$ -N FSL_job1

# 6. Set the working directory to somewhere in your scratch space.  This is
# a necessary step with the upgraded software stack as compute nodes cannot
# write to $HOME.
#
# Note: this directory MUST exist before your job starts!
# Replace "<your_UCL_id>" with your UCL user ID :)
#$ -wd /home/<your_UCL_id>/Scratch/FSL_output

# 7. Setup FSL runtime environment

module load fsl/5.0.9
source $FSLDIR/etc/fslconf/fsl.sh

# 8. Your work *must* be done in $TMPDIR 
cd $TMPDIR

# 9. Run job - A simple example using the BET command on the supplied example 
#    data.

# Copy your input files to $TMPDIR
cp ~/Scratch/FSLdata/structural.nii.gz $TMPDIR
echo ""
echo "Running: bet structural.nii.gz structural_brain.nii"
echo ""
time bet structural.nii.gz structural_brain.nii

# 10. Preferably, tar-up (archive) all output files onto the shared scratch area
tar zcvf $HOME/Scratch/FSL/files_from_job_$JOB_ID.tar.gz $TMPDIR

# Make sure you have given enough time for the copy to complete!

</nowiki>
|script-path=
|script-notes=
Please copy if you wish and edit it to suit your jobs. You will need to change the ''-wd /home/<your_UCL_id>/Scratch/FSL_output'' SGE directive. You will also need to change the FSL command in the example and may need to change the memory, wallclock time and job name directives as well. The script can be submitted using the simplest form of the qsub command i.e.:
<code>
 qsub run-fsl.sh
</code>
Output will be written to $TMPDIR and so will need to be copied back to your ~/Scratch directory - step 10 in the runscript. 
}} 

For the components of FSL that submit jobs eg FEAT and bedpostx a slightly different runscript is required otherwise jobs will try and submit jobs which not previously allowed on our clusters. It is now, but can result in jobs which are too short being submitted, so you may wish to turn it off. Here is an example runscript for FEAT.
{{Script

|script-title=Example FSL 5 runscript running FEAT
|script-intro=
|script-code=
<nowiki>
#!/bin/bash -l

#$ -S /bin/bash

# 1. Request 15 mins of wallclock time (format hours:minutes:seconds).
#$ -l h_rt=0:15:0 

# 2. Request 4GB of RAM.
#$ -l mem=4G

# 3. Set the name of the job.
#$ -N FSL_job1

# 4. Set the working directory- mkdir this directory before the job starts! Don't
# forget to change the userid to your one!
#$ -wd /home/<your_UCL_id>/Scratch/FSL_output

# 5. Setup FSL runtime environment 

module load fsl/5.0.9
source $FSLDIR/etc/fslconf/fsl.sh

# 6. Need this envionment variable for FEAT and other methods eg bedpostx to
# stop job submission from within jobs and qrsh sessions.

export FSLSUBALREADYRUN=true

# 7. Run FEAT on a single example - easy to extend to many files.

file=/home/ccaabaa/Scratch/FSL/FEAT_test/ucjuaa0/Data/sub-01/s01/s01r01/s01r01_trial10.fsf
feat $file

echo Processing finished at `date`

</nowiki>
|script-path=
|script-notes=
Please copy if you wish and edit it to suit your jobs. You will need to change the ''-wd /home/<your_UCL_id>/Scratch/FSL_output'' SGE directive. You will also need to change the FSL command in the example and may need to change the memory, wallclock time and job name directives as well. The script can be submitted using the simplest form of the qsub command i.e.:
<code>
 qsub run-feat.sh
</code>
The important addition in this script is the setting of the FSLSUBALREADYRUN environment variable to "true". This prevents new jobs being submitted and instead the tasks are run as part of your current job, with those resources available.
}} 
Other components of FSL that submit jobs and need run scripts like the FEAT example are:
<code>
 bedpostx
 melodic
 dual_regression
 tbss_2_reg
 qboot_parallel
 fslvbm_2_template
 fslvbm_3_proc
 possum
</code>
NOTE: apart from bedpostx none of them have been tested on Legion.
}}