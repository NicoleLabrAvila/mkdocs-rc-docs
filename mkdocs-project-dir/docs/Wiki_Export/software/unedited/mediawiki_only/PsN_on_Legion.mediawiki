---
title: Perl-speaks-NONMEM (PsN)
layout: application
---
{{Applications

|name=Perl-speaks-NONMEM (PsN)
|platform=Legion
|version=4.4.8
|short=
Perl-speaks-NONMEM (PsN) is a collection of Perl modules and programs aiding in the development of non-linear mixed effect models using NONMEM. The functionality ranges from solutions to simpler tasks such as parameter estimate extraction from output files, data file sub setting and resampling, to advanced computer-intensive statistical methods. PsN includes stand-alone tools for the end-user as well as development libraries for method developers. 
|about=
PsN is unusual in that it submits jobs for you. To do this, you run the control program from a login node, and it will generate jobscripts and submit them, while monitoring the status of these jobs. The control program will run until all its jobs are completed.

You may wish to launch PsN from inside the terminal program <code>screen</code>, so you can detach your session and reattach it later, rather than leaving your local machine connected via ssh for the entire run. (Type <code>man screen</code> to read the manual). To ssh back into that specific node to reattach your screen session, use <code>ssh <username>@login06.external.legion.ucl.ac.uk</code> for example, then use <code>screen -r</code> to reattach.

PsN cannot be used to run parallel MPI NONMEM runs on Legion, which use parafiles. For this reason, we do not provide a central install, but you can install it in your space if you wish.

|module-intro=Before you can install PsN or use any of its commands, you must set your modules up as follows (assuming the default modules are loaded):
|moduleunload1=
|moduleunload2=
|moduleunload3=
|moduleunload4=
|moduleunload5=
|moduleunload6=
|moduleunload7=
|moduleunload8=
|moduleload1=nonmem/7.3.0/intel-2015-update2
|moduleload2=perl/5.22.0
|moduleload3=
|moduleload4=
|moduleload5=
|moduleload6=
|moduleload7=
|moduleload8=
|setup-notes=You can check that the modules have loaded correctly using:
<code>
 module list
</code>

|script-title=Installing PsN in your home
|script-intro=
We provide an install script which you can access at <code>/shared/ucl/apps/build_scripts/psn_4.4.8_install</code> or view at our [https://github.com/UCL-RITS/rcps-buildscripts buildscript Git repository]. It is set up to install PsN 4.4.8 if you do not specify a version, or you can override the <code>VERSION</code>, <code>MD5</code> and <code>INSTALL_NAME</code> variables. Note that other versions have not been tested by us.

To install a given version of PsN in the location you specify with $INSTALL_PREFIX:
|script=
<nowiki>
cd /shared/ucl/apps/build_scripts
VERSION=x.x.x INSTALL_PREFIX=/home/$USER/my/path MD5=md5sum_of_version INSTALL_NAME=PsN_x_x_x ./psn-4.4.8_install

  #   Interactive answers   #
  # Set PsN Utilities install location to same as $INSTALL_PREFIX
  # Perl binary location should be correct as long as you have the perl module loaded
  # Set PsN Core and Toolkit install location to $INSTALL_PREFIX
  # Complete path to NM-installation dir: /shared/ucl/apps/NONMEM/nm730_Intel
  # The version will be called nm730_Intel by default
</nowiki>

|script-notes=
You should then add this to the bottom of your .bashrc so the PsN commands such as execute are in your PATH (replace $INSTALL_PREFIX with the actual value you used).
<code>
 export PATH=$INSTALL_PREFIX:$PATH
</code>
You may wish to also add the module load commands to your .bashrc so they are always loaded in every new login session.

==Running PsN==

This is an example PsN command that you run from the login nodes (note that almost all other programs should not be run from the login nodes). Put your input files somewhere in Scratch and run the command from that location. It will submit the jobs for you, which you can check as usual with qstat. It will wait for all jobs to finish, then possibly do some formatting of results before exiting.

As mentioned above, you may wish to run inside <code>screen</code> so you do not need to remain connected to your Legion terminal.

Your output files will be put in a directory with a name related to the command and with _dir1 appended. If you run it again, output will go in _dir2 etc.

<code>
 execute -threads=2 -sge_resource="h_rt=2:0:0,mem=1G" example1.ctl example2.ctl
</code>

This launches two serial jobs, running example1.ctl and example2.ctl. The <code>-sge_resource</code> is where you specify the per-job resources. You can specify other SGE flags with <code>-sge_prepend_flags=""</code>. You will end up with NM_run1 and NM_run2 directories inside your output directory (which is called modelfit_dir1 in the case of execute). The .e and .o files for each job will be inside their NM_run directory.

 }}