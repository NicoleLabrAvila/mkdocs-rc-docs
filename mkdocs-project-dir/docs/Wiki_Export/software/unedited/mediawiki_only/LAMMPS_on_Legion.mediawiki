---
title: LAMMPS
categories:
 - Applications
 - Software

layout: application
---
{{Applications
|name=LAMMPS
|platform=Legion
|short=
LAMMPS is an open source parallel molecular dynamics code which exhibits good scaling in a wide range of environments.
|about=
LAMMPS is an open source parallel molecular dynamics code which exhibits good scaling in a wide range of environments.
|version=10Feb15, 8Dec15, 13Apr17
|link1= [http://lammps.sandia.gov/ LAMMPS website]
|moduleunload1=
|moduleunload2=
|moduleunload3=
|moduleunload4=
|moduleunload5=
|moduleunload6=
|moduleunload7=
|moduleunload8=
|moduleload1=lammps/8Dec15/intel-2015-update2
|moduleload2=
|moduleload3=
|moduleload4=
|moduleload5=
|moduleload6=
|moduleload7=
|moduleload8=
|setup-intro=LAMMPS-8Dec15 and later were built with additional packages kspace, replica, rigid, and class2. You can access the binaries on Grace, Legion or Thomas with <code>lmp_default</code> which is a symlink to <code>lmp_legion</code>, <code>lmp_grace</code> or <code>lmp_thomas</code> respectively. 

The 10Feb15 version does not have the class2 package.
|setup-notes=
|script-title=
|script-intro=
|script=
<nowiki>
#!/bin/bash -l

# Batch script to run an MPI parallel job on Legion with the upgraded software
# stack under SGE with Intel MPI. Updated Jan 2016.

# 1. Force bash as the executing shell.
#$ -S /bin/bash

# 2. Request one hour of wallclock time (format hours:minutes:seconds).
#$ -l h_rt=1:00:00

# 3. Request 1 gigabyte of RAM per process.
#$ -l mem=1G

# 4. Set the name of the job.
#$ -N ExampleLAMMPS

# 5. Select the MPI parallel environment and 24 processes.
#$ -pe mpi 24

# 7. Set the working directory to somewhere in your scratch space.  This is
# a necessary step with the upgraded software stack as compute nodes cannot
# write to $HOME.
# Replace "<your_UCL_id>" with your UCL user ID.
#$ -wd /home/<your_UCL_id>/Scratch/lammps

# 8. Load required module alongside default modules

module load lammps/13Apr17/intel-2017

# 9. Run our MPI job.  Replace "inputfile" with the name of your LAMMPS input file.
gerun `which lmp_default` -in inputfile
</nowiki>
|script-path=
|script-notes=

==LAMMPS user packages==

We do not install the LAMMPS user packages as part of our central install, but you can build your own version with the ones that you want in your space.

Please check the most recent lammps buildscript in our [https://github.com/UCL-RITS/rcps-buildscripts/ buildscript repository] for any changes from the below.

<code>$cluster</code> below should be one of <code>legion</code>, <code>grace</code> or <code>thomas</code>.

Download and untar the LAMMPS source code into somewhere in your space. Replace <code>${VERSION}</code> with the version you're downloading, eg 11Aug17.

<code>
 wget http://lammps.sandia.gov/tars/lammps-${VERSION}.tar.gz
 tar -xvf lammps-${VERSION}.tar.gz
</code>

Change into the source directory and copy in the Makefile for this cluster.

<code>
 cd lammps-${VERSION}/src
 cp /shared/ucl/apps/build_scripts/lammps-patches/Makefile.$cluster-${COMPILER_TAG} MAKE/MINE/Makefile.$cluster
</code>

Tell it to build the packages you want. Included are the ones we build by default. Here we are also building USER-REAXC.

<code>
 make yes-kspace
 make yes-replica
 make yes-rigid
 make yes-class2
 make yes-user-reaxc
</code>

Do the compilation.

<code>
 make $cluster
</code>

Put the executable in a bin directory outside the source tree.

<code>
 mkdir ../bin
 mv lmp_${cluster} ../bin
</code>

You can tidy up the old object files from your source directory now if you wish.

<code>
 make clean-all
</code>

To be able to run it using <code>lmp_default</code> as in the usual jobscript, create a symlink.
<code>
 cd ../bin
 ln -s lmp_${cluster} lmp_default
</code>

To have the binary (and libraries if you need them) available, add these to either your <code>~/.bashrc</code> or your jobscript, in place of loading a module. Make sure the paths are correct for where you have installed LAMMPS. If you add them to your bashrc, remember that they will always be in your path in every new session.

<code>
 export PATH=~/lammps-${VERSION}/bin:$PATH
 # for the libraries
 export LD_RUN_PATH=~/lammps-${VERSION}/lib:$LD_RUN_PATH
 export LD_LIBRARY_PATH=~/lammps-${VERSION}/lib:$LD_LIBRARY_PATH
</code>

|script2-title=
|script2-intro=
|script2=
|script2-path=
|script2-notes=
|script3-title=
|script3-intro=
|script3=
|script3-path=
|script3-notes=
|coda-title=
|coda=

}}