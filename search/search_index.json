{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Research Computing Services \u00a7 This documentation is maintained by the Research Computing team for the purpose of sharing information about our services, including user guides, service updates and account request and renewal support. Documentation \u00a7 General User Information: Getting an Account Guide for New Users Guide for Experienced Users Planned Outages Clusters: Myriad Kathleen Thomas Young Michael Email Support \u00a7 For support for any of our services, contact us at: rc-support@ucl.ac.uk We will endeavour to answer queries on any aspect of computing related to your research, whatever your skill level or requirements. How to... \u00a7 Connect to the Research Data Storage service Report a problem with one of our computing platforms Access services from outside UCL Apply for access to national GPU clusters Get more resources (more storage, more compute time, longer run time, etc) Acknowledge the use of RC Systems Training \u00a7 Due to the on-going COVID-19 pandemic, our ordinary training courses have been suspended indefinitely. We have an online Moodle course \"Introduction to the Unix Shell\" and infrequently provide a training course aimed at getting users up and running on one of our main clusters. Please see our Research IT Training page for details.","title":"Research Computing Services"},{"location":"#research-computing-services","text":"This documentation is maintained by the Research Computing team for the purpose of sharing information about our services, including user guides, service updates and account request and renewal support.","title":"Research Computing Services"},{"location":"#documentation","text":"General User Information: Getting an Account Guide for New Users Guide for Experienced Users Planned Outages Clusters: Myriad Kathleen Thomas Young Michael","title":"Documentation"},{"location":"#email-support","text":"For support for any of our services, contact us at: rc-support@ucl.ac.uk We will endeavour to answer queries on any aspect of computing related to your research, whatever your skill level or requirements.","title":"Email Support"},{"location":"#how-to","text":"Connect to the Research Data Storage service Report a problem with one of our computing platforms Access services from outside UCL Apply for access to national GPU clusters Get more resources (more storage, more compute time, longer run time, etc) Acknowledge the use of RC Systems","title":"How to..."},{"location":"#training","text":"Due to the on-going COVID-19 pandemic, our ordinary training courses have been suspended indefinitely. We have an online Moodle course \"Introduction to the Unix Shell\" and infrequently provide a training course aimed at getting users up and running on one of our main clusters. Please see our Research IT Training page for details.","title":"Training"},{"location":"Account_Services/","text":"Account Services \u00a7 Cluster access application \u00a7 There is a single online form for applying to the majority of our clusters. Use of these services is subject to a common set of terms and conditions . All granted applications give you a Myriad account while access to other systems depends on what types of work you tell us you will be doing. Account sponsors \u00a7 If you are a student or postdoctoral researcher, your application must be approved by a permanent member of staff (normally your supervisor or PI). This will be automatically determined when you begin your application, and when you submit it, an email will be sent to this person asking them to approve the application before the account can be created. Please note that the form requires your sponsor's UCL username and not their UPI. Permanent members of staff do not need a sponsor and their accounts will be automatically approved. Apply for an account \u00a7 The online application form can be found here: User account application form (UCL login required via Shibboleth) You will need a UCL user name and password. These are the same credentials used to access core services like Portico and HR systems. Application process \u00a7 The application process has these steps: Enter your UCL username and password to access the application form. Complete the application form, reading the instructions carefully. Tip: hover your mouse over text boxes for more information. When you successfully submit the form, your sponsor will be sent an email message asking them to approve your application. If you do not require a sponsor, your application will be automatically approved. Your sponsor should click on the link in the email, log in and approve the account. You will then receive an email when your account is approved, if you have a sponsor. (This does not mean your account has been created yet). You should receive an email once we have created your account. Please note that there may be a delay of up to one working day between an application being approved and your account being created. If your sponsor does not receive the email to approve your account, send them the link to your application directly (it will look like dashboard.rc.ucl.ac.uk/computing/requests/xxxx ) and there will be a button at the top to approve it. Please note: most delays in the application process are caused by sponsors missing or not receiving the approval email, so check with your sponsor first if your application is stuck waiting for approval. Research Computing can only create your account after it is approved. Accounts for visitors \u00a7 UCL visitors are welcome to apply for accounts on Research Computing Services. Please note that: Applicants must have a central UCL account. UCL Visitor accounts can be arranged by your Departmental Administrator, so you should speak to them first. Account applications should specify the UCL grant under which the work is being carried out, if possible, as well as an associated UCL Group or Researcher. Account applications may not be submitted on behalf of another, except to cover accessibility requirements, as the account application process includes agreeing to relevant legal terms and conditions. Accounts for Honorary staff \u00a7 UCL Staff Members may nominate Honorary members (named individuals) to be provided with access to Research Computing services where this is beneficial to UCL's research interests. Nomination should be made via the CRAG , explaining the benefit arising to UCL. Proposals will be reviewed by the CRAG at their monthly meeting and on a case by case basis. All accounts thus provided are subject to all other 'standard' T&C's relating to their use of Research Computing Services. Charges for use of Research Computing services \u00a7 Research Computing services are free at point of use by default. There are no direct charges for your usage under standard resource allocation policy as defined by the CRAG . Several methods are available to researchers who wish to gain access to additional resources, or obtain 'priority' use, including chargeable options. Details are available at Additional Resource_Requests and Purchasing in Myriad .","title":"Account Services"},{"location":"Account_Services/#account-services","text":"","title":"Account Services"},{"location":"Account_Services/#cluster-access-application","text":"There is a single online form for applying to the majority of our clusters. Use of these services is subject to a common set of terms and conditions . All granted applications give you a Myriad account while access to other systems depends on what types of work you tell us you will be doing.","title":"Cluster access application"},{"location":"Account_Services/#account-sponsors","text":"If you are a student or postdoctoral researcher, your application must be approved by a permanent member of staff (normally your supervisor or PI). This will be automatically determined when you begin your application, and when you submit it, an email will be sent to this person asking them to approve the application before the account can be created. Please note that the form requires your sponsor's UCL username and not their UPI. Permanent members of staff do not need a sponsor and their accounts will be automatically approved.","title":"Account sponsors"},{"location":"Account_Services/#apply-for-an-account","text":"The online application form can be found here: User account application form (UCL login required via Shibboleth) You will need a UCL user name and password. These are the same credentials used to access core services like Portico and HR systems.","title":"Apply for an account"},{"location":"Account_Services/#application-process","text":"The application process has these steps: Enter your UCL username and password to access the application form. Complete the application form, reading the instructions carefully. Tip: hover your mouse over text boxes for more information. When you successfully submit the form, your sponsor will be sent an email message asking them to approve your application. If you do not require a sponsor, your application will be automatically approved. Your sponsor should click on the link in the email, log in and approve the account. You will then receive an email when your account is approved, if you have a sponsor. (This does not mean your account has been created yet). You should receive an email once we have created your account. Please note that there may be a delay of up to one working day between an application being approved and your account being created. If your sponsor does not receive the email to approve your account, send them the link to your application directly (it will look like dashboard.rc.ucl.ac.uk/computing/requests/xxxx ) and there will be a button at the top to approve it. Please note: most delays in the application process are caused by sponsors missing or not receiving the approval email, so check with your sponsor first if your application is stuck waiting for approval. Research Computing can only create your account after it is approved.","title":"Application process"},{"location":"Account_Services/#accounts-for-visitors","text":"UCL visitors are welcome to apply for accounts on Research Computing Services. Please note that: Applicants must have a central UCL account. UCL Visitor accounts can be arranged by your Departmental Administrator, so you should speak to them first. Account applications should specify the UCL grant under which the work is being carried out, if possible, as well as an associated UCL Group or Researcher. Account applications may not be submitted on behalf of another, except to cover accessibility requirements, as the account application process includes agreeing to relevant legal terms and conditions.","title":"Accounts for visitors"},{"location":"Account_Services/#accounts-for-honorary-staff","text":"UCL Staff Members may nominate Honorary members (named individuals) to be provided with access to Research Computing services where this is beneficial to UCL's research interests. Nomination should be made via the CRAG , explaining the benefit arising to UCL. Proposals will be reviewed by the CRAG at their monthly meeting and on a case by case basis. All accounts thus provided are subject to all other 'standard' T&C's relating to their use of Research Computing Services.","title":"Accounts for Honorary staff"},{"location":"Account_Services/#charges-for-use-of-research-computing-services","text":"Research Computing services are free at point of use by default. There are no direct charges for your usage under standard resource allocation policy as defined by the CRAG . Several methods are available to researchers who wish to gain access to additional resources, or obtain 'priority' use, including chargeable options. Details are available at Additional Resource_Requests and Purchasing in Myriad .","title":"Charges for use of Research Computing services"},{"location":"Additional_Resource_Requests/","text":"Additional Resource Requests \u00a7 We recognise that researchers may sometimes require a higher throughput of work than it is possible to achieve with free \u2018fair share\u2019 usage of Myriad , Grace and Kathleen . There a couple of ways of obtaining additional Legion resource beyond this fair share: Make a special request to the CRAG for free access to additional resources \u00a7 Users who wish to request additional resources or reserve resources beyond those provided can complete the additional resource request form in collaboration with your supervisor or the project's principal investigator. This includes requests for increased storage quotas. The completed form should be sent to the Research Computing Platforms team at rc-support@ucl.ac.uk , for technical review. If successful, your case will be presented to the CRAG for consideration at the next meeting of the Group. The CRAG meets monthly, usually on the third Friday of the month, and users will be informed of the Group\u2019s decision as soon as possible after their next meeting. Note that an application to the CRAG for additional resources is only likely to be approved if the impact on other users is not deemed to be significant, or of long duration. Additional resource request form Examples of requests \u00a7 Increased Scratch quota - tell us how much, for what purpose and how long you'll need it. Once implemented, lquota will show the new quota. Longer wallclock limit Consider whether you can checkpoint and restart your job: that is, write out everything that you need for a second job to begin where the previous one finished. Running multiple shorter jobs one after the other is more robust since if anything goes wrong you lose less work. If this is not possible for your jobs, explain why. Please note that we cannot guarantee that longer jobs will not be interrupted by planned outages or maintenance periods. We try not to, but sometimes it is unavoidable. Include details on what resources one job is likely to require, how many of those jobs you expect to need to run, and over what time period you'll need access to longer jobs. If granted, you will be given access to the crag5day project for example, and by adding #$ -P crag5day to your jobscript you will be able to request a longer wallclock time than usual for that job. Request hosting of shared datasets \u00a7 We have provision for hosting shared datasets for users on Myriad. These can be datasets that are freely accessible by all users, or ones limited to groups. Hosted datasets: Will not be backed up. Must have a named primary contact. Must be reapplied for every 12 months to make sure they are still current and required. Will have an associated quota. Will be removed when renewal lapses (notice will be given). They are likely to be managed by a role account - access to the role account will be by ssh key. To apply for a hosted dataset, please send this form to rc-support@ucl.ac.uk . Hosted dataset request form Purchase dedicated compute nodes or priority cycles on Myriad \u00a7 Researchers may purchase additional resources to be used as part of the Myriad High Performance Computing cluster if the free service does not meet their needs. See Paid-for resources: Purchasing in Myriad for details. Further information \u00a7 For further advice or information on future hardware options, please contact rc-support@ucl.ac.uk .","title":"Additional Resource Requests"},{"location":"Additional_Resource_Requests/#additional-resource-requests","text":"We recognise that researchers may sometimes require a higher throughput of work than it is possible to achieve with free \u2018fair share\u2019 usage of Myriad , Grace and Kathleen . There a couple of ways of obtaining additional Legion resource beyond this fair share:","title":"Additional Resource Requests"},{"location":"Additional_Resource_Requests/#make-a-special-request-to-the-crag-for-free-access-to-additional-resources","text":"Users who wish to request additional resources or reserve resources beyond those provided can complete the additional resource request form in collaboration with your supervisor or the project's principal investigator. This includes requests for increased storage quotas. The completed form should be sent to the Research Computing Platforms team at rc-support@ucl.ac.uk , for technical review. If successful, your case will be presented to the CRAG for consideration at the next meeting of the Group. The CRAG meets monthly, usually on the third Friday of the month, and users will be informed of the Group\u2019s decision as soon as possible after their next meeting. Note that an application to the CRAG for additional resources is only likely to be approved if the impact on other users is not deemed to be significant, or of long duration. Additional resource request form","title":"Make a special request to the CRAG for free access to additional resources"},{"location":"Additional_Resource_Requests/#examples-of-requests","text":"Increased Scratch quota - tell us how much, for what purpose and how long you'll need it. Once implemented, lquota will show the new quota. Longer wallclock limit Consider whether you can checkpoint and restart your job: that is, write out everything that you need for a second job to begin where the previous one finished. Running multiple shorter jobs one after the other is more robust since if anything goes wrong you lose less work. If this is not possible for your jobs, explain why. Please note that we cannot guarantee that longer jobs will not be interrupted by planned outages or maintenance periods. We try not to, but sometimes it is unavoidable. Include details on what resources one job is likely to require, how many of those jobs you expect to need to run, and over what time period you'll need access to longer jobs. If granted, you will be given access to the crag5day project for example, and by adding #$ -P crag5day to your jobscript you will be able to request a longer wallclock time than usual for that job.","title":"Examples of requests"},{"location":"Additional_Resource_Requests/#request-hosting-of-shared-datasets","text":"We have provision for hosting shared datasets for users on Myriad. These can be datasets that are freely accessible by all users, or ones limited to groups. Hosted datasets: Will not be backed up. Must have a named primary contact. Must be reapplied for every 12 months to make sure they are still current and required. Will have an associated quota. Will be removed when renewal lapses (notice will be given). They are likely to be managed by a role account - access to the role account will be by ssh key. To apply for a hosted dataset, please send this form to rc-support@ucl.ac.uk . Hosted dataset request form","title":"Request hosting of shared datasets"},{"location":"Additional_Resource_Requests/#purchase-dedicated-compute-nodes-or-priority-cycles-on-myriad","text":"Researchers may purchase additional resources to be used as part of the Myriad High Performance Computing cluster if the free service does not meet their needs. See Paid-for resources: Purchasing in Myriad for details.","title":"Purchase dedicated compute nodes or priority cycles on Myriad"},{"location":"Additional_Resource_Requests/#further-information","text":"For further advice or information on future hardware options, please contact rc-support@ucl.ac.uk .","title":"Further information"},{"location":"Contact_Us/","text":"Contact and Support \u00a7 Users should direct any queries relating to their use of Research Computing services to the Research Computing Support Team at rc-support@ucl.ac.uk (see below). The team will respond to your question as quickly as possible, giving priority to requests that are deemed urgent on the basis of the information provided. Availability: 9:30am - 4:30pm, Monday - Friday, except on Bank Holidays and College Closures. We aim to provide to you with a useful response within 24 hours. Please do not email individuals unless you are explicitly asked to do so; always use the rc-support email address provided as this is the best way for your request to be processed. Drop-In Sessions \u00a7 Research IT Services holds drop-in sessions roughly every two weeks which at least one member of the Research Computing team usually attends. More details and dates for these sessions are available on the the RITS pages . If you have a particularly complex problem, it may be useful to email the support address, rc-support@ucl.ac.uk , beforehand so that the person attending can prepare. Location \u00a7 The Research Computing Team are located at: 105 Judd Street Floor 1 London WC1E 9RN We are keen to collaborate and welcome visitors to our offices to talk about all things research computing. However, we do not operate a walk-up service desk: if you are frustrated by slow response to a support ticket, we are sorry but please do send reminders as there is probably a good reason why your request is not being processed.","title":"Contact and Support"},{"location":"Contact_Us/#contact-and-support","text":"Users should direct any queries relating to their use of Research Computing services to the Research Computing Support Team at rc-support@ucl.ac.uk (see below). The team will respond to your question as quickly as possible, giving priority to requests that are deemed urgent on the basis of the information provided. Availability: 9:30am - 4:30pm, Monday - Friday, except on Bank Holidays and College Closures. We aim to provide to you with a useful response within 24 hours. Please do not email individuals unless you are explicitly asked to do so; always use the rc-support email address provided as this is the best way for your request to be processed.","title":"Contact and Support"},{"location":"Contact_Us/#drop-in-sessions","text":"Research IT Services holds drop-in sessions roughly every two weeks which at least one member of the Research Computing team usually attends. More details and dates for these sessions are available on the the RITS pages . If you have a particularly complex problem, it may be useful to email the support address, rc-support@ucl.ac.uk , beforehand so that the person attending can prepare.","title":"Drop-In Sessions"},{"location":"Contact_Us/#location","text":"The Research Computing Team are located at: 105 Judd Street Floor 1 London WC1E 9RN We are keen to collaborate and welcome visitors to our offices to talk about all things research computing. However, we do not operate a walk-up service desk: if you are frustrated by slow response to a support ticket, we are sorry but please do send reminders as there is probably a good reason why your request is not being processed.","title":"Location"},{"location":"Example_Jobscripts/","text":"On this page we describe some basic example scripts to submit jobs to our clusters. After creating your script, submit it to the scheduler with: qsub my_script.sh Service Differences \u00a7 These scripts are applicable to all our clusters, but node sizes (core count, memory, and temporary storage sizes) differ between machines, so please check those details on the cluster-specific pages. Some clusters are diskless and have no temporary space that can be requested. Working Directories and Output \u00a7 The parallel filesystems we use to provide the home and scratch filesystems perform best when reading or writing single large files, and worst when operating on many different small files. To avoid causing problems, many of the scripts below are written to create all their files in the temporary $TMPDIR storage, and compress and copy them to the scratch area at the end of the job. This can be a problem if your job is not finishing and you need to see the output, or if your job is crashing or failing to produce what you expected. Feel free to modify the scripts to read from or write to Scratch directly, however, your performance will generally not be as good as writing to $TMPDIR , and you may impact the general performance of the machine if you do this with many jobs simultaneously. This is particularly the case with single-core jobs, because that core is guaranteed to be writing out data. Please be aware that some clusters are diskless (eg Kathleen) and have no $TMPDIR available for use - in those you must remove the request for tmpfs in your script. Check the cluster-specific pages. Note that there is also the option of using the Local2Scratch process ( see below ), which takes place after the job has finished, in the clean-up step. This gives you the option of always getting the contents of $TMPDIR back, at the cost of possibly getting incomplete files and not having any control over where the files go. Note about Projects \u00a7 Projects are a system used in the scheduler and the accounting system to track budgets and access controls. Most users of UCL's internal clusters will not need to specify a project and will default to the AllUsers project. Users of the Thomas and Michael services should refer to the specific pages for those machines, and the information they were given when they registered. To specify a project ID in a job script, use the -P object as below: #$ -P <your_project_id> Resources \u00a7 The lines starting with #$ -l are where you are requesting resources like wallclock time (how long your job is allowed to run), memory, and possibly tmpfs (local hard disk space on the node, if it is not diskless). If you have no notion of how much you should request for any of these, have a look at How do I estimate what resources to request in my jobscript? Serial Job Script Example \u00a7 The most basic type of job a user can submit is a serial job. These jobs run on a single processor (core) with a single thread. Shown below is a simple job script that runs /bin/date (which prints the current date) on the compute node, and puts the output into a file. #!/bin/bash -l # Batch script to run a serial job under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set the name of the job. #$ -N Serial_Job # Set the working directory to somewhere in your scratch space. # This is a necessary step as compute nodes cannot write to $HOME. # Replace \"<your_UCL_id>\" with your UCL user ID. #$ -wd /home/<your_UCL_id>/Scratch/workspace # Your work should be done in $TMPDIR cd $TMPDIR # Run the application and put the output into a file called date.txt /bin/date > date.txt # Preferably, tar-up (archive) all output files onto the shared scratch area tar -zcvf $HOME /Scratch/files_from_job_ $JOB_ID .tar.gz $TMPDIR # Make sure you have given enough time for the copy to complete! Multi-threaded Job Example \u00a7 For programs that can use multiple threads, you can request multiple processor cores using the -pe smp <number> option. One common method for using multiple threads in a program is OpenMP, and the $OMP_NUM_THREADS environment variable is set automatically in a job of this type to tell OpenMP how many threads it should use. Most methods for running multi-threaded applications should correctly detect how many cores have been allocated, though ( via a mechanism called cgroups ). Note that this job script works directly in scratch instead of in the temporary $TMPDIR storage. #!/bin/bash -l # Batch script to run an OpenMP threaded job under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM for each core/thread # (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set the name of the job. #$ -N Multi-threaded Job # Request 16 cores. #$ -pe smp 16 # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID #$ -wd /home/<your_UCL_id>/Scratch/output # 8. Run the application. $HOME /my_program/example MPI Job Script Example \u00a7 The default MPI implementation on our clusters is the Intel MPI stack. MPI programs don\u2019t use a shared memory model so they can be run across multiple nodes. This script differs considerably from the serial and OpenMP jobs in that MPI programs need to be invoked by a program called gerun. This is our wrapper for mpirun and takes care of passing the number of processors and a file called a machine file. Important : If you wish to pass a file or stream of data to the standard input (stdin) of an MPI program, there are specific command-line options you need to use to control which MPI tasks are able to receive it. ( -s for Intel MPI, --stdin for OpenMPI.) Please consult the help output of the mpirun command for further information. The gerun launcher does not automatically handle this. If you use OpenMPI, you need to make sure the Intel MPI modules are removed and the OpenMPI modules are loaded, either in your jobscript or in your shell start-up files (e.g. ~/.bashrc ). #!/bin/bash -l # Batch script to run an MPI parallel job under SGE with Intel MPI. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per process (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space per node # (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set the name of the job. #$ -N MadScience_1_16 # Select the MPI parallel environment and 16 processes. #$ -pe mpi 16 # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID : #$ -wd /home/<your_UCL_id>/Scratch/output # Run our MPI job. GERun is a wrapper that launches MPI jobs on our clusters. gerun $HOME /src/science/simulate Array Job Script Example \u00a7 If you want to submit a large number of similar serial jobs then it may be easier to submit them as an array job. Array jobs are similar to serial jobs except we use the -t option to get Sun Grid Engine to run 10,000 copies of this job numbered 1 to 10,000. Each job in this array will have the same job ID but a different task ID. The task ID is stored in the $SGE_TASK_ID environment variable in each task. All the usual SGE output files have the task ID appended. MPI jobs and parallel shared memory jobs can also be submitted as arrays. #!/bin/bash -l # Batch script to run a serial array job under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set up the job array. In this instance we have requested 10000 tasks # numbered 1 to 10000. #$ -t 1-10000 # Set the name of the job. #$ -N MyArrayJob # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID :) #$ -wd /home/<your_UCL_id>/Scratch/output # Run the application. echo \" $JOB_NAME $SGE_TASK_ID \" Array Job Script Example Using Parameter File \u00a7 Often a user will want to submit a large number of similar jobs but their input parameters don't match easily on to an index from 1 to n. In these cases it's possible to use a parameter file. To use this script a user needs to construct a file with a line for each element in the job array, with parameters separated by spaces. For example: 0001 1.5 3 aardvark 0002 1.1 13 guppy 0003 1.23 5 elephant 0004 1.112 23 panda 0005 ... Assuming that this file is stored in ~/Scratch/input/params.txt (you can call this file anything you want) then the user can use awk/sed to get the appropriate variables out of the file. The script below does this and stores them in $index , $variable1 , $variable2 and $variable3 . So for example in task 4, $index = 0004 , $variable1 = 1.112 , $variable2 = 23 and $variable3 = panda . Since the parameter file can be generated automatically from a user's datasets, this approach allows the simple automation, submission and management of thousands or tens of thousands of tasks. #!/bin/bash -l # Batch script to run an array job. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set up the job array. In this instance we have requested 1000 tasks # numbered 1 to 1000. #$ -t 1-1000 # Set the name of the job. #$ -N array-params # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID :) #$ -wd /home/<your_UCL_id>/Scratch/output # Parse parameter file to get variables. number = $SGE_TASK_ID paramfile = /home/<your_UCL_id>/Scratch/input/params.txt index = \"`sed -n ${ number } p $paramfile | awk '{print $1 }'`\" variable1 = \"`sed -n ${ number } p $paramfile | awk '{print $2 }'`\" variable2 = \"`sed -n ${ number } p $paramfile | awk '{print $3 }'`\" variable3 = \"`sed -n ${ number } p $paramfile | awk '{print $4 }'`\" # Run the program (replace echo with your binary and options). echo \" $index \" \" $variable1 \" \" $variable2 \" \" $variable3 \" Example Array Job Using Local2Scratch \u00a7 Users can automate the transfer of data from $TMPDIR to their scratch space by adding the text #Local2Scratch to their script on a line alone as a special comment. During the clean-up phase of the job, a tool checks whether the script contains that text, and if so, files are transferred from $TMPDIR to a directory in scratch with the structure <job id>/<job id>.<task id>.<queue>/ . The example below does this for a job array, but this works for any job type. #!/bin/bash -l # Batch script to run an array job under SGE and # transfer the output to Scratch from local. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set up the job array. In this instance we have requested 10000 tasks # numbered 1 to 10000. #$ -t 1-10000 # Set the name of the job. #$ -N local2scratcharray # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID :) #$ -wd /home/<your_UCL_id>/Scratch/output # Automate transfer of output to Scratch from $TMPDIR. #Local2Scratch # Run the application in TMPDIR. cd $TMPDIR hostname > hostname.txt Array Job Script with a Stride \u00a7 If each task for your array job is very small, you will get better use of the cluster if you can combine a number of these so each has a couple of hours' worth of work to do. There is a startup cost associated with the amount of time it takes to set up a new job. If your job's runtime is very small, this cost is proportionately high, and you incur it with every array task. Using a stride will allow you to leave your input files numbered as before, and each array task will run N inputs. For example, a stride of 10 will give you these task IDs: 1, 11, 21... Your script can then have a loop that runs task IDs from $SGE_TASK_ID to $SGE_TASK_ID + 9 , so each task is doing ten times as many runs as it was before. #!/bin/bash -l # Batch script to run an array job with strided task IDs under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set up the job array. In this instance we have requested task IDs # numbered 1 to 10000 with a stride of 10. #$ -t 1-10000:10 # Set the name of the job. #$ -N arraystride # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID :) #$ -wd /home/<your_UCL_id>/Scratch/output # Automate transfer of output to Scratch from $TMPDIR. #Local2Scratch # Do your work in $TMPDIR cd $TMPDIR # 10. Loop through the IDs covered by this stride and run the application if # the input file exists. (This is because the last stride may not have that # many inputs available). Or you can leave out the check and get an error. for (( i = $SGE_TASK_ID ; i< $SGE_TASK_ID +10 ; i++ )) do if [ -f \"input. $i \" ] then echo \" $JOB_NAME \" \" $SGE_TASK_ID \" \"input. $i \" fi done Hybrid MPI plus OpenMP jobscript example \u00a7 This is a type of job where you have a small number of MPI processes, and each one of those launches a number of threads. One common form of this is to have only one MPI process per node which handles communication between nodes, and the work on each node is done in a shared memory style by threads. When requesting resources for this type of job, what you are asking the scheduler for is the physical number of cores and amount of memory per core that you need. Whether you end up running MPI processes or threads on that core is up to your code. (The -pe mpi xx request is telling it you want an MPI parallel environment and xx number of cores, not that you want xx MPI processes - this can be confusing). Setting number of threads \u00a7 You can either set $OMP_NUM_THREADS for the number of OpenMP threads yourself, or allow it to be worked out automatically by setting it to OMP_NUM_THREADS=$(ppn) . That is a helper script on our clusters which will set $OMP_NUM_THREADS to $NSLOTS/$NHOSTS , so you will use threads within a node and MPI between nodes and don't need to know in advance what size of node you are running on. Gerun will then run $NSLOTS/$OMP_NUM_THREADS processes, round-robin allocated (if supported by the MPI). #!/bin/bash -l # Batch script to run a hybrid parallel job under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per core (must be an integer) #$ -l mem=1G # Request 15 gigabytes of TMPDIR space per node (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set the name of the job. #$ -N MadIntelHybrid # Select the MPI parallel environment and 80 cores. #$ -pe mpi 80 # Set the working directory to somewhere in your scratch space. # This directory must exist. #$ -wd /home/<your_UCL_id/scratch/output/ # Automatically set threads using ppn. On a cluster with 40 cores # per node this will be 80/2 = 40 threads. export OMP_NUM_THREADS = $( ppn ) # Run our MPI job with the default modules. Gerun is a wrapper script for mpirun. gerun $HOME /src/madscience/madhybrid If you want to specify a specific number of OMP threads yourself, you would alter the relevant lines above to this: # Request 80 cores and run 4 MPI processes per 40-core node, each spawning 10 threads #$ -pe mpi 80 export OMP_NUM_THREADS=10 gerun your_binary GPU Job Script Example \u00a7 To use NVIDIA GPUs with the CUDA libraries, you need to load the CUDA runtime libraries module or else set up the environment yourself. The script below shows what you'll need to unload and load the appropriate modules. You also need to use the -l gpu=<number> option to request the GPUs from the scheduler. #!/bin/bash -l # Batch script to run a GPU job under SGE. # Request a number of GPU cards, in this case 2 (the maximum) #$ -l gpu=2 # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB) #$ -l tmpfs=15G # Set the name of the job. #$ -N GPUJob # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID :) #$ -wd /home/<your_UCL_id>/Scratch/output # Change into temporary directory to run work cd $TMPDIR # load the cuda module (in case you are running a CUDA program) module unload compilers mpi module load compilers/gnu/4.9.2 module load cuda/7.5.18/gnu-4.9.2 # Run the application - the line below is just a random example. mygpucode # 10. Preferably, tar-up (archive) all output files onto the shared scratch area tar zcvf $HOME /Scratch/files_from_job_ $JOB_ID .tar.gz $TMPDIR # Make sure you have given enough time for the copy to complete! Job using MPI and GPUs \u00a7 It is possible to run MPI programs that use GPUs but our clusters currently only support this within a single node. The script below shows how to run a program using 2 gpus and 12 cpus. #!/bin/bash -l # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 12 cores, 2 GPUs, 1 gigabyte of RAM per CPU, 15 gigabyte of TMPDIR space #$ -l mem=1G #$ -l gpu=2 #$ -pe mpi 12 #$ -l tmpfs=15G # Set the name of the job. #$ -N GPUMPIrun # Set the working directory to somewhere in your scratch space. #$ -wd /home/<your user id>/Scratch/output/ # Run our MPI job. You can choose OpenMPI or IntelMPI for GCC. module unload compilers mpi module load compilers/gnu/4.9.2 module load mpi/openmpi/1.10.1/gnu-4.9.2 module load cuda/7.5.18/gnu-4.9.2 gerun myGPUapp","title":"Example Jobscripts"},{"location":"Example_Jobscripts/#service-differences","text":"These scripts are applicable to all our clusters, but node sizes (core count, memory, and temporary storage sizes) differ between machines, so please check those details on the cluster-specific pages. Some clusters are diskless and have no temporary space that can be requested.","title":"Service Differences"},{"location":"Example_Jobscripts/#working-directories-and-output","text":"The parallel filesystems we use to provide the home and scratch filesystems perform best when reading or writing single large files, and worst when operating on many different small files. To avoid causing problems, many of the scripts below are written to create all their files in the temporary $TMPDIR storage, and compress and copy them to the scratch area at the end of the job. This can be a problem if your job is not finishing and you need to see the output, or if your job is crashing or failing to produce what you expected. Feel free to modify the scripts to read from or write to Scratch directly, however, your performance will generally not be as good as writing to $TMPDIR , and you may impact the general performance of the machine if you do this with many jobs simultaneously. This is particularly the case with single-core jobs, because that core is guaranteed to be writing out data. Please be aware that some clusters are diskless (eg Kathleen) and have no $TMPDIR available for use - in those you must remove the request for tmpfs in your script. Check the cluster-specific pages. Note that there is also the option of using the Local2Scratch process ( see below ), which takes place after the job has finished, in the clean-up step. This gives you the option of always getting the contents of $TMPDIR back, at the cost of possibly getting incomplete files and not having any control over where the files go.","title":"Working Directories and Output"},{"location":"Example_Jobscripts/#note-about-projects","text":"Projects are a system used in the scheduler and the accounting system to track budgets and access controls. Most users of UCL's internal clusters will not need to specify a project and will default to the AllUsers project. Users of the Thomas and Michael services should refer to the specific pages for those machines, and the information they were given when they registered. To specify a project ID in a job script, use the -P object as below: #$ -P <your_project_id>","title":"Note about Projects"},{"location":"Example_Jobscripts/#resources","text":"The lines starting with #$ -l are where you are requesting resources like wallclock time (how long your job is allowed to run), memory, and possibly tmpfs (local hard disk space on the node, if it is not diskless). If you have no notion of how much you should request for any of these, have a look at How do I estimate what resources to request in my jobscript?","title":"Resources"},{"location":"Example_Jobscripts/#serial-job-script-example","text":"The most basic type of job a user can submit is a serial job. These jobs run on a single processor (core) with a single thread. Shown below is a simple job script that runs /bin/date (which prints the current date) on the compute node, and puts the output into a file. #!/bin/bash -l # Batch script to run a serial job under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set the name of the job. #$ -N Serial_Job # Set the working directory to somewhere in your scratch space. # This is a necessary step as compute nodes cannot write to $HOME. # Replace \"<your_UCL_id>\" with your UCL user ID. #$ -wd /home/<your_UCL_id>/Scratch/workspace # Your work should be done in $TMPDIR cd $TMPDIR # Run the application and put the output into a file called date.txt /bin/date > date.txt # Preferably, tar-up (archive) all output files onto the shared scratch area tar -zcvf $HOME /Scratch/files_from_job_ $JOB_ID .tar.gz $TMPDIR # Make sure you have given enough time for the copy to complete!","title":"Serial Job Script Example"},{"location":"Example_Jobscripts/#multi-threaded-job-example","text":"For programs that can use multiple threads, you can request multiple processor cores using the -pe smp <number> option. One common method for using multiple threads in a program is OpenMP, and the $OMP_NUM_THREADS environment variable is set automatically in a job of this type to tell OpenMP how many threads it should use. Most methods for running multi-threaded applications should correctly detect how many cores have been allocated, though ( via a mechanism called cgroups ). Note that this job script works directly in scratch instead of in the temporary $TMPDIR storage. #!/bin/bash -l # Batch script to run an OpenMP threaded job under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM for each core/thread # (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set the name of the job. #$ -N Multi-threaded Job # Request 16 cores. #$ -pe smp 16 # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID #$ -wd /home/<your_UCL_id>/Scratch/output # 8. Run the application. $HOME /my_program/example","title":"Multi-threaded Job Example"},{"location":"Example_Jobscripts/#mpi-job-script-example","text":"The default MPI implementation on our clusters is the Intel MPI stack. MPI programs don\u2019t use a shared memory model so they can be run across multiple nodes. This script differs considerably from the serial and OpenMP jobs in that MPI programs need to be invoked by a program called gerun. This is our wrapper for mpirun and takes care of passing the number of processors and a file called a machine file. Important : If you wish to pass a file or stream of data to the standard input (stdin) of an MPI program, there are specific command-line options you need to use to control which MPI tasks are able to receive it. ( -s for Intel MPI, --stdin for OpenMPI.) Please consult the help output of the mpirun command for further information. The gerun launcher does not automatically handle this. If you use OpenMPI, you need to make sure the Intel MPI modules are removed and the OpenMPI modules are loaded, either in your jobscript or in your shell start-up files (e.g. ~/.bashrc ). #!/bin/bash -l # Batch script to run an MPI parallel job under SGE with Intel MPI. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per process (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space per node # (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set the name of the job. #$ -N MadScience_1_16 # Select the MPI parallel environment and 16 processes. #$ -pe mpi 16 # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID : #$ -wd /home/<your_UCL_id>/Scratch/output # Run our MPI job. GERun is a wrapper that launches MPI jobs on our clusters. gerun $HOME /src/science/simulate","title":"MPI Job Script Example"},{"location":"Example_Jobscripts/#array-job-script-example","text":"If you want to submit a large number of similar serial jobs then it may be easier to submit them as an array job. Array jobs are similar to serial jobs except we use the -t option to get Sun Grid Engine to run 10,000 copies of this job numbered 1 to 10,000. Each job in this array will have the same job ID but a different task ID. The task ID is stored in the $SGE_TASK_ID environment variable in each task. All the usual SGE output files have the task ID appended. MPI jobs and parallel shared memory jobs can also be submitted as arrays. #!/bin/bash -l # Batch script to run a serial array job under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set up the job array. In this instance we have requested 10000 tasks # numbered 1 to 10000. #$ -t 1-10000 # Set the name of the job. #$ -N MyArrayJob # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID :) #$ -wd /home/<your_UCL_id>/Scratch/output # Run the application. echo \" $JOB_NAME $SGE_TASK_ID \"","title":"Array Job Script Example"},{"location":"Example_Jobscripts/#array-job-script-example-using-parameter-file","text":"Often a user will want to submit a large number of similar jobs but their input parameters don't match easily on to an index from 1 to n. In these cases it's possible to use a parameter file. To use this script a user needs to construct a file with a line for each element in the job array, with parameters separated by spaces. For example: 0001 1.5 3 aardvark 0002 1.1 13 guppy 0003 1.23 5 elephant 0004 1.112 23 panda 0005 ... Assuming that this file is stored in ~/Scratch/input/params.txt (you can call this file anything you want) then the user can use awk/sed to get the appropriate variables out of the file. The script below does this and stores them in $index , $variable1 , $variable2 and $variable3 . So for example in task 4, $index = 0004 , $variable1 = 1.112 , $variable2 = 23 and $variable3 = panda . Since the parameter file can be generated automatically from a user's datasets, this approach allows the simple automation, submission and management of thousands or tens of thousands of tasks. #!/bin/bash -l # Batch script to run an array job. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set up the job array. In this instance we have requested 1000 tasks # numbered 1 to 1000. #$ -t 1-1000 # Set the name of the job. #$ -N array-params # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID :) #$ -wd /home/<your_UCL_id>/Scratch/output # Parse parameter file to get variables. number = $SGE_TASK_ID paramfile = /home/<your_UCL_id>/Scratch/input/params.txt index = \"`sed -n ${ number } p $paramfile | awk '{print $1 }'`\" variable1 = \"`sed -n ${ number } p $paramfile | awk '{print $2 }'`\" variable2 = \"`sed -n ${ number } p $paramfile | awk '{print $3 }'`\" variable3 = \"`sed -n ${ number } p $paramfile | awk '{print $4 }'`\" # Run the program (replace echo with your binary and options). echo \" $index \" \" $variable1 \" \" $variable2 \" \" $variable3 \"","title":"Array Job Script Example Using Parameter File"},{"location":"Example_Jobscripts/#example-array-job-using-local2scratch","text":"Users can automate the transfer of data from $TMPDIR to their scratch space by adding the text #Local2Scratch to their script on a line alone as a special comment. During the clean-up phase of the job, a tool checks whether the script contains that text, and if so, files are transferred from $TMPDIR to a directory in scratch with the structure <job id>/<job id>.<task id>.<queue>/ . The example below does this for a job array, but this works for any job type. #!/bin/bash -l # Batch script to run an array job under SGE and # transfer the output to Scratch from local. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set up the job array. In this instance we have requested 10000 tasks # numbered 1 to 10000. #$ -t 1-10000 # Set the name of the job. #$ -N local2scratcharray # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID :) #$ -wd /home/<your_UCL_id>/Scratch/output # Automate transfer of output to Scratch from $TMPDIR. #Local2Scratch # Run the application in TMPDIR. cd $TMPDIR hostname > hostname.txt","title":"Example Array Job Using Local2Scratch"},{"location":"Example_Jobscripts/#array-job-script-with-a-stride","text":"If each task for your array job is very small, you will get better use of the cluster if you can combine a number of these so each has a couple of hours' worth of work to do. There is a startup cost associated with the amount of time it takes to set up a new job. If your job's runtime is very small, this cost is proportionately high, and you incur it with every array task. Using a stride will allow you to leave your input files numbered as before, and each array task will run N inputs. For example, a stride of 10 will give you these task IDs: 1, 11, 21... Your script can then have a loop that runs task IDs from $SGE_TASK_ID to $SGE_TASK_ID + 9 , so each task is doing ten times as many runs as it was before. #!/bin/bash -l # Batch script to run an array job with strided task IDs under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set up the job array. In this instance we have requested task IDs # numbered 1 to 10000 with a stride of 10. #$ -t 1-10000:10 # Set the name of the job. #$ -N arraystride # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID :) #$ -wd /home/<your_UCL_id>/Scratch/output # Automate transfer of output to Scratch from $TMPDIR. #Local2Scratch # Do your work in $TMPDIR cd $TMPDIR # 10. Loop through the IDs covered by this stride and run the application if # the input file exists. (This is because the last stride may not have that # many inputs available). Or you can leave out the check and get an error. for (( i = $SGE_TASK_ID ; i< $SGE_TASK_ID +10 ; i++ )) do if [ -f \"input. $i \" ] then echo \" $JOB_NAME \" \" $SGE_TASK_ID \" \"input. $i \" fi done","title":"Array Job Script with a Stride"},{"location":"Example_Jobscripts/#hybrid-mpi-plus-openmp-jobscript-example","text":"This is a type of job where you have a small number of MPI processes, and each one of those launches a number of threads. One common form of this is to have only one MPI process per node which handles communication between nodes, and the work on each node is done in a shared memory style by threads. When requesting resources for this type of job, what you are asking the scheduler for is the physical number of cores and amount of memory per core that you need. Whether you end up running MPI processes or threads on that core is up to your code. (The -pe mpi xx request is telling it you want an MPI parallel environment and xx number of cores, not that you want xx MPI processes - this can be confusing).","title":"Hybrid MPI plus OpenMP jobscript example"},{"location":"Example_Jobscripts/#setting-number-of-threads","text":"You can either set $OMP_NUM_THREADS for the number of OpenMP threads yourself, or allow it to be worked out automatically by setting it to OMP_NUM_THREADS=$(ppn) . That is a helper script on our clusters which will set $OMP_NUM_THREADS to $NSLOTS/$NHOSTS , so you will use threads within a node and MPI between nodes and don't need to know in advance what size of node you are running on. Gerun will then run $NSLOTS/$OMP_NUM_THREADS processes, round-robin allocated (if supported by the MPI). #!/bin/bash -l # Batch script to run a hybrid parallel job under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per core (must be an integer) #$ -l mem=1G # Request 15 gigabytes of TMPDIR space per node (default is 10 GB - remove if cluster is diskless) #$ -l tmpfs=15G # Set the name of the job. #$ -N MadIntelHybrid # Select the MPI parallel environment and 80 cores. #$ -pe mpi 80 # Set the working directory to somewhere in your scratch space. # This directory must exist. #$ -wd /home/<your_UCL_id/scratch/output/ # Automatically set threads using ppn. On a cluster with 40 cores # per node this will be 80/2 = 40 threads. export OMP_NUM_THREADS = $( ppn ) # Run our MPI job with the default modules. Gerun is a wrapper script for mpirun. gerun $HOME /src/madscience/madhybrid If you want to specify a specific number of OMP threads yourself, you would alter the relevant lines above to this: # Request 80 cores and run 4 MPI processes per 40-core node, each spawning 10 threads #$ -pe mpi 80 export OMP_NUM_THREADS=10 gerun your_binary","title":"Setting number of threads"},{"location":"Example_Jobscripts/#gpu-job-script-example","text":"To use NVIDIA GPUs with the CUDA libraries, you need to load the CUDA runtime libraries module or else set up the environment yourself. The script below shows what you'll need to unload and load the appropriate modules. You also need to use the -l gpu=<number> option to request the GPUs from the scheduler. #!/bin/bash -l # Batch script to run a GPU job under SGE. # Request a number of GPU cards, in this case 2 (the maximum) #$ -l gpu=2 # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM (must be an integer followed by M, G, or T) #$ -l mem=1G # Request 15 gigabyte of TMPDIR space (default is 10 GB) #$ -l tmpfs=15G # Set the name of the job. #$ -N GPUJob # Set the working directory to somewhere in your scratch space. # Replace \"<your_UCL_id>\" with your UCL user ID :) #$ -wd /home/<your_UCL_id>/Scratch/output # Change into temporary directory to run work cd $TMPDIR # load the cuda module (in case you are running a CUDA program) module unload compilers mpi module load compilers/gnu/4.9.2 module load cuda/7.5.18/gnu-4.9.2 # Run the application - the line below is just a random example. mygpucode # 10. Preferably, tar-up (archive) all output files onto the shared scratch area tar zcvf $HOME /Scratch/files_from_job_ $JOB_ID .tar.gz $TMPDIR # Make sure you have given enough time for the copy to complete!","title":"GPU Job Script Example"},{"location":"Example_Jobscripts/#job-using-mpi-and-gpus","text":"It is possible to run MPI programs that use GPUs but our clusters currently only support this within a single node. The script below shows how to run a program using 2 gpus and 12 cpus. #!/bin/bash -l # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 12 cores, 2 GPUs, 1 gigabyte of RAM per CPU, 15 gigabyte of TMPDIR space #$ -l mem=1G #$ -l gpu=2 #$ -pe mpi 12 #$ -l tmpfs=15G # Set the name of the job. #$ -N GPUMPIrun # Set the working directory to somewhere in your scratch space. #$ -wd /home/<your user id>/Scratch/output/ # Run our MPI job. You can choose OpenMPI or IntelMPI for GCC. module unload compilers mpi module load compilers/gnu/4.9.2 module load mpi/openmpi/1.10.1/gnu-4.9.2 module load cuda/7.5.18/gnu-4.9.2 gerun myGPUapp","title":"Job using MPI and GPUs"},{"location":"Experienced_Users/","text":"Quick Start Guide for Experienced HPC Users \u00a7 What Services are available? \u00a7 UCL \u00a7 Grace/Kathleen - HPC, large parallel MPI jobs. Myriad - High Throughput, GPU or large memory jobs. External \u00a7 Thomas - MMM Hub Tier 2 Michael - Faraday Institution Tier 2 How do I get access? \u00a7 UCL services: Fill in the sign-up form Tier 2 services: Contact your point of contact. How do I connect? \u00a7 All connections are via SSH, and you use your UCL credentials to log in (external users should use the mmmXXXX account with the SSH key they have provided to their point of contact). UCL services can only be connected to by users inside the UCL network which may mean using the institutional VPN or \"bouncing\" off another UCL machine when accessing them from outside the UCL network . The Tier 2 services (Thomas and Michael) are externally accessible. Login hosts \u00a7 Service General alias Direct login node addresses Grace grace.rc.ucl.ac.uk login01.ext.grace.ucl.ac.uk login02.ext.grace.ucl.ac.uk Kathleen kathleen.rc.ucl.ac.uk login01.kathleen.rc.ucl.ac.uk login02.kathleen.rc.ucl.ac.uk Myriad myriad.rc.ucl.ac.uk login12.myriad.rc.ucl.ac.uk login13.myriad.rc.ucl.ac.uk Thomas thomas.rc.ucl.ac.uk login03.thomas.rc.ucl.ac.uk login04.thomas.rc.ucl.ac.uk Michael michael.rc.ucl.ac.uk login10.michael.rc.ucl.ac.uk login11.michael.rc.ucl.ac.uk Generally you should connect to the general alias as this is load-balanced across the available login nodes, however if you use screen or tmux you will want to use the direct hostname so that you can reconnect to your session. Software stack \u00a7 All UCL services use the same software stack based upon RHEL 7.x with a standardised set of packages, exposed to the user through environment modules (the module command). By default this has a set of useful tools loaded, as well as the Intel compilers and MPI but users are free to change their own environment. Batch System \u00a7 UCL services use Grid Engine to manage jobs. This install is somewhat customised and so scripts for non-UCL services may not work . We recommend that when launching MPI jobs you use our gerun parallel launcher instead of mpirun as it inherits settings from the job and launches the appropriate number of processes with the MPI implementation you have chosen. It abstracts away a lot of the complexity between different version of MPI. # using gerun gerun myMPIprogram # using mpirun when a machinefile is needed (eg Intel MPI) mpirun -np $NSLOTS -machinefile $PE_HOSTFILE myMPIprogram $NSLOTS is an environment variable containing the value you gave to -pe mpi so you do not need to re-specify it. Troubleshooting gerun \u00a7 If you need to see what gerun is doing because something is not working as expected, look at the error file for your job, default name $JOBNAME.e$JOB_ID . It will contain debug information from gerun about where it ran and the exact mpirun command it used. You may need to use mpirun directly with different options if your program has sufficiently complex process placement requirements, or is using something like GlobalArrays and requires a different process layout than it is being given. Script sections \u00a7 Shebang \u00a7 It's important that you add the -l option to bash in the shebang so that login scripts are parsed and the environment modules environment is set up. #! must be the first two characters in the file, no previous white space. #!/bin/bash -l Resources you can request \u00a7 Number of cores \u00a7 For MPI: #$ -pe mpi <number of cores> For threads: #$ -pe smp <number of cores> For single core jobs you don't need to request a number of cores. For hybrid codes use the MPI example and set OMP_NUM_THREADS to control the number of threads per node. gerun will launch the right number of processes in the right place if you use it. Amount of RAM per core \u00a7 #$ -l mem=<integer amount of RAM in G or M> e.g. #$ -l mem=4G requests 4 gigabytes of RAM per core. Run time \u00a7 #$ -l h_rt=<hours:minutes:seconds> e.g. #$ -l h_rt=48:00:00 requests 48 hours. Working directory \u00a7 Either a specific working directory: #$ -wd /path/to/working/directory or the directory the script was submitted from: #$ -cwd GPUs (Myriad only) \u00a7 #$ -l gpu=<number of GPUs> Enable Hyperthreads (Kathleen only) \u00a7 #$ -l threads=1 The -l threads= request is not a true/false setting, instead you are telling the scheduler you want one slot to block one virtual cpu instead of the normal situation where it blocks two. If you have a script with a threads request and want to override it on the command line or set it back to normal, the usual case is -l threads=2 . (Setting threads to 0 does not disable hyperthreading!) With Hyperthreads enabled you need to request twice as many cores and then control threads vs MPI ranks with OMP_NUM_THREADS . E.g. #$ -pe mpi 160 #$ -l threads=1 export OMP_NUM_THREADS = 2 Would use 80 cores, with two threads (on Hyperthreads) per core. If you use gerun to launch your MPI process, it will take care of the division for you, but if you're using mpirun or mpiexec directly, you'll have to take care to use the correct number of MPI ranks per node yourself. Note that memory requests are now per virtual core with hyperthreading enabled. If you asked for #$ -l mem=4G on a node with 80 virtual cores and 192G RAM then you are requiring 320G RAM in total which will not fit on that node and so you would be given a sparse process layout across more nodes to meet this requirement. Temporary local disk (every machine EXCEPT Kathleen) \u00a7 #$ -l tmpdir=<size in G> e.g. #$ -l tmpdir=10G requests 10 gigabytes of temporary local disk. The rest of the script \u00a7 You need to load any module dependencies, set up any custom environment variables or paths you need and then run the rest of your workflow. Submitting your jobscript \u00a7 Job scripts can be submitted with qsub , jobs can be monitored with qstat and deleted with qdel . Interactive jobs \u00a7 If you need to run an interactive job, possibly with X forwarding, you can do so using qrsh . Please see our page on interactive jobs for more details.","title":"Quick Start Guide for Experienced HPC Users"},{"location":"Experienced_Users/#quick-start-guide-for-experienced-hpc-users","text":"","title":"Quick Start Guide for Experienced HPC Users"},{"location":"Experienced_Users/#what-services-are-available","text":"","title":"What Services are available?"},{"location":"Experienced_Users/#ucl","text":"Grace/Kathleen - HPC, large parallel MPI jobs. Myriad - High Throughput, GPU or large memory jobs.","title":"UCL"},{"location":"Experienced_Users/#external","text":"Thomas - MMM Hub Tier 2 Michael - Faraday Institution Tier 2","title":"External"},{"location":"Experienced_Users/#how-do-i-get-access","text":"UCL services: Fill in the sign-up form Tier 2 services: Contact your point of contact.","title":"How do I get access?"},{"location":"Experienced_Users/#how-do-i-connect","text":"All connections are via SSH, and you use your UCL credentials to log in (external users should use the mmmXXXX account with the SSH key they have provided to their point of contact). UCL services can only be connected to by users inside the UCL network which may mean using the institutional VPN or \"bouncing\" off another UCL machine when accessing them from outside the UCL network . The Tier 2 services (Thomas and Michael) are externally accessible.","title":"How do I connect?"},{"location":"Experienced_Users/#login-hosts","text":"Service General alias Direct login node addresses Grace grace.rc.ucl.ac.uk login01.ext.grace.ucl.ac.uk login02.ext.grace.ucl.ac.uk Kathleen kathleen.rc.ucl.ac.uk login01.kathleen.rc.ucl.ac.uk login02.kathleen.rc.ucl.ac.uk Myriad myriad.rc.ucl.ac.uk login12.myriad.rc.ucl.ac.uk login13.myriad.rc.ucl.ac.uk Thomas thomas.rc.ucl.ac.uk login03.thomas.rc.ucl.ac.uk login04.thomas.rc.ucl.ac.uk Michael michael.rc.ucl.ac.uk login10.michael.rc.ucl.ac.uk login11.michael.rc.ucl.ac.uk Generally you should connect to the general alias as this is load-balanced across the available login nodes, however if you use screen or tmux you will want to use the direct hostname so that you can reconnect to your session.","title":"Login hosts"},{"location":"Experienced_Users/#software-stack","text":"All UCL services use the same software stack based upon RHEL 7.x with a standardised set of packages, exposed to the user through environment modules (the module command). By default this has a set of useful tools loaded, as well as the Intel compilers and MPI but users are free to change their own environment.","title":"Software stack"},{"location":"Experienced_Users/#batch-system","text":"UCL services use Grid Engine to manage jobs. This install is somewhat customised and so scripts for non-UCL services may not work . We recommend that when launching MPI jobs you use our gerun parallel launcher instead of mpirun as it inherits settings from the job and launches the appropriate number of processes with the MPI implementation you have chosen. It abstracts away a lot of the complexity between different version of MPI. # using gerun gerun myMPIprogram # using mpirun when a machinefile is needed (eg Intel MPI) mpirun -np $NSLOTS -machinefile $PE_HOSTFILE myMPIprogram $NSLOTS is an environment variable containing the value you gave to -pe mpi so you do not need to re-specify it.","title":"Batch System"},{"location":"Experienced_Users/#troubleshooting-gerun","text":"If you need to see what gerun is doing because something is not working as expected, look at the error file for your job, default name $JOBNAME.e$JOB_ID . It will contain debug information from gerun about where it ran and the exact mpirun command it used. You may need to use mpirun directly with different options if your program has sufficiently complex process placement requirements, or is using something like GlobalArrays and requires a different process layout than it is being given.","title":"Troubleshooting gerun"},{"location":"Experienced_Users/#script-sections","text":"","title":"Script sections"},{"location":"Experienced_Users/#shebang","text":"It's important that you add the -l option to bash in the shebang so that login scripts are parsed and the environment modules environment is set up. #! must be the first two characters in the file, no previous white space. #!/bin/bash -l","title":"Shebang"},{"location":"Experienced_Users/#resources-you-can-request","text":"","title":"Resources you can request"},{"location":"Experienced_Users/#number-of-cores","text":"For MPI: #$ -pe mpi <number of cores> For threads: #$ -pe smp <number of cores> For single core jobs you don't need to request a number of cores. For hybrid codes use the MPI example and set OMP_NUM_THREADS to control the number of threads per node. gerun will launch the right number of processes in the right place if you use it.","title":"Number of cores"},{"location":"Experienced_Users/#amount-of-ram-per-core","text":"#$ -l mem=<integer amount of RAM in G or M> e.g. #$ -l mem=4G requests 4 gigabytes of RAM per core.","title":"Amount of RAM per core"},{"location":"Experienced_Users/#run-time","text":"#$ -l h_rt=<hours:minutes:seconds> e.g. #$ -l h_rt=48:00:00 requests 48 hours.","title":"Run time"},{"location":"Experienced_Users/#working-directory","text":"Either a specific working directory: #$ -wd /path/to/working/directory or the directory the script was submitted from: #$ -cwd","title":"Working directory"},{"location":"Experienced_Users/#gpus-myriad-only","text":"#$ -l gpu=<number of GPUs>","title":"GPUs (Myriad only)"},{"location":"Experienced_Users/#enable-hyperthreads-kathleen-only","text":"#$ -l threads=1 The -l threads= request is not a true/false setting, instead you are telling the scheduler you want one slot to block one virtual cpu instead of the normal situation where it blocks two. If you have a script with a threads request and want to override it on the command line or set it back to normal, the usual case is -l threads=2 . (Setting threads to 0 does not disable hyperthreading!) With Hyperthreads enabled you need to request twice as many cores and then control threads vs MPI ranks with OMP_NUM_THREADS . E.g. #$ -pe mpi 160 #$ -l threads=1 export OMP_NUM_THREADS = 2 Would use 80 cores, with two threads (on Hyperthreads) per core. If you use gerun to launch your MPI process, it will take care of the division for you, but if you're using mpirun or mpiexec directly, you'll have to take care to use the correct number of MPI ranks per node yourself. Note that memory requests are now per virtual core with hyperthreading enabled. If you asked for #$ -l mem=4G on a node with 80 virtual cores and 192G RAM then you are requiring 320G RAM in total which will not fit on that node and so you would be given a sparse process layout across more nodes to meet this requirement.","title":"Enable Hyperthreads (Kathleen only)"},{"location":"Experienced_Users/#temporary-local-disk-every-machine-except-kathleen","text":"#$ -l tmpdir=<size in G> e.g. #$ -l tmpdir=10G requests 10 gigabytes of temporary local disk.","title":"Temporary local disk (every machine EXCEPT Kathleen)"},{"location":"Experienced_Users/#the-rest-of-the-script","text":"You need to load any module dependencies, set up any custom environment variables or paths you need and then run the rest of your workflow.","title":"The rest of the script"},{"location":"Experienced_Users/#submitting-your-jobscript","text":"Job scripts can be submitted with qsub , jobs can be monitored with qstat and deleted with qdel .","title":"Submitting your jobscript"},{"location":"Experienced_Users/#interactive-jobs","text":"If you need to run an interactive job, possibly with X forwarding, you can do so using qrsh . Please see our page on interactive jobs for more details.","title":"Interactive jobs"},{"location":"Interactive_Jobs/","text":"Interactive Job Sessions \u00a7 For an interactive session, you reserve some compute nodes via the scheduler and then are logged in live, just like on the login nodes. These can be used for live visualisation, software debugging, or to work up a script to run your program without having to submit each attempt separately to the queue and wait for it to complete. Requesting Access \u00a7 You will be granted an interactive shell after running a command that checks with the scheduler whether the resources you wish to use in your tests/analysis are available. Interactive sessions are requested using the qrsh command. It typically takes the form: qrsh -pe mpi 8 -l mem=512M,h_rt=2:00:00 -now no In this example you are asking to run eight parallel processes within an MPI environment, 512MB RAM per process, for a period of two hours. All job types we support on the system are supported via an interactive session (see our examples section ). Likewise, all qsub options are supported like regular job submission with the difference that with qrsh they must be given at the command line, and not with any job script (or via -@). In addition the -now option is useful when a cluster is busy. By default qrsh and qlogin jobs will run on the next scheduling cycle or give up. The -now no option tells it to keep waiting until it gets scheduled. Pressing Ctrl+C (i.e. the control key and the C key at the same time) will safely cancel the request if it doesn't seem to be able to get you a session. Interactive X sessions \u00a7 You can get an interactive X session from the head node of the job back to the login node. The way to do this is to run the qrsh command in the following generic fashion: qrsh <options> <command> <arguments to <command>> Where <command> is either a command to launch an X terminal like Xterm or Mrxvt or a GUI application like XMGrace or GaussView. To make effective use of the X forwarding you will need to have logged in to the login node with ssh -X or some equivalent method. Here is an example of how you can get a X terminal session with the qrsh command: qrsh -l mem=512M,h_rt=0:30:0 \\ \"/shared/ucl/apps/mrxvt/0.5.4/bin/mrxvt -title 'User Test Node'\" Working on the nodes \u00a7 If you want to run a command on one of your allocated nodes which is not the headnode, you can use a standard ssh command: ssh <hostname> <command> [args] Where <hostname> can be obtained by inspecting the file $TMPDIR/machines . GPU test nodes \u00a7 You can also run GPU jobs interactively simply by adding the -l gpu=1 or -l gpu=2 options to the qrsh command as normal. For more information, please contact us on rc-support@ucl.ac.uk","title":"Interactive Job Sessions"},{"location":"Interactive_Jobs/#interactive-job-sessions","text":"For an interactive session, you reserve some compute nodes via the scheduler and then are logged in live, just like on the login nodes. These can be used for live visualisation, software debugging, or to work up a script to run your program without having to submit each attempt separately to the queue and wait for it to complete.","title":"Interactive Job Sessions"},{"location":"Interactive_Jobs/#requesting-access","text":"You will be granted an interactive shell after running a command that checks with the scheduler whether the resources you wish to use in your tests/analysis are available. Interactive sessions are requested using the qrsh command. It typically takes the form: qrsh -pe mpi 8 -l mem=512M,h_rt=2:00:00 -now no In this example you are asking to run eight parallel processes within an MPI environment, 512MB RAM per process, for a period of two hours. All job types we support on the system are supported via an interactive session (see our examples section ). Likewise, all qsub options are supported like regular job submission with the difference that with qrsh they must be given at the command line, and not with any job script (or via -@). In addition the -now option is useful when a cluster is busy. By default qrsh and qlogin jobs will run on the next scheduling cycle or give up. The -now no option tells it to keep waiting until it gets scheduled. Pressing Ctrl+C (i.e. the control key and the C key at the same time) will safely cancel the request if it doesn't seem to be able to get you a session.","title":"Requesting Access"},{"location":"Interactive_Jobs/#interactive-x-sessions","text":"You can get an interactive X session from the head node of the job back to the login node. The way to do this is to run the qrsh command in the following generic fashion: qrsh <options> <command> <arguments to <command>> Where <command> is either a command to launch an X terminal like Xterm or Mrxvt or a GUI application like XMGrace or GaussView. To make effective use of the X forwarding you will need to have logged in to the login node with ssh -X or some equivalent method. Here is an example of how you can get a X terminal session with the qrsh command: qrsh -l mem=512M,h_rt=0:30:0 \\ \"/shared/ucl/apps/mrxvt/0.5.4/bin/mrxvt -title 'User Test Node'\"","title":"Interactive X sessions"},{"location":"Interactive_Jobs/#working-on-the-nodes","text":"If you want to run a command on one of your allocated nodes which is not the headnode, you can use a standard ssh command: ssh <hostname> <command> [args] Where <hostname> can be obtained by inspecting the file $TMPDIR/machines .","title":"Working on the nodes"},{"location":"Interactive_Jobs/#gpu-test-nodes","text":"You can also run GPU jobs interactively simply by adding the -l gpu=1 or -l gpu=2 options to the qrsh command as normal. For more information, please contact us on rc-support@ucl.ac.uk","title":"GPU test nodes"},{"location":"Job_Results/","text":"Where do my results go? \u00a7 After submitting your job, you can use the command qstat to view the status of all the jobs you have submitted. Once you can no longer see your job on the list, this means your job has completed. To view details on jobs that have completed, you can run jobhist . There are various ways of monitoring the output of your job. Output and error files \u00a7 When writing your job script you can either tell it to start in the directory you submit it from ( -cwd ), or from a particular directory ( -wd <dir> ), or from your home directory (the default). When your job runs, it will create files in this directory for the job's output and errors: File Name Contents myscript.sh Your job script. myscript.sh.o12345 Output from the job. ( stdout ) myscript.sh.e12345 Errors, warnings, and other messages from the job that aren't mixed into the output. ( stderr ) myscript.sh.po12345 Output from the setup script run before a job. (\"prolog\") myscript.sh.pe12345 Output from the clean-up script run after a job. (\"epilog\") Normally there should be nothing in the .po and .pe files, and that's fine. If you change the name of the job in the queue, using the -N option, your output and error files will use that as the filename stem instead. Most programs will also produce separate output files, in a way that is particular to that program. Often these will be in the same directory, but that depends on the program and how you ran it. Grid Engine commands \u00a7 The following commands can be used to submit and monitor a job. Qsub \u00a7 This command submits your job to the batch queue. You can also use options on the command-line to override options you have put in your job script. Command Action qsub myscript.sh Submit the script as-is qsub -N NewName myscript.sh Submit the script but change the job's name qsub -l h_rt=24:0:0 myscript.sh Submit the script but change the maximum run-time qsub -hold_jid 12345 myscript.sh Submit the script but make it wait for job 12345 to finish qsub -ac allow=XYZ myscript.sh Submit the script but only let it run on node classes X, Y, and Z Qstat \u00a7 This command shows the status of your jobs. When you run qstat with no options, all of your jobs currently running will be displayed. By adding in the option -f -j <job-ID> you will get more detail on the specified job. Qdel \u00a7 This command deletes your job from the queue. When deleting a job will need to run qdel <job-ID> , however qdel '*' can be used to delete all jobs. To delete a batch of jobs, creating a file with the list of job IDs that you would like to delete and placing it in the following commands will delete the following jobs: cat <filename> | xargs qdel Qsub emailing \u00a7 We also have a mailing system that can be implemented to send emails with reminders of the status of your job through qsub . In your jobscript, or when you use qsub to submit your job, you can use the option -m . You can specify when you want an email sent to you by using the below options after qsub -m : b Mail is sent at the beginning of the job. e Mail is sent at the end of the job. a Mail is sent when the job is aborted or rescheduled. s Mail is sent when the job is suspended. n No mail is sent. (The default.) You can use more than one of these options by putting them together after the -m option; for example, adding the following to your job script would mean you get an email when the job begins and when it ends: #$ -m be","title":"Where do my results go?"},{"location":"Job_Results/#where-do-my-results-go","text":"After submitting your job, you can use the command qstat to view the status of all the jobs you have submitted. Once you can no longer see your job on the list, this means your job has completed. To view details on jobs that have completed, you can run jobhist . There are various ways of monitoring the output of your job.","title":"Where do my results go?"},{"location":"Job_Results/#output-and-error-files","text":"When writing your job script you can either tell it to start in the directory you submit it from ( -cwd ), or from a particular directory ( -wd <dir> ), or from your home directory (the default). When your job runs, it will create files in this directory for the job's output and errors: File Name Contents myscript.sh Your job script. myscript.sh.o12345 Output from the job. ( stdout ) myscript.sh.e12345 Errors, warnings, and other messages from the job that aren't mixed into the output. ( stderr ) myscript.sh.po12345 Output from the setup script run before a job. (\"prolog\") myscript.sh.pe12345 Output from the clean-up script run after a job. (\"epilog\") Normally there should be nothing in the .po and .pe files, and that's fine. If you change the name of the job in the queue, using the -N option, your output and error files will use that as the filename stem instead. Most programs will also produce separate output files, in a way that is particular to that program. Often these will be in the same directory, but that depends on the program and how you ran it.","title":"Output and error files"},{"location":"Job_Results/#grid-engine-commands","text":"The following commands can be used to submit and monitor a job.","title":"Grid Engine commands"},{"location":"Job_Results/#qsub","text":"This command submits your job to the batch queue. You can also use options on the command-line to override options you have put in your job script. Command Action qsub myscript.sh Submit the script as-is qsub -N NewName myscript.sh Submit the script but change the job's name qsub -l h_rt=24:0:0 myscript.sh Submit the script but change the maximum run-time qsub -hold_jid 12345 myscript.sh Submit the script but make it wait for job 12345 to finish qsub -ac allow=XYZ myscript.sh Submit the script but only let it run on node classes X, Y, and Z","title":"Qsub"},{"location":"Job_Results/#qstat","text":"This command shows the status of your jobs. When you run qstat with no options, all of your jobs currently running will be displayed. By adding in the option -f -j <job-ID> you will get more detail on the specified job.","title":"Qstat"},{"location":"Job_Results/#qdel","text":"This command deletes your job from the queue. When deleting a job will need to run qdel <job-ID> , however qdel '*' can be used to delete all jobs. To delete a batch of jobs, creating a file with the list of job IDs that you would like to delete and placing it in the following commands will delete the following jobs: cat <filename> | xargs qdel","title":"Qdel"},{"location":"Job_Results/#qsub-emailing","text":"We also have a mailing system that can be implemented to send emails with reminders of the status of your job through qsub . In your jobscript, or when you use qsub to submit your job, you can use the option -m . You can specify when you want an email sent to you by using the below options after qsub -m : b Mail is sent at the beginning of the job. e Mail is sent at the end of the job. a Mail is sent when the job is aborted or rescheduled. s Mail is sent when the job is suspended. n No mail is sent. (The default.) You can use more than one of these options by putting them together after the -m option; for example, adding the following to your job script would mean you get an email when the job begins and when it ends: #$ -m be","title":"Qsub emailing"},{"location":"New_Users/","text":"Guide for New Users \u00a7 What is a cluster? Which service(s) at UCL are right for me? How do I connect to the clusters? How do I transfer my data? How do I run a job? What does a jobscript look like? Where do my results go?","title":"Guide for New Users"},{"location":"New_Users/#guide-for-new-users","text":"What is a cluster? Which service(s) at UCL are right for me? How do I connect to the clusters? How do I transfer my data? How do I run a job? What does a jobscript look like? Where do my results go?","title":"Guide for New Users"},{"location":"Planned_Outages/","text":"Planned Outages \u00a7 The second Tuesday of every month is a maintenance day, when the following clusters should be considered at risk from 8:00AM: Myriad, Kathleen, Thomas, Young, Michael, Aristotle and the Data Science Platform. We won\u2019t necessarily perform maintenance every month, and notice by email will not always be given about maintenance day work that only puts services at risk. Full details of outages are emailed to the cluster-specific user lists. Generally speaking, an outage will last from the morning of the first date listed until mid-morning of the end date listed. The nodes may need to be emptied of jobs in advance ('drained'), so jobs may remain in the queue for longer before an outage begins. If there is a notable delay in bringing the system back we will contact you after approximately midday - please don't email us at 9am on the listed end days! After an outage, the first day or two back should be considered 'at risk'; that is, things are more likely to go wrong without warning and we might need to make adjustments. Date Service Status Reason 1 Nov 2022 -> 2 Nov 2022 Myriad Planned Upgrade of firmware on all Lustre storage disks. No reading or writing of files will be possible during the upgrade interval. Jobs will be drained for 8am on Tues 1 Nov and we expect to re-enable jobs on Weds 2 Nov. Previous Outages \u00a7 Date Service Status Reason 27 Sep 2022 -> 28 Sep 2022 Myriad Completed Revised dates Moving switches. Jobs will be drained for 8am on 27 Sept and access to the login nodes disabled. Access should be restored during the day on Thurs 29. Myriad should be considered at risk for the rest of the week. 12 Apr 2022 -> 19 Apr 2022 Kathleen, Young, Michael Completed Datacentre work. Clusters will be drained of jobs and access to the login nodes disabled, for 4:00pm Tuesday 12th April. Clusters will be brought back into service during the day on Tuesday 19th April. They should be considered AT RISK that day. 1 Apr 2022 -> 4 Apr 2022 Kathleen, Young, Michael Completed Datacentre work. Clusters will be will be drained of jobs and access to the login nodes disabled, for 4pm Friday 1st April. Clusters will be brought back into service on Monday the 4th April. They should be considered AT RISK that day. 7 Jan 2022 -> 10 Jan 2022 Kathleen, Young, Michael Completed Datacentre power outage. Jobs will be drained for 2pm on Fri 7. Login nodes will be powered down. Clusters will be brought back online during Mon 10, should be considered at risk that day. 19 Nov 2021 Myriad Completed One of our suppliers will be onsite to replace a component. Queues are being drained. 9 Nov 2021 Myriad Completed Continued work to improve the file system. Myriad will be unavailable for the whole day. Queues are being drained for 8am. 12 Oct 2021 Myriad Completed Filesystem load tests before expansion. No jobs will be running and access to login nodes will be blocked during the test, expected to finish by end of day. 29 Sept 2021 -> 30 Sept 2021, 5 Oct 2021 Young Completed Extended: expected back in service midday Tues 5 Oct. Queues drained so ZFS can be upgraded to patch a bug causing metadata server issues. No jobs will be running. 14 Sept 2021 Myriad Planned Queues drained for 8am so that the central software installs can be redistributed over more servers. This is to help mitigate the effects of current filesystem issues. 03 Aug 2021 Young, Michael Completed Shortly after 8am: ~10 mins Gold outage for security updates. New job submission and Gold commands will not work during this. 12 July 2021 Myriad Completed Drain of d97a (Economics) nodes for 8am to update network config. May require less than the full day. Jobs will remain in queue until drain is over or run on other nodes if they can. 15 Jun 2021 -> 18 Jun 2021 Myriad Completed Datacentre network outage. No jobs will run on the 15th, and Myriad will be at risk for the rest of the week. 14 Jun 2021 Kathleen, Young and Data Science Platform Completed Datacentre network outage 8.30-9am. No login access and no jobs will run. 08 Jun 2021 Thomas Completed Storage will be at risk during an essential controller reboot. 22 May 2021 -> 24 May 2021 Michael Completed Datacentre network outage. Queues to be drained. Full outage, no access. 22 May 2021 -> 24 May 2021 Young Completed Gold and job submission expected to be unavailable while database uncontactable due to datacentre network outage. 22 May 2021 -> 24 May 2021 Myriad and Kathleen Completed Gold (i.e. high priority) job submission expected to be unavailable while database uncontactable due to datacentre network outage. 29 Mar 2021 -> 30 Mar 2021 Myriad Completed A number of GPU nodes will be reserved for the NVidia AI Bootcamp on the 29th and 30th March. Some users may experience longer than usual waiting times for GPUs, from Monday the 22nd until after the event, especially for long jobs. We apologise for any inconvenience this may cause. 30 Mar 2021 Kathleen Completed Essential Lustre filesystem maintenance. Queue draining starts 26th March, SSH access to login nodes disabled on the 30th. Full outage, no access. 23 Feb 2021 8-9:30am Young Completed Gold and job submission expected to be unavailable for two 10-min periods while network switches upgraded. 09 Feb 2021 8-1pm Young Completed Gold and job submission outage while we migrate our database server. 08 Jan 2021 -> 12 Jan 2021 Kathleen Completed Electrical work in datacentre. Logins delayed until Tues morning while tests completed. 08 Jan 2021 -> 12 Jan 2021 MMM Michael Completed Electrical work in datacentre. Logins delayed until Tues morning while tests completed. 08 Jan 2021 -> 12 Jan 2021 MMM Young Completed Electrical work in datacentre. Logins delayed until Tues morning while tests completed. 02 Jul 2020 -> 09 Jul 2020 Michael Rollback Lustre software upgrade to fix bug. Full outage, no access. Upgrade was unusable, downgrading to previous. 01 May 2020 -> 11 May 2020 Myriad Completed Storage upgrade. 20 Mar 2020 -> 30 Mar 2020 Myriad Stopped, Postponed Issues found with new storage during outage. Myriad returned to service 24th. Sync data; switch to new storage. (Important: new metadata servers). Begins midday. Full outage, no access. 16 Mar 2020 -> (was 23) 26 Mar 2020 Michael Completed Firmware upgrades to bridge old and new networks. Extended to get jobs working on new nodes. 2 Mar 2020 -> 9 Mar 2020 Michael Completed Installation of phase 2 hardware, network bridging 10 Feb 2020 -> 17 Feb 2020 Myriad Cancelled Storage upgrade to 3PB Retirements \u00a7 These clusters or services are being retired. Notable dates are below. Grace \u00a7 1st February 2021: Job submission will be switched off. Jobs still in the queue will run. Access to the login nodes will remain for three months so you can recover your data. 3rd May 2021: Access to the login nodes will be removed and all data will be deleted. MMM Hub Thomas \u00a7 This service has been retired as part of the MMM Hub. Some remains are still running temporarily for UCL users only. Monday 1 March 2021: Job submission for MMM Hub users will be switched off this morning. Jobs already in the queue may still run. Access to the login nodes will remain for one month so you can retrieve data. Friday 5 March 2021: Queues will be drained. Any jobs left will never run. Thursday 1 April 2021: Access to the login nodes for MMM Hub users will be removed and all data will be deleted. RStudio (rstudio.rc.ucl.ac.uk) \u00a7 16 May 2022: The old RStudio service that was at rstudio.rc.ucl.ac.uk will be decommisioned and users will no longer be able to login to it.","title":"Planned Outages"},{"location":"Planned_Outages/#planned-outages","text":"The second Tuesday of every month is a maintenance day, when the following clusters should be considered at risk from 8:00AM: Myriad, Kathleen, Thomas, Young, Michael, Aristotle and the Data Science Platform. We won\u2019t necessarily perform maintenance every month, and notice by email will not always be given about maintenance day work that only puts services at risk. Full details of outages are emailed to the cluster-specific user lists. Generally speaking, an outage will last from the morning of the first date listed until mid-morning of the end date listed. The nodes may need to be emptied of jobs in advance ('drained'), so jobs may remain in the queue for longer before an outage begins. If there is a notable delay in bringing the system back we will contact you after approximately midday - please don't email us at 9am on the listed end days! After an outage, the first day or two back should be considered 'at risk'; that is, things are more likely to go wrong without warning and we might need to make adjustments. Date Service Status Reason 1 Nov 2022 -> 2 Nov 2022 Myriad Planned Upgrade of firmware on all Lustre storage disks. No reading or writing of files will be possible during the upgrade interval. Jobs will be drained for 8am on Tues 1 Nov and we expect to re-enable jobs on Weds 2 Nov.","title":"Planned Outages"},{"location":"Planned_Outages/#previous-outages","text":"Date Service Status Reason 27 Sep 2022 -> 28 Sep 2022 Myriad Completed Revised dates Moving switches. Jobs will be drained for 8am on 27 Sept and access to the login nodes disabled. Access should be restored during the day on Thurs 29. Myriad should be considered at risk for the rest of the week. 12 Apr 2022 -> 19 Apr 2022 Kathleen, Young, Michael Completed Datacentre work. Clusters will be drained of jobs and access to the login nodes disabled, for 4:00pm Tuesday 12th April. Clusters will be brought back into service during the day on Tuesday 19th April. They should be considered AT RISK that day. 1 Apr 2022 -> 4 Apr 2022 Kathleen, Young, Michael Completed Datacentre work. Clusters will be will be drained of jobs and access to the login nodes disabled, for 4pm Friday 1st April. Clusters will be brought back into service on Monday the 4th April. They should be considered AT RISK that day. 7 Jan 2022 -> 10 Jan 2022 Kathleen, Young, Michael Completed Datacentre power outage. Jobs will be drained for 2pm on Fri 7. Login nodes will be powered down. Clusters will be brought back online during Mon 10, should be considered at risk that day. 19 Nov 2021 Myriad Completed One of our suppliers will be onsite to replace a component. Queues are being drained. 9 Nov 2021 Myriad Completed Continued work to improve the file system. Myriad will be unavailable for the whole day. Queues are being drained for 8am. 12 Oct 2021 Myriad Completed Filesystem load tests before expansion. No jobs will be running and access to login nodes will be blocked during the test, expected to finish by end of day. 29 Sept 2021 -> 30 Sept 2021, 5 Oct 2021 Young Completed Extended: expected back in service midday Tues 5 Oct. Queues drained so ZFS can be upgraded to patch a bug causing metadata server issues. No jobs will be running. 14 Sept 2021 Myriad Planned Queues drained for 8am so that the central software installs can be redistributed over more servers. This is to help mitigate the effects of current filesystem issues. 03 Aug 2021 Young, Michael Completed Shortly after 8am: ~10 mins Gold outage for security updates. New job submission and Gold commands will not work during this. 12 July 2021 Myriad Completed Drain of d97a (Economics) nodes for 8am to update network config. May require less than the full day. Jobs will remain in queue until drain is over or run on other nodes if they can. 15 Jun 2021 -> 18 Jun 2021 Myriad Completed Datacentre network outage. No jobs will run on the 15th, and Myriad will be at risk for the rest of the week. 14 Jun 2021 Kathleen, Young and Data Science Platform Completed Datacentre network outage 8.30-9am. No login access and no jobs will run. 08 Jun 2021 Thomas Completed Storage will be at risk during an essential controller reboot. 22 May 2021 -> 24 May 2021 Michael Completed Datacentre network outage. Queues to be drained. Full outage, no access. 22 May 2021 -> 24 May 2021 Young Completed Gold and job submission expected to be unavailable while database uncontactable due to datacentre network outage. 22 May 2021 -> 24 May 2021 Myriad and Kathleen Completed Gold (i.e. high priority) job submission expected to be unavailable while database uncontactable due to datacentre network outage. 29 Mar 2021 -> 30 Mar 2021 Myriad Completed A number of GPU nodes will be reserved for the NVidia AI Bootcamp on the 29th and 30th March. Some users may experience longer than usual waiting times for GPUs, from Monday the 22nd until after the event, especially for long jobs. We apologise for any inconvenience this may cause. 30 Mar 2021 Kathleen Completed Essential Lustre filesystem maintenance. Queue draining starts 26th March, SSH access to login nodes disabled on the 30th. Full outage, no access. 23 Feb 2021 8-9:30am Young Completed Gold and job submission expected to be unavailable for two 10-min periods while network switches upgraded. 09 Feb 2021 8-1pm Young Completed Gold and job submission outage while we migrate our database server. 08 Jan 2021 -> 12 Jan 2021 Kathleen Completed Electrical work in datacentre. Logins delayed until Tues morning while tests completed. 08 Jan 2021 -> 12 Jan 2021 MMM Michael Completed Electrical work in datacentre. Logins delayed until Tues morning while tests completed. 08 Jan 2021 -> 12 Jan 2021 MMM Young Completed Electrical work in datacentre. Logins delayed until Tues morning while tests completed. 02 Jul 2020 -> 09 Jul 2020 Michael Rollback Lustre software upgrade to fix bug. Full outage, no access. Upgrade was unusable, downgrading to previous. 01 May 2020 -> 11 May 2020 Myriad Completed Storage upgrade. 20 Mar 2020 -> 30 Mar 2020 Myriad Stopped, Postponed Issues found with new storage during outage. Myriad returned to service 24th. Sync data; switch to new storage. (Important: new metadata servers). Begins midday. Full outage, no access. 16 Mar 2020 -> (was 23) 26 Mar 2020 Michael Completed Firmware upgrades to bridge old and new networks. Extended to get jobs working on new nodes. 2 Mar 2020 -> 9 Mar 2020 Michael Completed Installation of phase 2 hardware, network bridging 10 Feb 2020 -> 17 Feb 2020 Myriad Cancelled Storage upgrade to 3PB","title":"Previous Outages"},{"location":"Planned_Outages/#retirements","text":"These clusters or services are being retired. Notable dates are below.","title":"Retirements"},{"location":"Planned_Outages/#grace","text":"1st February 2021: Job submission will be switched off. Jobs still in the queue will run. Access to the login nodes will remain for three months so you can recover your data. 3rd May 2021: Access to the login nodes will be removed and all data will be deleted.","title":"Grace"},{"location":"Planned_Outages/#mmm-hub-thomas","text":"This service has been retired as part of the MMM Hub. Some remains are still running temporarily for UCL users only. Monday 1 March 2021: Job submission for MMM Hub users will be switched off this morning. Jobs already in the queue may still run. Access to the login nodes will remain for one month so you can retrieve data. Friday 5 March 2021: Queues will be drained. Any jobs left will never run. Thursday 1 April 2021: Access to the login nodes for MMM Hub users will be removed and all data will be deleted.","title":"MMM Hub Thomas"},{"location":"Planned_Outages/#rstudio-rstudiorcuclacuk","text":"16 May 2022: The old RStudio service that was at rstudio.rc.ucl.ac.uk will be decommisioned and users will no longer be able to login to it.","title":"RStudio (rstudio.rc.ucl.ac.uk)"},{"location":"Remote_Access/","text":"Remote Access to Research Computing Resources \u00a7 UCL's Research Computing services are accessible from inside the UCL firewall. If you wish to connect from outside, you need to either connect through a VPN or use SSH to log in to a machine accessible from outside and use that to \"jump\" through into the UCL network. Connecting to the jump boxes \u00a7 You can connect to the jump boxes by connecting with your SSH client to: ssh-gateway.ucl.ac.uk Once connected you can then log on to the UCL RC service you are using as normal. You can configure your ssh client to automatically connect via these jump boxes so that you make the connection in one step. Single-step logins using tunnelling \u00a7 Linux / Unix / Mac OS X \u00a7 On the command line \u00a7 # Log in to Kathleen, jumping via jump box ssh -o ProxyJump=ssh-gateway.ucl.ac.uk kathleen.rc.ucl.ac.uk or # Copy 'my_file', from the machine you are logged in to, into your Scratch on Kathleen scp -o ProxyJump=ssh-gateway.ucl.ac.uk my_file kathleen.rc.ucl.ac.uk:~/Scratch/ This tunnels through the jump box service in order to get you to your destination - you'll be asked for your password twice, once for each machine. You can use this to log in or to copy files. You may also need to do this if you are trying to reach one cluster from another and there is a firewall in the way. Using a config file \u00a7 You can create a config which does this without you needing to type it every time. Inside your ~/.ssh directory on your local machine, add the below to your config file (or create a file called config if you don't already have one). Generically, it should be of this form where <name> can be anything you want to call this entry. You can use these as short-hand names when you run ssh . Host <name> User <remote_user_id> HostName <remote_hostname> proxyCommand ssh -W <remote_hostname>:22 <remote_user_id>@ssh-gateway.ucl.ac.uk This proxyCommand option causes the commands you type in your client to be forwarded on over a secure channel to the specified remote host. Here are some examples - you can have as many of these as you need in your config file. Host myriad User ccxxxxx HostName myriad.rc.ucl.ac.uk proxyCommand ssh -W myriad.rc.ucl.ac.uk:22 ccxxxxx@ssh-gateway.ucl.ac.uk Host login05 User ccxxxxx HostName login05.external.legion.ucl.ac.uk proxyCommand ssh -W login05.external.legion.ucl.ac.uk:22 ccxxxxx@ssh-gateway.ucl.ac.uk Host aristotle User ccxxxxx HostName aristotle.rc.ucl.ac.uk proxyCommand ssh -W aristotle.rc.ucl.ac.uk:22 ccxxxxx@ssh-gateway.rc.ucl.ac.uk You can now just type ssh myriad or scp file1 aristotle:~ and you will go through the jump box. You'll be asked for login details twice since you're logging in to two machines, the jump box and your endpoint. File storage on the Gateway servers \u00a7 The individual servers in the pool for the Gateway service have extremely limited file storage space, intentionally, and should not be used for storing files - if you need to transfer files you should use the two-step process above. This storage should only be used for SSH configuration files. This storage is not mirrored across the jump boxes which means if you write a file to your home directory, you will not be able to read it if you are allocated to another jump box next time you log in. Key management \u00a7 Warning If you use SSH keys you absolutely MUST NOT STORE UNENCRYPTED PRIVATE KEYS ON THIS OR ANY OTHER MULTI-USER COMPUTER . We will be running regular scans of the filesystem to identify and then block unencrypted key pairs across our services. There are currently two servers in the pool, internally named ejp-gateway01 and ejp-gateway02 . Because the /home filesystem is not shared across the jump boxes, you need to sync SSH configuration files like ~/.ssh/authorized_keys across all the available jump boxes so that the change takes effect whichever jump box you are allocated to. You can see which machine you are logged into by the bash prompt. So for example, if on ejp-gateway02 then do: [ccaaxxx@ad.ucl.ac.uk@ejp-gateway02 ~]$ scp -r ~/.ssh ejp-gateway01: Password: known_hosts 100% 196 87.1KB/s 00:00 authorized_keys 100% 0 0.0KB/s 00:00 [ccaaxxx@ad.ucl.ac.uk@ejp-gateway02 ~]$ and similarly if on ejp-gateway01 do scp -r ~/.ssh ejp-gateway02:","title":"Remote Access"},{"location":"Remote_Access/#remote-access-to-research-computing-resources","text":"UCL's Research Computing services are accessible from inside the UCL firewall. If you wish to connect from outside, you need to either connect through a VPN or use SSH to log in to a machine accessible from outside and use that to \"jump\" through into the UCL network.","title":"Remote Access to Research Computing Resources"},{"location":"Remote_Access/#connecting-to-the-jump-boxes","text":"You can connect to the jump boxes by connecting with your SSH client to: ssh-gateway.ucl.ac.uk Once connected you can then log on to the UCL RC service you are using as normal. You can configure your ssh client to automatically connect via these jump boxes so that you make the connection in one step.","title":"Connecting to the jump boxes"},{"location":"Remote_Access/#single-step-logins-using-tunnelling","text":"","title":"Single-step logins using tunnelling"},{"location":"Remote_Access/#linux-unix-mac-os-x","text":"","title":"Linux / Unix / Mac OS X"},{"location":"Remote_Access/#on-the-command-line","text":"# Log in to Kathleen, jumping via jump box ssh -o ProxyJump=ssh-gateway.ucl.ac.uk kathleen.rc.ucl.ac.uk or # Copy 'my_file', from the machine you are logged in to, into your Scratch on Kathleen scp -o ProxyJump=ssh-gateway.ucl.ac.uk my_file kathleen.rc.ucl.ac.uk:~/Scratch/ This tunnels through the jump box service in order to get you to your destination - you'll be asked for your password twice, once for each machine. You can use this to log in or to copy files. You may also need to do this if you are trying to reach one cluster from another and there is a firewall in the way.","title":"On the command line"},{"location":"Remote_Access/#using-a-config-file","text":"You can create a config which does this without you needing to type it every time. Inside your ~/.ssh directory on your local machine, add the below to your config file (or create a file called config if you don't already have one). Generically, it should be of this form where <name> can be anything you want to call this entry. You can use these as short-hand names when you run ssh . Host <name> User <remote_user_id> HostName <remote_hostname> proxyCommand ssh -W <remote_hostname>:22 <remote_user_id>@ssh-gateway.ucl.ac.uk This proxyCommand option causes the commands you type in your client to be forwarded on over a secure channel to the specified remote host. Here are some examples - you can have as many of these as you need in your config file. Host myriad User ccxxxxx HostName myriad.rc.ucl.ac.uk proxyCommand ssh -W myriad.rc.ucl.ac.uk:22 ccxxxxx@ssh-gateway.ucl.ac.uk Host login05 User ccxxxxx HostName login05.external.legion.ucl.ac.uk proxyCommand ssh -W login05.external.legion.ucl.ac.uk:22 ccxxxxx@ssh-gateway.ucl.ac.uk Host aristotle User ccxxxxx HostName aristotle.rc.ucl.ac.uk proxyCommand ssh -W aristotle.rc.ucl.ac.uk:22 ccxxxxx@ssh-gateway.rc.ucl.ac.uk You can now just type ssh myriad or scp file1 aristotle:~ and you will go through the jump box. You'll be asked for login details twice since you're logging in to two machines, the jump box and your endpoint.","title":"Using a config file"},{"location":"Remote_Access/#file-storage-on-the-gateway-servers","text":"The individual servers in the pool for the Gateway service have extremely limited file storage space, intentionally, and should not be used for storing files - if you need to transfer files you should use the two-step process above. This storage should only be used for SSH configuration files. This storage is not mirrored across the jump boxes which means if you write a file to your home directory, you will not be able to read it if you are allocated to another jump box next time you log in.","title":"File storage on the Gateway servers"},{"location":"Remote_Access/#key-management","text":"Warning If you use SSH keys you absolutely MUST NOT STORE UNENCRYPTED PRIVATE KEYS ON THIS OR ANY OTHER MULTI-USER COMPUTER . We will be running regular scans of the filesystem to identify and then block unencrypted key pairs across our services. There are currently two servers in the pool, internally named ejp-gateway01 and ejp-gateway02 . Because the /home filesystem is not shared across the jump boxes, you need to sync SSH configuration files like ~/.ssh/authorized_keys across all the available jump boxes so that the change takes effect whichever jump box you are allocated to. You can see which machine you are logged into by the bash prompt. So for example, if on ejp-gateway02 then do: [ccaaxxx@ad.ucl.ac.uk@ejp-gateway02 ~]$ scp -r ~/.ssh ejp-gateway01: Password: known_hosts 100% 196 87.1KB/s 00:00 authorized_keys 100% 0 0.0KB/s 00:00 [ccaaxxx@ad.ucl.ac.uk@ejp-gateway02 ~]$ and similarly if on ejp-gateway01 do scp -r ~/.ssh ejp-gateway02:","title":"Key management"},{"location":"Status_page/","text":"Status of machines \u00a7 This page outlines that status of each of the machines managed by the Research Computing team at UCL. We endeavour to keep this page as up-to-date as possible but there might be some delay. Also there are spontaneous errors that we have to deal with (i.e. high load on login nodes) but feel free to report them to rc-support@ucl.ac.uk. Finally, details of our planned outages can be found here . Myriad \u00a7 2021-10-12 17:25 - As part of our scheduled outage, we did some load testing on Myriad and believe that we have identified the root cause of all the recent issues with the filesystem to be related to the Mellanox Infiniband interconnect throwing connection errors, specifically failures of network links causing credit loops. These network failures were in turn causing Lustre to crash. 2021-10-14 16:00 - Remedial work on the Infiniband network was completed, jobs re-enabled and logins allowed again. Status of the cluster is good. We found an undiagnosed issue with one of the quota features in Lustre which we have disabled while we investigate further - this means that filesystem quotas are not currently being enforced, and the lquota command does not work. 2021-10-19 12:00 - the new Myriad expansion nodes were enabled and are running jobs. 2021-10-26 21:50 - Heavy load on Lustre began. We are investigating whether or not this was a job. Is currently causing slow filesystem access, and affecting MATLAB loading, git clone and Python import times among others. 2021-10-29 11:50 - We are going to do a failover between servers, then make some changes to the OSSes (object store servers). We will prevent new jobs from starting while this is going on and will re-enable them later. While the failover is happening, filesystem operations and logins will hang until recovery completes. 2021-10-29 14:40 - Jobs were re-enabled. Things are looking better at the moment - we will continue to monitor the system. The main change we made was to upgrade the amount of RAM in the OSSes to let them cache disk use more effectively. We took the opportunity to also replace the disks from the previous disk failures with completely new disks so we will no longer be running on hot spares - this work had already been planned. The disks should finish rebuilding over the weekend so there will be some impact from that, but the memory increase appears to have made a notable difference at present. 2021-11-15 09:16 - Beginning on Saturday night, something triggered a Lustre bug that left both OSSes (object store servers) unresponsive and prevented logins. We are currently working on this. 2021-11-15 12:00 - Logins are working. Jobs are not yet re-enabled. 2021-11-15 16:05 - Jobs are being re-enabled so new ones can start. (Existing jobs were still running if they had not failed). We will be monitoring performance. Kathleen \u00a7 2022-09-27 - Kathleen's metadata servers have started encountering the ZFS+Lustre bug that Young had in the past, which causes very high load and hangs. We also discovered we were running out of inodes on the metadata server - an inode exists for every file and directory, so we need a reduction in the number of files on the system. We prevented new jobs from starting for the time being. 2022-10-03 - We are upgrading Kathleen's ZFS and Lustre on the metadata servers to mitigate the bug. Jobs will not start running again until this is done. Quotas have been enabled. We have contacted users who are currently over quota and also have jobs in the queue - their jobs are held so they do not fail straight away unable to write files once jobs are restarted. These users will be able to release the hold themselves once under quota again with the qrls all command. Young \u00a7 2022-01-04 - The file system on Young is down and has been since the 23rd December. We are working to resolve the issue but there is no official timeline for sorting this out. 2022-01-11 - Young cluster is back in service. Please check for completed successfully / failed jobs. We believe there has been no data loss, but jobs would have been broken after the long interval since 23rd of Dec 2021 up to today, due to timeouts and I/O issues with the filesystem. 2022-01-13 - The Young filesystem is up but not in a very stable state. We want to do a backup and run checks over the weekend and then put the cluster back into service on Monday the 17th. The login nodes are powered off until the backup completes to prevent any risk of data corruption and to make sure nothing else is accessing the data in order to make the backup as fast as possible. 2022-01-17 - We are still waiting for the backup to finish, and at current progress do not expect it to finish until Wednesday at the earliest - sorry about the extended timescale here. The login nodes are still powered off. 2022-01-20 - The current status of the Young backup is that we don't expect it to finish until Monday at the earliest now. Apologies for the delay. 2022-04-04 17:19 - Scheduled cluster update from 1st to 4th of April is still in progress. Users are expected to be able to login tomorrow April 5th. Michael \u00a7 All systems are working well. Thomas \u00a7 System is generally fine but the hardware is dated with respect to the other systems so there may be some read write errors.","title":"Status of machines"},{"location":"Status_page/#status-of-machines","text":"This page outlines that status of each of the machines managed by the Research Computing team at UCL. We endeavour to keep this page as up-to-date as possible but there might be some delay. Also there are spontaneous errors that we have to deal with (i.e. high load on login nodes) but feel free to report them to rc-support@ucl.ac.uk. Finally, details of our planned outages can be found here .","title":"Status of machines"},{"location":"Status_page/#myriad","text":"2021-10-12 17:25 - As part of our scheduled outage, we did some load testing on Myriad and believe that we have identified the root cause of all the recent issues with the filesystem to be related to the Mellanox Infiniband interconnect throwing connection errors, specifically failures of network links causing credit loops. These network failures were in turn causing Lustre to crash. 2021-10-14 16:00 - Remedial work on the Infiniband network was completed, jobs re-enabled and logins allowed again. Status of the cluster is good. We found an undiagnosed issue with one of the quota features in Lustre which we have disabled while we investigate further - this means that filesystem quotas are not currently being enforced, and the lquota command does not work. 2021-10-19 12:00 - the new Myriad expansion nodes were enabled and are running jobs. 2021-10-26 21:50 - Heavy load on Lustre began. We are investigating whether or not this was a job. Is currently causing slow filesystem access, and affecting MATLAB loading, git clone and Python import times among others. 2021-10-29 11:50 - We are going to do a failover between servers, then make some changes to the OSSes (object store servers). We will prevent new jobs from starting while this is going on and will re-enable them later. While the failover is happening, filesystem operations and logins will hang until recovery completes. 2021-10-29 14:40 - Jobs were re-enabled. Things are looking better at the moment - we will continue to monitor the system. The main change we made was to upgrade the amount of RAM in the OSSes to let them cache disk use more effectively. We took the opportunity to also replace the disks from the previous disk failures with completely new disks so we will no longer be running on hot spares - this work had already been planned. The disks should finish rebuilding over the weekend so there will be some impact from that, but the memory increase appears to have made a notable difference at present. 2021-11-15 09:16 - Beginning on Saturday night, something triggered a Lustre bug that left both OSSes (object store servers) unresponsive and prevented logins. We are currently working on this. 2021-11-15 12:00 - Logins are working. Jobs are not yet re-enabled. 2021-11-15 16:05 - Jobs are being re-enabled so new ones can start. (Existing jobs were still running if they had not failed). We will be monitoring performance.","title":"Myriad"},{"location":"Status_page/#kathleen","text":"2022-09-27 - Kathleen's metadata servers have started encountering the ZFS+Lustre bug that Young had in the past, which causes very high load and hangs. We also discovered we were running out of inodes on the metadata server - an inode exists for every file and directory, so we need a reduction in the number of files on the system. We prevented new jobs from starting for the time being. 2022-10-03 - We are upgrading Kathleen's ZFS and Lustre on the metadata servers to mitigate the bug. Jobs will not start running again until this is done. Quotas have been enabled. We have contacted users who are currently over quota and also have jobs in the queue - their jobs are held so they do not fail straight away unable to write files once jobs are restarted. These users will be able to release the hold themselves once under quota again with the qrls all command.","title":"Kathleen"},{"location":"Status_page/#young","text":"2022-01-04 - The file system on Young is down and has been since the 23rd December. We are working to resolve the issue but there is no official timeline for sorting this out. 2022-01-11 - Young cluster is back in service. Please check for completed successfully / failed jobs. We believe there has been no data loss, but jobs would have been broken after the long interval since 23rd of Dec 2021 up to today, due to timeouts and I/O issues with the filesystem. 2022-01-13 - The Young filesystem is up but not in a very stable state. We want to do a backup and run checks over the weekend and then put the cluster back into service on Monday the 17th. The login nodes are powered off until the backup completes to prevent any risk of data corruption and to make sure nothing else is accessing the data in order to make the backup as fast as possible. 2022-01-17 - We are still waiting for the backup to finish, and at current progress do not expect it to finish until Wednesday at the earliest - sorry about the extended timescale here. The login nodes are still powered off. 2022-01-20 - The current status of the Young backup is that we don't expect it to finish until Monday at the earliest now. Apologies for the delay. 2022-04-04 17:19 - Scheduled cluster update from 1st to 4th of April is still in progress. Users are expected to be able to login tomorrow April 5th.","title":"Young"},{"location":"Status_page/#michael","text":"All systems are working well.","title":"Michael"},{"location":"Status_page/#thomas","text":"System is generally fine but the hardware is dated with respect to the other systems so there may be some read write errors.","title":"Thomas"},{"location":"Terms_and_Conditions/","text":"Terms and Conditions \u00a7 All use of Research Computing Platforms is subject to the UCL Computing Regulations. All users will be required to renew their account once per year. Users will receive a reminder one month prior to suspension of their Myriad account sent to their Live@UCL e-mail address. Funding information will need to be provided upon application, and publication information upon renewal. Users are forbidden from performing production runs on the login nodes. The Research Computing Platform Services Team reserve the right to suspend or ban without prior warning any use of the system which impairs its operation. With the exception of in cases where there is imminent harm or risk to the service, the Research Computing Platform Services Team will not access your files without permission. Official service notifications are sent to the myriad-users (or the equivalent for other services) mailing list. Users are automatically subscribed to this list using their Live@UCL e-mail address and should read notices sent there. The Research Computing Platform Services Team reserve the right to suspend users' accounts, without notice, in the event of a user being the subject of any UCL disciplinary procedure, or where a user is found to be in breach of UCL\u2019s Computing Regulations or best practice guidelines regarding password management, as provided by Information Services Division. Users are required to acknowledge their use of Myriad and associated research computing services in any publications describing research that has been conducted, in any part, on Myriad. The following words should be used: \"The authors acknowledge the use of the UCL Myriad High Performance Computing Facility (Myriad@UCL), and associated support services, in the completion of this work\". All support requests should be sent by e-mail to rc-support@ucl.ac.uk.","title":"Terms and Conditions"},{"location":"Terms_and_Conditions/#terms-and-conditions","text":"All use of Research Computing Platforms is subject to the UCL Computing Regulations. All users will be required to renew their account once per year. Users will receive a reminder one month prior to suspension of their Myriad account sent to their Live@UCL e-mail address. Funding information will need to be provided upon application, and publication information upon renewal. Users are forbidden from performing production runs on the login nodes. The Research Computing Platform Services Team reserve the right to suspend or ban without prior warning any use of the system which impairs its operation. With the exception of in cases where there is imminent harm or risk to the service, the Research Computing Platform Services Team will not access your files without permission. Official service notifications are sent to the myriad-users (or the equivalent for other services) mailing list. Users are automatically subscribed to this list using their Live@UCL e-mail address and should read notices sent there. The Research Computing Platform Services Team reserve the right to suspend users' accounts, without notice, in the event of a user being the subject of any UCL disciplinary procedure, or where a user is found to be in breach of UCL\u2019s Computing Regulations or best practice guidelines regarding password management, as provided by Information Services Division. Users are required to acknowledge their use of Myriad and associated research computing services in any publications describing research that has been conducted, in any part, on Myriad. The following words should be used: \"The authors acknowledge the use of the UCL Myriad High Performance Computing Facility (Myriad@UCL), and associated support services, in the completion of this work\". All support requests should be sent by e-mail to rc-support@ucl.ac.uk.","title":"Terms and Conditions"},{"location":"UCL_Service_For_Me/","text":"Which service(s) at UCL are right for me? \u00a7 Depending on the type of jobs you would like to run each cluster can have different requirements that your jobs must meet. When you submit your user account application form you will be given access to the cluster depending on resources selected. Currently we categorise intended workloads into ones that use: Individual single core jobs Large numbers (>1000) of single core jobs Multithreaded jobs Extremely large quantities of RAM (>64GB) Small MPI jobs (<32 cores) Medium-sized MPI jobs (32-256 cores) Large-sized MPI jobs (>256 cores) At least one GPGPU At least ten GPGPUs Each cluster has its own specifications for the types of jobs that they run which is all dependable on list above. The cluster machines we have available are: Myriad Myriad is designed to be most suitable for serial work, including large numbers of serial jobs, and multi-threaded jobs (using e.g. OpenMP). It also includes a small number of GPUs for development or testing work. It went into service in July 2018. See Myriad . Kathleen Kathleen is intended for multi-node jobs (using e.g. MPI) and went into service in Feb 2020 as a replacement for Grace. We recommend using Kathleen if you intend to use more than 36 cores per job. See Kathleen . Grace Grace is intended for multi-node jobs (using e.g. MPI) and went into service in Dec 2015. We recommend using Grace if you intend to use more than 36 cores per job. Grace will run until around the first quarter of 2021. See Grace . Legion The Legion service was an older multipurpose cluster, including capability for serial jobs, multi-threaded jobs, and small multi-node jobs. It is currently being decommissioned and is not running new jobs for general users. Data access ceases entirely by 1 May 2020. Thomas Thomas is the UK's Tier 2 Materials and Molecular Modelling Hub. It is accessible by members of partner institutions and relevant consortia, and is for materials and molecular modelling work only. It has separate access procedures from UCL's central clusters. Access is managed by a Point of Contact from the relevant institution or consortia, not by Research Computing. See Thomas . Michael Michael is an extension to the UCL-hosted Hub for Materials and Molecular Modelling, an EPSRC-funded Tier 2 system providing large scale computation to UK researchers; and delivers computational capability for the Faraday Institution, a national institute for electrochemical energy storage science and technology. Access is managed by a Point of Contact from the Faraday Institution, not by Research Computing. See Michael .","title":"UCL Service For Me"},{"location":"UCL_Service_For_Me/#which-services-at-ucl-are-right-for-me","text":"Depending on the type of jobs you would like to run each cluster can have different requirements that your jobs must meet. When you submit your user account application form you will be given access to the cluster depending on resources selected. Currently we categorise intended workloads into ones that use: Individual single core jobs Large numbers (>1000) of single core jobs Multithreaded jobs Extremely large quantities of RAM (>64GB) Small MPI jobs (<32 cores) Medium-sized MPI jobs (32-256 cores) Large-sized MPI jobs (>256 cores) At least one GPGPU At least ten GPGPUs Each cluster has its own specifications for the types of jobs that they run which is all dependable on list above. The cluster machines we have available are: Myriad Myriad is designed to be most suitable for serial work, including large numbers of serial jobs, and multi-threaded jobs (using e.g. OpenMP). It also includes a small number of GPUs for development or testing work. It went into service in July 2018. See Myriad . Kathleen Kathleen is intended for multi-node jobs (using e.g. MPI) and went into service in Feb 2020 as a replacement for Grace. We recommend using Kathleen if you intend to use more than 36 cores per job. See Kathleen . Grace Grace is intended for multi-node jobs (using e.g. MPI) and went into service in Dec 2015. We recommend using Grace if you intend to use more than 36 cores per job. Grace will run until around the first quarter of 2021. See Grace . Legion The Legion service was an older multipurpose cluster, including capability for serial jobs, multi-threaded jobs, and small multi-node jobs. It is currently being decommissioned and is not running new jobs for general users. Data access ceases entirely by 1 May 2020. Thomas Thomas is the UK's Tier 2 Materials and Molecular Modelling Hub. It is accessible by members of partner institutions and relevant consortia, and is for materials and molecular modelling work only. It has separate access procedures from UCL's central clusters. Access is managed by a Point of Contact from the relevant institution or consortia, not by Research Computing. See Thomas . Michael Michael is an extension to the UCL-hosted Hub for Materials and Molecular Modelling, an EPSRC-funded Tier 2 system providing large scale computation to UK researchers; and delivers computational capability for the Faraday Institution, a national institute for electrochemical energy storage science and technology. Access is managed by a Point of Contact from the Faraday Institution, not by Research Computing. See Michael .","title":"Which service(s) at UCL are right for me?"},{"location":"howto/","text":"How do I? \u00a7 I have an account, now: How do I log in? \u00a7 Logging in is most straightforward if you are inside the UCL firewall. If you are logging in from home or other external networks then you first have to get on to the UCL network . Linux / Unix / Mac OS X \u00a7 Use the terminal and type the below command to secure shell (ssh) into the machine you wish to access. Replace <your_UCL_user_id> with your central UCL username, and <system_name> with the name of the machine you want to log in to, eg. myriad , kathleen , aristotle . ssh <your_UCL_user_id>@<system_name>.rc.ucl.ac.uk Windows \u00a7 On Windows you need something that will give you a suitable terminal and ssh - usually PuTTY, or on Windows 10 you can use OpenSSH from a command prompt and type the same ssh command as the Linux instructions. Using PuTTY \u00a7 PuTTY is a common SSH client on Windows and is available on Desktop@UCL. You can find it under: Start > P > PuTTY or type \"putty\" in the toolbar's search box. You will need to create an entry for the host you are connecting to with the settings below. If you want to save your settings, give them an easily-identifiable name in the \"Saved Sessions\" box and press \"Save\". Then you can select it and \"Load\" next time you use PuTTY. You will then be asked to enter your username and password. Only enter your username, not @<system_name>.rc.ucl.ac.uk . The password field will remain entirely blank when you type in to it - it does not show placeholders to indicate you have typed something. The first time you log in to a new server, you'll get a popup telling you that the server's host key is not cached in the registry - this is normal and is because you have never connected to this server before. If you want to, you can check the host fingerprint against our current key fingerprints . Logging in from outside the UCL firewall \u00a7 You will need to either use the UCL Virtual Private Network or ssh in to UCL's Gateway system ssh-gateway.ucl.ac.uk first. From there you can then ssh in to our systems. ssh <your_UCL_user_id>@ssh-gateway.ucl.ac.uk ssh <your_UCL_user_id>@<system_name>.rc.ucl.ac.uk Advanced: If you find you need to go via the Gateway often, you can set up this jump automatically, see Single-step logins using tunnelling China Connect \u00a7 If you are on China Connect, you will still need to ssh in to a UCL gateway first as described above. Login problems \u00a7 If you experience difficulties with your login, please make sure that you are typing your UCL user ID and your password correctly. If you have recently updated your password, it takes some hours to propagate to all UCL systems. If you still cannot get access but can access other UCL services like the SSH Gateway, please contact us on rc-support@ucl.ac.uk. Your account may have expired, or you may have gone over quota. If you cannot access anything, please see UCL MyAccount - you may need to request a password reset from the Service Desk . If you get a host key error message, you will need to delete old host keys - continue reading! Remote host identification has changed \u00a7 When you log in via SSH, it keeps a record of the host key for the server you logged in to in your .ssh/known_hosts file in your home directory, on the machine you are logging in from. This helps make sure you are connecting directly to the server you think you are, but can cause warnings to show up if the host key on that machine has genuinely changed (usually because of an update or reinstall). Check the host key warning against our current key fingerprints : The error message looks like this if you are using OpenSSH in a terminal: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is SHA256:7FTryal3mIhWr9CqM3EPPeXsfezNk8Mm8HPCCAGXiIA. Please contact your system administrator. Add correct host key in /Users/uccaxxx/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /Users/uccaxxx/.ssh/known_hosts:11 ECDSA host key for myriad.rc.ucl.ac.uk has changed and you have requested strict checking. Host key verification failed. Killed by signal 1. This tells you that the old key is in line 11 of your known_hosts file. Sometimes it will give you a direct command you can run to remove that specific key: ssh-keygen -R myriad.rc.ucl.ac.uk or you can manually delete line 11 yourself in a text editor. If you are logging in via the Gateway, you will need to remove the old key there too. On the Gateway, nano and vim are available text editors. If you are not already familiar with vim , use nano - it has the command shortcuts shown at the bottom, where ^O means press Ctrl and then the letter o . # to open the file for editing in nano nano ~/.ssh/known_hosts Once you have removed the old host key you will be able to ssh in again. The first time you log in to an unknown server you will get a message like this: The authenticity of host 'myriad.rc.ucl.ac.uk can't be established. ECDSA key fingerprint is SHA256:7FTryal3mIhWr9CqM3EPPeXsfezNk8Mm8HPCCAGXiIA. Are you sure you want to continue connecting (yes/no)? Typing yes will allow you to continue logging in. PuTTY will display a warning and you can choose to continue or not. WinSCP will say Server's host key does not match the one that WinSCP has in cache. and you will have the option to update the key. Mac OS X connection failures \u00a7 If you are on Mac OS X and getting many ssh connection failures and broken pipe messages when trying to log in, try adding an ssh timeout to your ssh command: ssh -o ConnectTimeout=10 <your_UCL_user_id>@myriad.rc.ucl.ac.uk This has particularly been a problem with Mac OS X Big Sur when using the VPN. How do I transfer data onto the system? \u00a7 You can transfer data to and from our systems using any program capable of using the Secure Copy (SCP) protocol. This uses the same SSH system as you use to log in to a command line session, but then transfers data over it. This means that if you can use SSH to connect to a system, you can usually use SCP to transfer files to it. Copying files using Linux or Mac OS X \u00a7 You can use the command-line utilities scp, sftp or rsync to copy your data about. You can also use a graphical client (Transmit, CyberDuck, FileZilla). scp \u00a7 This will copy a data file from somewhere on your local machine to a specified location on the remote machine (Myriad etc). scp <local_data_file> <remote_user_id>@<remote_hostname>:<remote_path> # Example: copy myfile from your local current directory into Scratch on Myriad scp myfile ccxxxxx@myriad.rc.ucl.ac.uk:~/Scratch/ This will do the reverse, copying from the remote machine to your local machine. (This is still run from your local machine). scp <remote_user_id>@<remote_hostname>:<remote_path><remote_data_file> <local_path> # Example: copy myfile from Myriad into the Backups directory in your local current directory scp ccxxxxx@myriad.rc.ucl.ac.uk:~/Scratch/myfile Backups/ sftp \u00a7 You can use sftp to log in to the remote machine, navigate through directories and use put and get to copy files from and to your local machine. lcd and lls are local equivalents of cd and ls so you can navigate through your local directories as you go. sftp <remote_user_id>@<remote_hostname> cd <remote_path> get <remote_file> lcd <local_path> put <local_file> # Example: download a copy of file1 into your local current directory, # change local directory and upload a copy of file2 sftp ccxxxxx@myriad.rc.ucl.ac.uk cd Scratch/files get file1 lcd ../files_to_upload put file2 rsync \u00a7 rsync is used to remotely synchronise directories, so can be used to only copy files which have changed. Have a look at man rsync as there are many options. Copying files using Windows and WinSCP \u00a7 WinSCP is a graphical client that you can use for scp or sftp . The login/create new session screen will open if this is the first time you are using WinSCP. You can choose SFTP or SCP as the file protocol. If you have an unstable connection with one, you may wish to try the other. SCP is probably generally better. Fill in the hostname of the machine you wish to connect to, your username and password. Click Save and give your settings a useful name. You'll then be shown your list of Stored sessions, which will have the one you just created. Select the session and click Login. MobaXterm \u00a7 If using MobaXterm, you may need to set a password for the left side file manager panel separately as well as for the main panel, to allow you to drag and drop files and have them transferred to the cluster. Transferring files from outside the UCL firewall \u00a7 As when logging in, when you are outside the UCL firewall you will need a method to connect inside it before you copy files. You can use the UCL Virtual Private Network and scp direct to our systems or you can do some form of SSH tunnelling. Single-step logins using tunnelling \u00a7 Linux / Unix / Mac OS X \u00a7 On the command line \u00a7 # Log in to Myriad, jumping via the Gateway ssh -o ProxyJump=ssh-gateway.ucl.ac.uk myriad.rc.ucl.ac.uk or # Copy 'my_file' from the machine you are logged in to into your Scratch on Grace scp -o ProxyJump=ssh-gateway.ucl.ac.uk my_file myriad.rc.ucl.ac.uk:~/Scratch/ This tunnels through the Gateway in order to get you to your destination - you'll be asked for your password twice, once for each machine. You can use this to log in or to copy files. You may also need to do this if you are trying to reach one cluster from another and there is a firewall in the way. Using a config file \u00a7 You can create a config file which does this without you needing to type it every time. Inside your ~/.ssh directory on your local machine, add the below to your config file (or create a file called config if you don't already have one). Generally, it should be of this form where <name> can be anything you want to call this entry. Host <name> User <remote_user_id> HostName <remote_hostname> proxyCommand ssh -W <remote_hostname>:22 <remote_user_id>@ssh-gateway.ucl.ac.uk This causes the commands you type in your client to be forwarded on over a secure channel to the specified remote host. Here are some examples - you can have as many of these as you need in your config file. Host myriad User ccxxxxx HostName myriad.rc.ucl.ac.uk proxyCommand ssh -W myriad.rc.ucl.ac.uk:22 ccxxxxx@ssh-gateway.ucl.ac.uk Host myriad12 User ccxxxxx HostName login12.myriad.ucl.ac.uk proxyCommand ssh -W login12.myriad.ucl.ac.uk:22 ccxxxxx@ssh-gateway.ucl.ac.uk Host aristotle User ccxxxxx HostName aristotle.rc.ucl.ac.uk proxyCommand ssh -W aristotle.rc.ucl.ac.uk:22 ccxxxxx@ssh-gateway.ucl.ac.uk You can now just type ssh myriad or scp file1 aristotle:~ and you will go through the Gateway. You'll be asked for login details twice since you're logging in to two machines, a Gateway server and your endpoint. Windows - WinSCP \u00a7 WinSCP can also set up SSH tunnels. Create a new session as before, and tick the Advanced options box in the bottom left corner. Select Connection > Tunnel from the left pane. Tick the Connect through SSH tunnel box and enter the hostname of the gateway you are tunnelling through, for example ssh-gateway.ucl.ac.uk Fill in your username and password for that host. (Central UCL ones for the Gateway). Select Session from the left pane and fill in the hostname you want to end up on after the tunnel. Fill in your username and password for that host and set the file protocol to SCP. Save your settings with a useful name. Creating a tunnel that other applications can use \u00a7 Some applications do not read your SSH config file and also cannot set up tunnels themselves, but can use one that you have created separately. FileZilla in particular is something you may want to do this with to transfer your files directly to the clusters from outside UCL using a graphical client. SSH tunnel creation using a terminal \u00a7 You can do this in Linux, Mac OS X and the Windows Command Prompt on Windows 10 and later. Set up a tunnel between a port on your local computer (this is using 3333 as it is unlikely to be in use, but you can pick different ones) to Myriad's port 22 (which is the standard port for ssh), going via a UCL gateway. # replace ccxxxxx with your UCL username ssh -L 3333:myriad.rc.ucl.ac.uk:22 ccxxxxx@socrates.ucl.ac.uk You may also want to use the -N option to tell it not to execute any remote commands and -f to put this command into the background if you want to continue to type other commands into the same terminal. The tunnel now exists, and localhost:3333 on your computer connects to Myriad. SSH tunnel creation using PuTTY \u00a7 On Windows you can also set up a tunnel using PuTTY . Connect to your tunnel with an application (like FileZilla) \u00a7 You can then tell your application to connect to localhost:3333 instead of Myriad. If it has separate boxes for hostname and port, put localhost as the hostname and 3333 as the port. Managing your quota \u00a7 After using lquota to see your total usage, you may wish to find what is using all your space. du is a command that gives you information about your disk usage. Useful options are: du -ch <dir> du -h --max-depth=1 The first will give you a summary of the sizes of directory tree and subtrees inside the directory you specify, using human-readable sizes with a total at the bottom. The second will show you the totals for all top-level directories relative to where you are, plus the grand total. These can help you track down the locations of large amounts of data if you need to reduce your disk usage. How do I connect to UCL group folders, N drive or other smb mounts? \u00a7 You may have data stored in a UCL group folder that you normally mount using smb. You can use smbclient to copy the files across onto Myriad (you do want them to be copied onto Myriad before you run any jobs using them, otherwise the compute node will be sitting there waiting for the copy to complete before it can do anything useful). If the address you are trying to mount looks like smb://ad.ucl.ac.uk/groupfolders then you would do this: smbclient \\\\ad.ucl.ac.uk\\groupfolders This will give you a prompt where you can access that storage in an ftp-like way, where you can use get commands to copy files from there on to Myriad, or put commands to copy data into there from Myriad. You can look at man smbclient on Myriad for the manual. UCL N drive \u00a7 The N drive (Windows filestore, Filestore@UCL) can also be accessed using smb. To find out what smb address to use, look at Adding your home N drive to a Linux machine . Then use smbclient as above to connect to it. How do I connect out to an FTP server? \u00a7 You cannot connect in to Myriad using FTP (we only allow SFTP access) but you can connect out to FTP servers run by other people. Load the GNU inetutils module which provides ftp, telnet and tftp clients. module load inetutils/1.9.4 # connect to your desired server ftp servername.ac.uk You can then use put and get commands to put data on the remote FTP server or download it from there to Myriad. How do I submit a job to the scheduler? \u00a7 To submit a job to the scheduler you need to write a jobscript that contains the resources the job is asking for and the actual commands you want to run. This jobscript is then submitted using the qsub command. qsub myjobscript It will be put in to the queue and will begin running on the compute nodes at some point later when it has been allocated resources. Passing in qsub options on the command line \u00a7 The #$ lines in your jobscript are options to qsub. It will take each line which has #$ as the first two characters and use the contents beyond that as an option. You can also pass options directly to the qsub command and this will override the settings in your script. This can be useful if you are scripting your job submissions in more complicated ways. For example, if you want to change the name of the job for this one instance of the job you can submit your script with: qsub -N NewName myscript.sh Or if you want to increase the wall-clock time to 24 hours: qsub -l h_rt=24:0:0 myscript.sh You can submit jobs with dependencies by using the -hold_jid option. For example, the command below submits a job that won't run until job 12345 has finished: qsub -hold_jid 12345 myscript.sh You may specify node type with the -ac allow= flags as below: qsub -ac allow=XYZ myscript.sh That would restrict the job to running on nodes of type X, Y or Z (the older Legion nodes). Note that for debugging purposes, it helps us if you have these options inside your jobscript rather than passed in on the command line whenever possible. We (and you) can see the exact jobscript that was submitted for every job that ran but not what command line options you submitted it with. Checking your previous jobscripts \u00a7 If you want to check what you submitted for a specific job ID, you can do it with the scriptfor utility. scriptfor 12345 As mentioned above, this will not show any command line options you passed in. How do I monitor a job? \u00a7 qstat \u00a7 The qstat command shows the status of your jobs. By default, if you run it with no options, it shows only your jobs (and no-one else\u2019s). This makes it easier to keep track of your jobs. The output will look something like this: job-ID prior name user state submit/start at queue slots ja-task-ID ----------------------------------------------------------------------------------------------------------------- 123454 2.00685 DI_m3 ccxxxxx Eqw 10/13/2017 15:29:11 12 123456 2.00685 DI_m3 ccxxxxx r 10/13/2017 15:29:11 Yorick@node-x02e-006 24 123457 2.00398 DI_m2 ucappka qw 10/12/2017 14:42:12 1 This shows you the job ID, the numeric priority the scheduler has assigned to the job, the name you have given the job, your username, the state the job is in, the date and time it was submitted at (or started at, if it has begun), the head node of the job, the number of 'slots' it is taking up, and if it is an array job the last column shows the task ID. The queue name ( Yorick here) is generally not useful. The head node name ( node-x02e-006 ) is useful - the node-x part tells you this is an X-type node. If you want to get more information on a particular job, note its job ID and then use the -f and -j flags to get full output about that job. Most of this information is not very useful. qstat -f -j 12345 Job states \u00a7 qw : queueing, waiting r : running Rq : a pre-job check on a node failed and this job was put back in the queue Rr : this job was rescheduled but is now running on a new node Eqw : there was an error in this jobscript. This will not run. t : this job is being transferred dr : this job is being deleted Many jobs cycling between Rq and Rr generally means there is a dodgy compute node which is failing pre-job checks, but is free so everything tries to run there. In this case, let us know and we will investigate. If a job stays in t or dr state for a long time, the node it was on is likely to be unresponsive - again let us know and we'll investigate. A job in Eqw will remain in that state until you delete it - you should first have a look at what the error was with qexplain . qexplain \u00a7 This is a utility to show you the non-truncated error reported by your job. qstat -j will show you a truncated version near the bottom of the output. qexplain 123454 qdel \u00a7 You use qdel to delete a job from the queue. qdel 123454 You can delete all your jobs at once: qdel '*' More scheduler commands \u00a7 Have a look at man qstat and note the commands shown in the SEE ALSO section of the manual page. Exit the manual page and then look at the man pages for those. (You will not be able to run all commands). nodesforjob \u00a7 This is a utility that shows you the current percentage load, memory used and swap used on the nodes your job is running on. If your job is sharing the node with other people's jobs, it will show you the total resources in use, not just those used by your job. This is a snapshot of the current time and resource usage may change over the course of your job. Bear in mind that memory use in particular can increase over time as your job runs. If a cluster has hyperthreading enabled and you aren't using it, full load will show as 50% and not 100% - this is normal and not a problem. For a parallel job, very low (or zero) usage of any of the nodes suggests your job is either not capable of running over multiple nodes, or not partitioning its work effectively - you may be asking for more cores than it can use, or asking for a number of cores that doesn't fit well into the node sizes, leaving many idle. [uccacxx@login02 ~]$ nodesforjob 1234 Nodes for job 1234: Primary: node-r99a-238: 103.1 % load, 12.9 % memory used, 0.1% swap used Secondaries: node-r99a-206: 1.7 % load, 1.6 % memory used, 0.1% swap used node-r99a-238: 103.1 % load, 12.9 % memory used, 0.1% swap used node-r99a-292: 103.1 % load, 12.9 % memory used, 0.1% swap used node-r99a-651: 1.6 % load, 3.2 % memory used, 0.1% swap used The above example shows a multi-node job, so all the usage belongs to this job itself. It is running on four nodes, and node-r99a-238 is the head node (the one that launched the job) and shows up in both Primary and Secondaries. The load is very unbalanced - it is using two nodes flat out, and two are mostly doing nothing. Memory use is low. Swap use is essentially zero. jobhist \u00a7 Once a job ends, it no longer shows up in qstat . To see information about your finished jobs - when they started, when they ended, what node they ran on - type jobhist . [uccacxx@login02 ~]$ jobhist FSTIME | FETIME | HOSTNAME | OWNER | JOB NUMBER | TASK NUMBER | EXIT STATUS | JOB NAME ----------------------+---------------------+---------------+---------+------------+-------------+-------------+--------------- 2020-06-17 16:31:12 | 2020-06-17 16:34:19 | node-h00a-010 | uccacxx | 3854822 | 0 | 0 | m_job 2020-06-17 16:56:50 | 2020-06-17 16:56:52 | node-d00a-023 | uccacxx | 3854836 | 0 | 1 | k_job 2020-06-17 17:21:12 | 2020-06-17 17:21:46 | node-d00a-012 | uccacxx | 3854859 | 0 | 0 | k_job FSTIME - when the job started running on the node FETIME - when the job ended HOSTNAME - the head node of the job (if it ran on multiple nodes, it only lists the first) TASK NUMBER - if it was an array job, it will have a different number here for each task This shows jobs that finished in the last 24 hours by default. You can search for longer as well: jobhist --hours=200 If a job ended and didn't create the files you expect, check the start and end times to see whether it ran out of wallclock time. If a job only ran for seconds and didn't produce the expected output, there was probably something wrong in your script - check the .o and .e files in the directory you submitted the job from for errors. How do I run interactive jobs? \u00a7 Sometimes you need to run interactive programs, sometimes with a GUI. This can be achieved through qrsh . We have a detailed guide to running interactive jobs . How do I estimate what resources to request in my jobscript? \u00a7 It can be difficult to know where to start when estimating the resources your job will need. One way you can find out what resources your jobs need is to submit one job which requests far more than you think necessary, and gather data on what it actually uses. If you aren't sure what 'far more' entails, request the maximum wallclock time and job size that will fit on one node, and reduce this after you have some idea. Run your program as: /usr/bin/time --verbose myprogram myargs where myprogram myargs is however you normally run your program, with whatever options you pass to it. When your job finishes, you will get output about the resources it used and how long it took - the relevant one for memory is maxrss (maximum resident set size) which roughly tells you the largest amount of memory it used. If your job is not completing successfully or you need to know how the memory usage changes throughout the job, there is a tool called Ruse that can measure this for you. Run your program as: module load ruse/2.0 # sample the current memory usage every 120s and output each step to stdout ruse --stdout --time=120 -s myprogram myargs where myprogram myargs is however you normally run your program, with whatever options you pass to it. Remember that memory requests in your jobscript are always per core, so check the total you are requesting is sensible - if you increase it too much you may end up with a job that cannot be submitted. You can also look at nodesforjob while a job is running to see a snapshot of the memory, swap and load on the nodes your job is running on. How can I see what types of node a cluster has? \u00a7 As well as looking at the cluster-specific page in this documentation for more details (for example Myriad ), you can run nodetypes , which will give you basic information about the nodes that exist in that cluster. [uccacxx@login12 ~]$ nodetypes 3 type * nodes: 36 cores, 188.4G RAM 7 type B nodes: 36 cores, 1.5T RAM 66 type D nodes: 36 cores, 188.4G RAM 9 type E nodes: 36 cores, 188.4G RAM 1 type F nodes: 36 cores, 188.4G RAM 55 type H nodes: 36 cores, 188.4G RAM 3 type I nodes: 36 cores, 1.5T RAM 2 type J nodes: 36 cores, 188.4G RAM This shows how many of each letter-labelled nodetype the cluster has, then the number of cores and amount of memory the node is reporting it has. It also shows the cluster has some utility nodes - those are part of the infrastructure. The * nodes are the login nodes. How do I run a graphical program? \u00a7 To run a graphical program on the cluster and be able to view the user interface on your own local computer, you will need to have an X-Windows Server installed on your local computer and use X-forwarding. X-forwarding on Linux \u00a7 Desktop Linux operating systems already have X-Windows installed, so you just need to ssh in with the correct flags. You need to make sure you use either the -X or -Y (look at man ssh for details) flags on all ssh commands you run to establish a connection to the cluster. For example, connecting from outside of UCL: ssh -X <your_UCL_user_id>@ssh-gateway.ucl.ac.uk and then ssh -X <your_UCL_user_id>@myriad.rc.ucl.ac.uk X-forwarding on Mac OS X \u00a7 You will need to install XQuartz to provide an X-Window System for Mac OS X. (Previously known as X11.app). You can then follow the Linux instructions using Terminal.app. X-forwarding on Windows \u00a7 You will need: An SSH client; e.g., PuTTY An X server program; e.g., Exceed, Xming Exceed is available on Desktop@UCL machines and downloadable from the UCL software database . Xming is open source (and mentioned here without testing). Exceed on Desktop@UCL \u00a7 Load Exceed. You can find it under Start > All Programs > Applications O-P > Open Text Exceed 14 > Exceed Open PuTTY (Applications O-P > PuTTY) In PuTTY, set up the connection with the host machine as usual: Host name: myriad.rc.ucl.ac.uk (for example) Port: 22 Connection type: SSH Then, from the Category menu, select Connection > SSH > X11 for 'Options controlling SSH X11 forwarding'. Make sure the box marked 'Enable X11 forwarding' is checked. Return to the session menu and save these settings with a new identifiable name for reuse in future. Click 'Open' and login to the host as usual To test that X-forwarding is working, try running nedit which is a text editor in our default modules. If nedit works, you have successfully enabled X-forwarding for graphical applications. Installing Xming \u00a7 Xming is a popular open source X server for Windows. These are instructions for using it alongside PuTTY. Other SSH clients and X servers are available. We cannot verify how well it may be working. Install both PuTTY and Xming if you have not done so already. During Xming installation, choose not to install an SSH client. Open Xming - the Xming icon should appear on the task bar. Open PuTTY Set up PuTTY as shown in the Exceed section.","title":"How To"},{"location":"howto/#how-do-i","text":"I have an account, now:","title":"How do I?"},{"location":"howto/#how-do-i-log-in","text":"Logging in is most straightforward if you are inside the UCL firewall. If you are logging in from home or other external networks then you first have to get on to the UCL network .","title":"How do I log in?"},{"location":"howto/#linux-unix-mac-os-x","text":"Use the terminal and type the below command to secure shell (ssh) into the machine you wish to access. Replace <your_UCL_user_id> with your central UCL username, and <system_name> with the name of the machine you want to log in to, eg. myriad , kathleen , aristotle . ssh <your_UCL_user_id>@<system_name>.rc.ucl.ac.uk","title":"Linux / Unix / Mac OS X"},{"location":"howto/#windows","text":"On Windows you need something that will give you a suitable terminal and ssh - usually PuTTY, or on Windows 10 you can use OpenSSH from a command prompt and type the same ssh command as the Linux instructions.","title":"Windows"},{"location":"howto/#using-putty","text":"PuTTY is a common SSH client on Windows and is available on Desktop@UCL. You can find it under: Start > P > PuTTY or type \"putty\" in the toolbar's search box. You will need to create an entry for the host you are connecting to with the settings below. If you want to save your settings, give them an easily-identifiable name in the \"Saved Sessions\" box and press \"Save\". Then you can select it and \"Load\" next time you use PuTTY. You will then be asked to enter your username and password. Only enter your username, not @<system_name>.rc.ucl.ac.uk . The password field will remain entirely blank when you type in to it - it does not show placeholders to indicate you have typed something. The first time you log in to a new server, you'll get a popup telling you that the server's host key is not cached in the registry - this is normal and is because you have never connected to this server before. If you want to, you can check the host fingerprint against our current key fingerprints .","title":"Using PuTTY"},{"location":"howto/#logging-in-from-outside-the-ucl-firewall","text":"You will need to either use the UCL Virtual Private Network or ssh in to UCL's Gateway system ssh-gateway.ucl.ac.uk first. From there you can then ssh in to our systems. ssh <your_UCL_user_id>@ssh-gateway.ucl.ac.uk ssh <your_UCL_user_id>@<system_name>.rc.ucl.ac.uk Advanced: If you find you need to go via the Gateway often, you can set up this jump automatically, see Single-step logins using tunnelling","title":"Logging in from outside the UCL firewall"},{"location":"howto/#china-connect","text":"If you are on China Connect, you will still need to ssh in to a UCL gateway first as described above.","title":"China Connect"},{"location":"howto/#login-problems","text":"If you experience difficulties with your login, please make sure that you are typing your UCL user ID and your password correctly. If you have recently updated your password, it takes some hours to propagate to all UCL systems. If you still cannot get access but can access other UCL services like the SSH Gateway, please contact us on rc-support@ucl.ac.uk. Your account may have expired, or you may have gone over quota. If you cannot access anything, please see UCL MyAccount - you may need to request a password reset from the Service Desk . If you get a host key error message, you will need to delete old host keys - continue reading!","title":"Login problems"},{"location":"howto/#remote-host-identification-has-changed","text":"When you log in via SSH, it keeps a record of the host key for the server you logged in to in your .ssh/known_hosts file in your home directory, on the machine you are logging in from. This helps make sure you are connecting directly to the server you think you are, but can cause warnings to show up if the host key on that machine has genuinely changed (usually because of an update or reinstall). Check the host key warning against our current key fingerprints : The error message looks like this if you are using OpenSSH in a terminal: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is SHA256:7FTryal3mIhWr9CqM3EPPeXsfezNk8Mm8HPCCAGXiIA. Please contact your system administrator. Add correct host key in /Users/uccaxxx/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /Users/uccaxxx/.ssh/known_hosts:11 ECDSA host key for myriad.rc.ucl.ac.uk has changed and you have requested strict checking. Host key verification failed. Killed by signal 1. This tells you that the old key is in line 11 of your known_hosts file. Sometimes it will give you a direct command you can run to remove that specific key: ssh-keygen -R myriad.rc.ucl.ac.uk or you can manually delete line 11 yourself in a text editor. If you are logging in via the Gateway, you will need to remove the old key there too. On the Gateway, nano and vim are available text editors. If you are not already familiar with vim , use nano - it has the command shortcuts shown at the bottom, where ^O means press Ctrl and then the letter o . # to open the file for editing in nano nano ~/.ssh/known_hosts Once you have removed the old host key you will be able to ssh in again. The first time you log in to an unknown server you will get a message like this: The authenticity of host 'myriad.rc.ucl.ac.uk can't be established. ECDSA key fingerprint is SHA256:7FTryal3mIhWr9CqM3EPPeXsfezNk8Mm8HPCCAGXiIA. Are you sure you want to continue connecting (yes/no)? Typing yes will allow you to continue logging in. PuTTY will display a warning and you can choose to continue or not. WinSCP will say Server's host key does not match the one that WinSCP has in cache. and you will have the option to update the key.","title":"Remote host identification has changed"},{"location":"howto/#mac-os-x-connection-failures","text":"If you are on Mac OS X and getting many ssh connection failures and broken pipe messages when trying to log in, try adding an ssh timeout to your ssh command: ssh -o ConnectTimeout=10 <your_UCL_user_id>@myriad.rc.ucl.ac.uk This has particularly been a problem with Mac OS X Big Sur when using the VPN.","title":"Mac OS X connection failures"},{"location":"howto/#how-do-i-transfer-data-onto-the-system","text":"You can transfer data to and from our systems using any program capable of using the Secure Copy (SCP) protocol. This uses the same SSH system as you use to log in to a command line session, but then transfers data over it. This means that if you can use SSH to connect to a system, you can usually use SCP to transfer files to it.","title":"How do I transfer data onto the system?"},{"location":"howto/#copying-files-using-linux-or-mac-os-x","text":"You can use the command-line utilities scp, sftp or rsync to copy your data about. You can also use a graphical client (Transmit, CyberDuck, FileZilla).","title":"Copying files using Linux or Mac OS X"},{"location":"howto/#scp","text":"This will copy a data file from somewhere on your local machine to a specified location on the remote machine (Myriad etc). scp <local_data_file> <remote_user_id>@<remote_hostname>:<remote_path> # Example: copy myfile from your local current directory into Scratch on Myriad scp myfile ccxxxxx@myriad.rc.ucl.ac.uk:~/Scratch/ This will do the reverse, copying from the remote machine to your local machine. (This is still run from your local machine). scp <remote_user_id>@<remote_hostname>:<remote_path><remote_data_file> <local_path> # Example: copy myfile from Myriad into the Backups directory in your local current directory scp ccxxxxx@myriad.rc.ucl.ac.uk:~/Scratch/myfile Backups/","title":"scp"},{"location":"howto/#sftp","text":"You can use sftp to log in to the remote machine, navigate through directories and use put and get to copy files from and to your local machine. lcd and lls are local equivalents of cd and ls so you can navigate through your local directories as you go. sftp <remote_user_id>@<remote_hostname> cd <remote_path> get <remote_file> lcd <local_path> put <local_file> # Example: download a copy of file1 into your local current directory, # change local directory and upload a copy of file2 sftp ccxxxxx@myriad.rc.ucl.ac.uk cd Scratch/files get file1 lcd ../files_to_upload put file2","title":"sftp"},{"location":"howto/#rsync","text":"rsync is used to remotely synchronise directories, so can be used to only copy files which have changed. Have a look at man rsync as there are many options.","title":"rsync"},{"location":"howto/#copying-files-using-windows-and-winscp","text":"WinSCP is a graphical client that you can use for scp or sftp . The login/create new session screen will open if this is the first time you are using WinSCP. You can choose SFTP or SCP as the file protocol. If you have an unstable connection with one, you may wish to try the other. SCP is probably generally better. Fill in the hostname of the machine you wish to connect to, your username and password. Click Save and give your settings a useful name. You'll then be shown your list of Stored sessions, which will have the one you just created. Select the session and click Login.","title":"Copying files using Windows and WinSCP"},{"location":"howto/#mobaxterm","text":"If using MobaXterm, you may need to set a password for the left side file manager panel separately as well as for the main panel, to allow you to drag and drop files and have them transferred to the cluster.","title":"MobaXterm"},{"location":"howto/#transferring-files-from-outside-the-ucl-firewall","text":"As when logging in, when you are outside the UCL firewall you will need a method to connect inside it before you copy files. You can use the UCL Virtual Private Network and scp direct to our systems or you can do some form of SSH tunnelling.","title":"Transferring files from outside the UCL firewall"},{"location":"howto/#single-step-logins-using-tunnelling","text":"","title":"Single-step logins using tunnelling"},{"location":"howto/#linux-unix-mac-os-x_1","text":"","title":"Linux / Unix / Mac OS X"},{"location":"howto/#on-the-command-line","text":"# Log in to Myriad, jumping via the Gateway ssh -o ProxyJump=ssh-gateway.ucl.ac.uk myriad.rc.ucl.ac.uk or # Copy 'my_file' from the machine you are logged in to into your Scratch on Grace scp -o ProxyJump=ssh-gateway.ucl.ac.uk my_file myriad.rc.ucl.ac.uk:~/Scratch/ This tunnels through the Gateway in order to get you to your destination - you'll be asked for your password twice, once for each machine. You can use this to log in or to copy files. You may also need to do this if you are trying to reach one cluster from another and there is a firewall in the way.","title":"On the command line"},{"location":"howto/#using-a-config-file","text":"You can create a config file which does this without you needing to type it every time. Inside your ~/.ssh directory on your local machine, add the below to your config file (or create a file called config if you don't already have one). Generally, it should be of this form where <name> can be anything you want to call this entry. Host <name> User <remote_user_id> HostName <remote_hostname> proxyCommand ssh -W <remote_hostname>:22 <remote_user_id>@ssh-gateway.ucl.ac.uk This causes the commands you type in your client to be forwarded on over a secure channel to the specified remote host. Here are some examples - you can have as many of these as you need in your config file. Host myriad User ccxxxxx HostName myriad.rc.ucl.ac.uk proxyCommand ssh -W myriad.rc.ucl.ac.uk:22 ccxxxxx@ssh-gateway.ucl.ac.uk Host myriad12 User ccxxxxx HostName login12.myriad.ucl.ac.uk proxyCommand ssh -W login12.myriad.ucl.ac.uk:22 ccxxxxx@ssh-gateway.ucl.ac.uk Host aristotle User ccxxxxx HostName aristotle.rc.ucl.ac.uk proxyCommand ssh -W aristotle.rc.ucl.ac.uk:22 ccxxxxx@ssh-gateway.ucl.ac.uk You can now just type ssh myriad or scp file1 aristotle:~ and you will go through the Gateway. You'll be asked for login details twice since you're logging in to two machines, a Gateway server and your endpoint.","title":"Using a config file"},{"location":"howto/#windows-winscp","text":"WinSCP can also set up SSH tunnels. Create a new session as before, and tick the Advanced options box in the bottom left corner. Select Connection > Tunnel from the left pane. Tick the Connect through SSH tunnel box and enter the hostname of the gateway you are tunnelling through, for example ssh-gateway.ucl.ac.uk Fill in your username and password for that host. (Central UCL ones for the Gateway). Select Session from the left pane and fill in the hostname you want to end up on after the tunnel. Fill in your username and password for that host and set the file protocol to SCP. Save your settings with a useful name.","title":"Windows - WinSCP"},{"location":"howto/#creating-a-tunnel-that-other-applications-can-use","text":"Some applications do not read your SSH config file and also cannot set up tunnels themselves, but can use one that you have created separately. FileZilla in particular is something you may want to do this with to transfer your files directly to the clusters from outside UCL using a graphical client.","title":"Creating a tunnel that other applications can use"},{"location":"howto/#ssh-tunnel-creation-using-a-terminal","text":"You can do this in Linux, Mac OS X and the Windows Command Prompt on Windows 10 and later. Set up a tunnel between a port on your local computer (this is using 3333 as it is unlikely to be in use, but you can pick different ones) to Myriad's port 22 (which is the standard port for ssh), going via a UCL gateway. # replace ccxxxxx with your UCL username ssh -L 3333:myriad.rc.ucl.ac.uk:22 ccxxxxx@socrates.ucl.ac.uk You may also want to use the -N option to tell it not to execute any remote commands and -f to put this command into the background if you want to continue to type other commands into the same terminal. The tunnel now exists, and localhost:3333 on your computer connects to Myriad.","title":"SSH tunnel creation using a terminal"},{"location":"howto/#ssh-tunnel-creation-using-putty","text":"On Windows you can also set up a tunnel using PuTTY .","title":"SSH tunnel creation using PuTTY"},{"location":"howto/#connect-to-your-tunnel-with-an-application-like-filezilla","text":"You can then tell your application to connect to localhost:3333 instead of Myriad. If it has separate boxes for hostname and port, put localhost as the hostname and 3333 as the port.","title":"Connect to your tunnel with an application (like FileZilla)"},{"location":"howto/#managing-your-quota","text":"After using lquota to see your total usage, you may wish to find what is using all your space. du is a command that gives you information about your disk usage. Useful options are: du -ch <dir> du -h --max-depth=1 The first will give you a summary of the sizes of directory tree and subtrees inside the directory you specify, using human-readable sizes with a total at the bottom. The second will show you the totals for all top-level directories relative to where you are, plus the grand total. These can help you track down the locations of large amounts of data if you need to reduce your disk usage.","title":"Managing your quota"},{"location":"howto/#how-do-i-connect-to-ucl-group-folders-n-drive-or-other-smb-mounts","text":"You may have data stored in a UCL group folder that you normally mount using smb. You can use smbclient to copy the files across onto Myriad (you do want them to be copied onto Myriad before you run any jobs using them, otherwise the compute node will be sitting there waiting for the copy to complete before it can do anything useful). If the address you are trying to mount looks like smb://ad.ucl.ac.uk/groupfolders then you would do this: smbclient \\\\ad.ucl.ac.uk\\groupfolders This will give you a prompt where you can access that storage in an ftp-like way, where you can use get commands to copy files from there on to Myriad, or put commands to copy data into there from Myriad. You can look at man smbclient on Myriad for the manual.","title":"How do I connect to UCL group folders, N drive or other smb mounts?"},{"location":"howto/#ucl-n-drive","text":"The N drive (Windows filestore, Filestore@UCL) can also be accessed using smb. To find out what smb address to use, look at Adding your home N drive to a Linux machine . Then use smbclient as above to connect to it.","title":"UCL N drive"},{"location":"howto/#how-do-i-connect-out-to-an-ftp-server","text":"You cannot connect in to Myriad using FTP (we only allow SFTP access) but you can connect out to FTP servers run by other people. Load the GNU inetutils module which provides ftp, telnet and tftp clients. module load inetutils/1.9.4 # connect to your desired server ftp servername.ac.uk You can then use put and get commands to put data on the remote FTP server or download it from there to Myriad.","title":"How do I connect out to an FTP server?"},{"location":"howto/#how-do-i-submit-a-job-to-the-scheduler","text":"To submit a job to the scheduler you need to write a jobscript that contains the resources the job is asking for and the actual commands you want to run. This jobscript is then submitted using the qsub command. qsub myjobscript It will be put in to the queue and will begin running on the compute nodes at some point later when it has been allocated resources.","title":"How do I submit a job to the scheduler?"},{"location":"howto/#passing-in-qsub-options-on-the-command-line","text":"The #$ lines in your jobscript are options to qsub. It will take each line which has #$ as the first two characters and use the contents beyond that as an option. You can also pass options directly to the qsub command and this will override the settings in your script. This can be useful if you are scripting your job submissions in more complicated ways. For example, if you want to change the name of the job for this one instance of the job you can submit your script with: qsub -N NewName myscript.sh Or if you want to increase the wall-clock time to 24 hours: qsub -l h_rt=24:0:0 myscript.sh You can submit jobs with dependencies by using the -hold_jid option. For example, the command below submits a job that won't run until job 12345 has finished: qsub -hold_jid 12345 myscript.sh You may specify node type with the -ac allow= flags as below: qsub -ac allow=XYZ myscript.sh That would restrict the job to running on nodes of type X, Y or Z (the older Legion nodes). Note that for debugging purposes, it helps us if you have these options inside your jobscript rather than passed in on the command line whenever possible. We (and you) can see the exact jobscript that was submitted for every job that ran but not what command line options you submitted it with.","title":"Passing in qsub options on the command line"},{"location":"howto/#checking-your-previous-jobscripts","text":"If you want to check what you submitted for a specific job ID, you can do it with the scriptfor utility. scriptfor 12345 As mentioned above, this will not show any command line options you passed in.","title":"Checking your previous jobscripts"},{"location":"howto/#how-do-i-monitor-a-job","text":"","title":"How do I monitor a job?"},{"location":"howto/#qstat","text":"The qstat command shows the status of your jobs. By default, if you run it with no options, it shows only your jobs (and no-one else\u2019s). This makes it easier to keep track of your jobs. The output will look something like this: job-ID prior name user state submit/start at queue slots ja-task-ID ----------------------------------------------------------------------------------------------------------------- 123454 2.00685 DI_m3 ccxxxxx Eqw 10/13/2017 15:29:11 12 123456 2.00685 DI_m3 ccxxxxx r 10/13/2017 15:29:11 Yorick@node-x02e-006 24 123457 2.00398 DI_m2 ucappka qw 10/12/2017 14:42:12 1 This shows you the job ID, the numeric priority the scheduler has assigned to the job, the name you have given the job, your username, the state the job is in, the date and time it was submitted at (or started at, if it has begun), the head node of the job, the number of 'slots' it is taking up, and if it is an array job the last column shows the task ID. The queue name ( Yorick here) is generally not useful. The head node name ( node-x02e-006 ) is useful - the node-x part tells you this is an X-type node. If you want to get more information on a particular job, note its job ID and then use the -f and -j flags to get full output about that job. Most of this information is not very useful. qstat -f -j 12345","title":"qstat"},{"location":"howto/#job-states","text":"qw : queueing, waiting r : running Rq : a pre-job check on a node failed and this job was put back in the queue Rr : this job was rescheduled but is now running on a new node Eqw : there was an error in this jobscript. This will not run. t : this job is being transferred dr : this job is being deleted Many jobs cycling between Rq and Rr generally means there is a dodgy compute node which is failing pre-job checks, but is free so everything tries to run there. In this case, let us know and we will investigate. If a job stays in t or dr state for a long time, the node it was on is likely to be unresponsive - again let us know and we'll investigate. A job in Eqw will remain in that state until you delete it - you should first have a look at what the error was with qexplain .","title":"Job states"},{"location":"howto/#qexplain","text":"This is a utility to show you the non-truncated error reported by your job. qstat -j will show you a truncated version near the bottom of the output. qexplain 123454","title":"qexplain"},{"location":"howto/#qdel","text":"You use qdel to delete a job from the queue. qdel 123454 You can delete all your jobs at once: qdel '*'","title":"qdel"},{"location":"howto/#more-scheduler-commands","text":"Have a look at man qstat and note the commands shown in the SEE ALSO section of the manual page. Exit the manual page and then look at the man pages for those. (You will not be able to run all commands).","title":"More scheduler commands"},{"location":"howto/#nodesforjob","text":"This is a utility that shows you the current percentage load, memory used and swap used on the nodes your job is running on. If your job is sharing the node with other people's jobs, it will show you the total resources in use, not just those used by your job. This is a snapshot of the current time and resource usage may change over the course of your job. Bear in mind that memory use in particular can increase over time as your job runs. If a cluster has hyperthreading enabled and you aren't using it, full load will show as 50% and not 100% - this is normal and not a problem. For a parallel job, very low (or zero) usage of any of the nodes suggests your job is either not capable of running over multiple nodes, or not partitioning its work effectively - you may be asking for more cores than it can use, or asking for a number of cores that doesn't fit well into the node sizes, leaving many idle. [uccacxx@login02 ~]$ nodesforjob 1234 Nodes for job 1234: Primary: node-r99a-238: 103.1 % load, 12.9 % memory used, 0.1% swap used Secondaries: node-r99a-206: 1.7 % load, 1.6 % memory used, 0.1% swap used node-r99a-238: 103.1 % load, 12.9 % memory used, 0.1% swap used node-r99a-292: 103.1 % load, 12.9 % memory used, 0.1% swap used node-r99a-651: 1.6 % load, 3.2 % memory used, 0.1% swap used The above example shows a multi-node job, so all the usage belongs to this job itself. It is running on four nodes, and node-r99a-238 is the head node (the one that launched the job) and shows up in both Primary and Secondaries. The load is very unbalanced - it is using two nodes flat out, and two are mostly doing nothing. Memory use is low. Swap use is essentially zero.","title":"nodesforjob"},{"location":"howto/#jobhist","text":"Once a job ends, it no longer shows up in qstat . To see information about your finished jobs - when they started, when they ended, what node they ran on - type jobhist . [uccacxx@login02 ~]$ jobhist FSTIME | FETIME | HOSTNAME | OWNER | JOB NUMBER | TASK NUMBER | EXIT STATUS | JOB NAME ----------------------+---------------------+---------------+---------+------------+-------------+-------------+--------------- 2020-06-17 16:31:12 | 2020-06-17 16:34:19 | node-h00a-010 | uccacxx | 3854822 | 0 | 0 | m_job 2020-06-17 16:56:50 | 2020-06-17 16:56:52 | node-d00a-023 | uccacxx | 3854836 | 0 | 1 | k_job 2020-06-17 17:21:12 | 2020-06-17 17:21:46 | node-d00a-012 | uccacxx | 3854859 | 0 | 0 | k_job FSTIME - when the job started running on the node FETIME - when the job ended HOSTNAME - the head node of the job (if it ran on multiple nodes, it only lists the first) TASK NUMBER - if it was an array job, it will have a different number here for each task This shows jobs that finished in the last 24 hours by default. You can search for longer as well: jobhist --hours=200 If a job ended and didn't create the files you expect, check the start and end times to see whether it ran out of wallclock time. If a job only ran for seconds and didn't produce the expected output, there was probably something wrong in your script - check the .o and .e files in the directory you submitted the job from for errors.","title":"jobhist"},{"location":"howto/#how-do-i-run-interactive-jobs","text":"Sometimes you need to run interactive programs, sometimes with a GUI. This can be achieved through qrsh . We have a detailed guide to running interactive jobs .","title":"How do I run interactive jobs?"},{"location":"howto/#how-do-i-estimate-what-resources-to-request-in-my-jobscript","text":"It can be difficult to know where to start when estimating the resources your job will need. One way you can find out what resources your jobs need is to submit one job which requests far more than you think necessary, and gather data on what it actually uses. If you aren't sure what 'far more' entails, request the maximum wallclock time and job size that will fit on one node, and reduce this after you have some idea. Run your program as: /usr/bin/time --verbose myprogram myargs where myprogram myargs is however you normally run your program, with whatever options you pass to it. When your job finishes, you will get output about the resources it used and how long it took - the relevant one for memory is maxrss (maximum resident set size) which roughly tells you the largest amount of memory it used. If your job is not completing successfully or you need to know how the memory usage changes throughout the job, there is a tool called Ruse that can measure this for you. Run your program as: module load ruse/2.0 # sample the current memory usage every 120s and output each step to stdout ruse --stdout --time=120 -s myprogram myargs where myprogram myargs is however you normally run your program, with whatever options you pass to it. Remember that memory requests in your jobscript are always per core, so check the total you are requesting is sensible - if you increase it too much you may end up with a job that cannot be submitted. You can also look at nodesforjob while a job is running to see a snapshot of the memory, swap and load on the nodes your job is running on.","title":"How do I estimate what resources to request in my jobscript?"},{"location":"howto/#how-can-i-see-what-types-of-node-a-cluster-has","text":"As well as looking at the cluster-specific page in this documentation for more details (for example Myriad ), you can run nodetypes , which will give you basic information about the nodes that exist in that cluster. [uccacxx@login12 ~]$ nodetypes 3 type * nodes: 36 cores, 188.4G RAM 7 type B nodes: 36 cores, 1.5T RAM 66 type D nodes: 36 cores, 188.4G RAM 9 type E nodes: 36 cores, 188.4G RAM 1 type F nodes: 36 cores, 188.4G RAM 55 type H nodes: 36 cores, 188.4G RAM 3 type I nodes: 36 cores, 1.5T RAM 2 type J nodes: 36 cores, 188.4G RAM This shows how many of each letter-labelled nodetype the cluster has, then the number of cores and amount of memory the node is reporting it has. It also shows the cluster has some utility nodes - those are part of the infrastructure. The * nodes are the login nodes.","title":"How can I see what types of node a cluster has?"},{"location":"howto/#how-do-i-run-a-graphical-program","text":"To run a graphical program on the cluster and be able to view the user interface on your own local computer, you will need to have an X-Windows Server installed on your local computer and use X-forwarding.","title":"How do I run a graphical program?"},{"location":"howto/#x-forwarding-on-linux","text":"Desktop Linux operating systems already have X-Windows installed, so you just need to ssh in with the correct flags. You need to make sure you use either the -X or -Y (look at man ssh for details) flags on all ssh commands you run to establish a connection to the cluster. For example, connecting from outside of UCL: ssh -X <your_UCL_user_id>@ssh-gateway.ucl.ac.uk and then ssh -X <your_UCL_user_id>@myriad.rc.ucl.ac.uk","title":"X-forwarding on Linux"},{"location":"howto/#x-forwarding-on-mac-os-x","text":"You will need to install XQuartz to provide an X-Window System for Mac OS X. (Previously known as X11.app). You can then follow the Linux instructions using Terminal.app.","title":"X-forwarding on Mac OS X"},{"location":"howto/#x-forwarding-on-windows","text":"You will need: An SSH client; e.g., PuTTY An X server program; e.g., Exceed, Xming Exceed is available on Desktop@UCL machines and downloadable from the UCL software database . Xming is open source (and mentioned here without testing).","title":"X-forwarding on Windows"},{"location":"howto/#exceed-on-desktopucl","text":"Load Exceed. You can find it under Start > All Programs > Applications O-P > Open Text Exceed 14 > Exceed Open PuTTY (Applications O-P > PuTTY) In PuTTY, set up the connection with the host machine as usual: Host name: myriad.rc.ucl.ac.uk (for example) Port: 22 Connection type: SSH Then, from the Category menu, select Connection > SSH > X11 for 'Options controlling SSH X11 forwarding'. Make sure the box marked 'Enable X11 forwarding' is checked. Return to the session menu and save these settings with a new identifiable name for reuse in future. Click 'Open' and login to the host as usual To test that X-forwarding is working, try running nedit which is a text editor in our default modules. If nedit works, you have successfully enabled X-forwarding for graphical applications.","title":"Exceed on Desktop@UCL"},{"location":"howto/#installing-xming","text":"Xming is a popular open source X server for Windows. These are instructions for using it alongside PuTTY. Other SSH clients and X servers are available. We cannot verify how well it may be working. Install both PuTTY and Xming if you have not done so already. During Xming installation, choose not to install an SSH client. Open Xming - the Xming icon should appear on the task bar. Open PuTTY Set up PuTTY as shown in the Exceed section.","title":"Installing Xming"},{"location":"Background/Cluster_Computing/","text":"Cluster Computing \u00a7 What is a cluster? \u00a7 In this context, a cluster is a collection of computers (often referred to as \"nodes\"). They're networked together with some shared storage and a scheduling system that lets people run programs on them without having to enter commands \"live\". Why would I want to use one? \u00a7 Some researchers have programs that require a lot of compute power, like simulating weather patterns or the quantum behaviour of molecules. Others have a lot of data to process, or need to simulate a lot of things at once, like simulating the spread of disease or assembling parts of DNA into a genome. Often these kinds of work are either impossible or would take far too long to do on a desktop or laptop computer, as well as making the computer unavailable to do everyday tasks like writing documents or reading papers. By running the programs on the computers in a cluster, researchers can use many powerful computers at once, without locking up their own one. How do I use it? \u00a7 Most people use something like the following workflow: connect to the cluster's \"login nodes\" create a script of commands to run programs submit the script to the scheduler wait for the scheduler to find available \"compute nodes\" and run the script look at the results in the files the script created Most people connect using a program called a Secure Shell Client (\"ssh client\" for short), but some programs, like Matlab and Comsol, run on your own computer and can be set up to send work to the cluster automatically. That can be a little tricky to get working, though. The ssh client gives you a command prompt when you can enter text commands, but you can also tell it to pass graphical windows through the network connection, using a system called X-Forwarding. This can be useful for visualising your data without transferring all the files back, but the network connection makes it a bit slower to use than running it on your own computer. You'll need an X server on your own computer to use this: check our page on X-Forwarding for details.","title":"Cluster Computing"},{"location":"Background/Cluster_Computing/#cluster-computing","text":"","title":"Cluster Computing"},{"location":"Background/Cluster_Computing/#what-is-a-cluster","text":"In this context, a cluster is a collection of computers (often referred to as \"nodes\"). They're networked together with some shared storage and a scheduling system that lets people run programs on them without having to enter commands \"live\".","title":"What is a cluster?"},{"location":"Background/Cluster_Computing/#why-would-i-want-to-use-one","text":"Some researchers have programs that require a lot of compute power, like simulating weather patterns or the quantum behaviour of molecules. Others have a lot of data to process, or need to simulate a lot of things at once, like simulating the spread of disease or assembling parts of DNA into a genome. Often these kinds of work are either impossible or would take far too long to do on a desktop or laptop computer, as well as making the computer unavailable to do everyday tasks like writing documents or reading papers. By running the programs on the computers in a cluster, researchers can use many powerful computers at once, without locking up their own one.","title":"Why would I want to use one?"},{"location":"Background/Cluster_Computing/#how-do-i-use-it","text":"Most people use something like the following workflow: connect to the cluster's \"login nodes\" create a script of commands to run programs submit the script to the scheduler wait for the scheduler to find available \"compute nodes\" and run the script look at the results in the files the script created Most people connect using a program called a Secure Shell Client (\"ssh client\" for short), but some programs, like Matlab and Comsol, run on your own computer and can be set up to send work to the cluster automatically. That can be a little tricky to get working, though. The ssh client gives you a command prompt when you can enter text commands, but you can also tell it to pass graphical windows through the network connection, using a system called X-Forwarding. This can be useful for visualising your data without transferring all the files back, but the network connection makes it a bit slower to use than running it on your own computer. You'll need an X server on your own computer to use this: check our page on X-Forwarding for details.","title":"How do I use it?"},{"location":"Clusters/Acknowledging_RC_Systems/","text":"Acknowledging the Use of RC Systems \u00a7 To keep running our services, we depend on being able to demonstrate that they are used in published research. When preparing papers describing work that has used any of our clusters or services, please use the terms below, especially the \" service @UCL\" label, so that we can easily search for them. Kathleen \u00a7 \"The authors acknowledge the use of the UCL Kathleen High Performance Computing Facility (Kathleen@UCL), and associated support services, in the completion of this work.\" Myriad \u00a7 \"The authors acknowledge the use of the UCL Myriad High Performance Computing Facility (Myriad@UCL), and associated support services, in the completion of this work.\" Aristotle \u00a7 \"The authors acknowledge the use of the UCL Aristotle Computing Facility (Aristotle@UCL), and associated support services, in the completion of this work.\" MMM Hub Young \u00a7 Please find the appropriate wording at Acknowledging the use of Young in publications . MMM Hub Thomas \u00a7 Please find the appropriate wording at Acknowledging the use of Thomas in publications .","title":"Acknowledging the Use of RC Systems"},{"location":"Clusters/Acknowledging_RC_Systems/#acknowledging-the-use-of-rc-systems","text":"To keep running our services, we depend on being able to demonstrate that they are used in published research. When preparing papers describing work that has used any of our clusters or services, please use the terms below, especially the \" service @UCL\" label, so that we can easily search for them.","title":"Acknowledging the Use of RC Systems"},{"location":"Clusters/Acknowledging_RC_Systems/#kathleen","text":"\"The authors acknowledge the use of the UCL Kathleen High Performance Computing Facility (Kathleen@UCL), and associated support services, in the completion of this work.\"","title":"Kathleen"},{"location":"Clusters/Acknowledging_RC_Systems/#myriad","text":"\"The authors acknowledge the use of the UCL Myriad High Performance Computing Facility (Myriad@UCL), and associated support services, in the completion of this work.\"","title":"Myriad"},{"location":"Clusters/Acknowledging_RC_Systems/#aristotle","text":"\"The authors acknowledge the use of the UCL Aristotle Computing Facility (Aristotle@UCL), and associated support services, in the completion of this work.\"","title":"Aristotle"},{"location":"Clusters/Acknowledging_RC_Systems/#mmm-hub-young","text":"Please find the appropriate wording at Acknowledging the use of Young in publications .","title":"MMM Hub Young"},{"location":"Clusters/Acknowledging_RC_Systems/#mmm-hub-thomas","text":"Please find the appropriate wording at Acknowledging the use of Thomas in publications .","title":"MMM Hub Thomas"},{"location":"Clusters/Kathleen/","text":"Kathleen \u00a7 Kathleen is a compute cluster designed for extensively parallel, multi-node batch-processing jobs, having high-bandwidth connections between each individual node. It is named after Professor Dame Kathleen Lonsdale , a pioneering chemist and activist, and was installed in December 2019. It went into service at the end of January 2020. Accounts \u00a7 Kathleen accounts can be applied for via the Research Computing sign up process . As Kathleen is intended for multi-node jobs, users who specify that they will need to use multi-node jobs (e.g. with MPI ) will be given access to Kathleen. Logging in \u00a7 Please use your UCL username and password to connect to Kathleen with an SSH client. ssh uccaxxx@kathleen.rc.ucl.ac.uk If using PuTTY, put kathleen.rc.ucl.ac.uk as the hostname and your seven-character username (with no @ after) as the username when logging in, eg. uccaxxx . When entering your password in PuTTY no characters or bulletpoints will show on screen - this is normal. If you are outside the UCL firewall you will need to follow the instructions for Logging in from outside the UCL firewall . Logging in to a specific node \u00a7 You can access a specific Kathleen login node by using their dedicated addresses instead of the main kathleen.rc.ucl.ac.uk address, for example: ssh uccaxxx@login01.kathleen.rc.ucl.ac.uk The main address will unpredictably direct you to either one of these (to balance load), so if you need multiple sessions on one, this lets you do that. Copying data onto Kathleen \u00a7 You will need to use an SCP or SFTP client to copy data onto Kathleen. Please refer to the page on How do I transfer data onto the system? You can connect directly in both directions between Grace and Kathleen. If you find you cannot connect directly from one cluster to another, this is generally because of firewalls in between and so you need to use tunnelling with the scp command . Quotas \u00a7 On Kathleen you have a single 250GB quota by default which covers your home and Scratch. This is a hard quota: once you reach it, you will no longer be able to write more data. Keep an eye on it, as this will cause jobs to fail if they cannot create their .o or .e files at the start, or their output files partway through. You can check your quota on Kathleen by running: lquota which will give you output similar to this: Storage Used Quota % Used Path lustre 146.19 MiB 250.00 GiB 0% /home/uccaxxx You can apply for quota increases using the form at Additional Resource Requests . Here are some tips for managing your quota and finding where space is being used. Job sizes and durations \u00a7 Please consider that Kathleen nodes have 40 physical cores - 2 nodes is 80 cores. Jobs do not share nodes, so although asking for 41 cores is possible, it means you are wasting the other 39 cores on your second node! For interactive and batch jobs: Cores Max. Duration 41-240 48h 241-480 24h 481-5760 12h These are numbers of physical cores. If you have a workload that requires longer jobs than this, you may be able to apply to our governance group for access to a longer queue. Applications will be expected to demonstrate that their work cannot be run using techniques like checkpointing that would allow their workload to be broken up into smaller parts. Please see the section on Additional Resource Requests for more details. Node types \u00a7 Kathleen's compute capability comprises 192 diskless compute nodes each with two 20-core Intel Xeon Gold 6248 2.5GHz processors, 192 gigabytes of 2933MHz DDR4 RAM, and an Intel OmniPath network. Two nodes identical to these, but with two 1 terabyte hard-disk drives added, serve as the login nodes. Hyperthreading \u00a7 Kathleen has hyperthreading enabled and you can choose on a per-job basis whether you want to use it. Hyperthreading lets you use two virtual cores instead of one physical core - some programs can take advantage of this. If you do not ask for hyperthreading, your job only uses one thread per core as normal. The -l threads= request is not a true/false setting, instead you are telling the scheduler you want one slot to block one virtual cpu instead of the normal situation where it blocks two. If you have a script with a threads request and want to override it on the command line or set it back to normal, the usual case is -l threads=2 . (Setting threads to 0 does not disable hyperthreading!) # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process export OMP_NUM_THREADS=2 This job would be using 80 physical cores, using 80 MPI processes each of which would create two threads (on Hyperthreads). Note that memory requests are now per virtual core with hyperthreading enabled. If you asked for #$ -l mem=4G on a node with 80 virtual cores and 192G RAM then you are requiring 320G RAM in total which will not fit on that node and so you would be given a sparse process layout across more nodes to meet this requirement. # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process # (a whole node's worth) export OMP_NUM_THREADS=80 This job would still be using 80 physical cores, but would use one MPI process per node which would create 80 threads on the node (on Hyperthreads). Diskless nodes \u00a7 Kathleen nodes are diskless (have no local hard drives) - there is no $TMPDIR available on Kathleen, so you should not request -l tmpfs=10G in your jobscripts or your job will be rejected at submit time. If you need temporary space, you should use somewhere in your Scratch. Loading and unloading modules \u00a7 Kathleen has a newer version of modulecmd which tries to manage module dependencies automatically by loading or unloading prerequisites for you whenever possible. If you get an error like this: [uccaxxx@login01.kathleen ~]$ module unload compilers mpi Unloading compilers/intel/2018/update3 ERROR: compilers/intel/2018/update3 cannot be unloaded due to a prereq. HINT: Might try \"module unload default-modules/2018\" first. Unloading mpi/intel/2018/update3/intel ERROR: mpi/intel/2018/update3/intel cannot be unloaded due to a prereq. HINT: Might try \"module unload default-modules/2018\" first. You can use the -f option to force the module change. It will carry it out and warn you about modules it thinks are dependent. [uccaxxx@login01.kathleen ~]$ module unload -f compilers mpi Unloading compilers/intel/2018/update3 WARNING: Dependent default-modules/2018 is loaded Unloading mpi/intel/2018/update3/intel WARNING: Dependent default-modules/2018 is loaded Otherwise you will need to unload default-modules/2018 to swap compiler and MPI module, but that will leave you without gerun in your path. You can then do either of these things: # load everything that was in default-modules except the compiler and mpi module unload default-modules/2018 module load rcps-core/1.0.0 module load whatever or # just reload gerun module unload default-modules/2018 module load gerun module load whatever","title":"Kathleen"},{"location":"Clusters/Kathleen/#kathleen","text":"Kathleen is a compute cluster designed for extensively parallel, multi-node batch-processing jobs, having high-bandwidth connections between each individual node. It is named after Professor Dame Kathleen Lonsdale , a pioneering chemist and activist, and was installed in December 2019. It went into service at the end of January 2020.","title":"Kathleen"},{"location":"Clusters/Kathleen/#accounts","text":"Kathleen accounts can be applied for via the Research Computing sign up process . As Kathleen is intended for multi-node jobs, users who specify that they will need to use multi-node jobs (e.g. with MPI ) will be given access to Kathleen.","title":"Accounts"},{"location":"Clusters/Kathleen/#logging-in","text":"Please use your UCL username and password to connect to Kathleen with an SSH client. ssh uccaxxx@kathleen.rc.ucl.ac.uk If using PuTTY, put kathleen.rc.ucl.ac.uk as the hostname and your seven-character username (with no @ after) as the username when logging in, eg. uccaxxx . When entering your password in PuTTY no characters or bulletpoints will show on screen - this is normal. If you are outside the UCL firewall you will need to follow the instructions for Logging in from outside the UCL firewall .","title":"Logging in"},{"location":"Clusters/Kathleen/#logging-in-to-a-specific-node","text":"You can access a specific Kathleen login node by using their dedicated addresses instead of the main kathleen.rc.ucl.ac.uk address, for example: ssh uccaxxx@login01.kathleen.rc.ucl.ac.uk The main address will unpredictably direct you to either one of these (to balance load), so if you need multiple sessions on one, this lets you do that.","title":"Logging in to a specific node"},{"location":"Clusters/Kathleen/#copying-data-onto-kathleen","text":"You will need to use an SCP or SFTP client to copy data onto Kathleen. Please refer to the page on How do I transfer data onto the system? You can connect directly in both directions between Grace and Kathleen. If you find you cannot connect directly from one cluster to another, this is generally because of firewalls in between and so you need to use tunnelling with the scp command .","title":"Copying data onto Kathleen"},{"location":"Clusters/Kathleen/#quotas","text":"On Kathleen you have a single 250GB quota by default which covers your home and Scratch. This is a hard quota: once you reach it, you will no longer be able to write more data. Keep an eye on it, as this will cause jobs to fail if they cannot create their .o or .e files at the start, or their output files partway through. You can check your quota on Kathleen by running: lquota which will give you output similar to this: Storage Used Quota % Used Path lustre 146.19 MiB 250.00 GiB 0% /home/uccaxxx You can apply for quota increases using the form at Additional Resource Requests . Here are some tips for managing your quota and finding where space is being used.","title":"Quotas"},{"location":"Clusters/Kathleen/#job-sizes-and-durations","text":"Please consider that Kathleen nodes have 40 physical cores - 2 nodes is 80 cores. Jobs do not share nodes, so although asking for 41 cores is possible, it means you are wasting the other 39 cores on your second node! For interactive and batch jobs: Cores Max. Duration 41-240 48h 241-480 24h 481-5760 12h These are numbers of physical cores. If you have a workload that requires longer jobs than this, you may be able to apply to our governance group for access to a longer queue. Applications will be expected to demonstrate that their work cannot be run using techniques like checkpointing that would allow their workload to be broken up into smaller parts. Please see the section on Additional Resource Requests for more details.","title":"Job sizes and durations"},{"location":"Clusters/Kathleen/#node-types","text":"Kathleen's compute capability comprises 192 diskless compute nodes each with two 20-core Intel Xeon Gold 6248 2.5GHz processors, 192 gigabytes of 2933MHz DDR4 RAM, and an Intel OmniPath network. Two nodes identical to these, but with two 1 terabyte hard-disk drives added, serve as the login nodes.","title":"Node types"},{"location":"Clusters/Kathleen/#hyperthreading","text":"Kathleen has hyperthreading enabled and you can choose on a per-job basis whether you want to use it. Hyperthreading lets you use two virtual cores instead of one physical core - some programs can take advantage of this. If you do not ask for hyperthreading, your job only uses one thread per core as normal. The -l threads= request is not a true/false setting, instead you are telling the scheduler you want one slot to block one virtual cpu instead of the normal situation where it blocks two. If you have a script with a threads request and want to override it on the command line or set it back to normal, the usual case is -l threads=2 . (Setting threads to 0 does not disable hyperthreading!) # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process export OMP_NUM_THREADS=2 This job would be using 80 physical cores, using 80 MPI processes each of which would create two threads (on Hyperthreads). Note that memory requests are now per virtual core with hyperthreading enabled. If you asked for #$ -l mem=4G on a node with 80 virtual cores and 192G RAM then you are requiring 320G RAM in total which will not fit on that node and so you would be given a sparse process layout across more nodes to meet this requirement. # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process # (a whole node's worth) export OMP_NUM_THREADS=80 This job would still be using 80 physical cores, but would use one MPI process per node which would create 80 threads on the node (on Hyperthreads).","title":"Hyperthreading"},{"location":"Clusters/Kathleen/#diskless-nodes","text":"Kathleen nodes are diskless (have no local hard drives) - there is no $TMPDIR available on Kathleen, so you should not request -l tmpfs=10G in your jobscripts or your job will be rejected at submit time. If you need temporary space, you should use somewhere in your Scratch.","title":"Diskless nodes"},{"location":"Clusters/Kathleen/#loading-and-unloading-modules","text":"Kathleen has a newer version of modulecmd which tries to manage module dependencies automatically by loading or unloading prerequisites for you whenever possible. If you get an error like this: [uccaxxx@login01.kathleen ~]$ module unload compilers mpi Unloading compilers/intel/2018/update3 ERROR: compilers/intel/2018/update3 cannot be unloaded due to a prereq. HINT: Might try \"module unload default-modules/2018\" first. Unloading mpi/intel/2018/update3/intel ERROR: mpi/intel/2018/update3/intel cannot be unloaded due to a prereq. HINT: Might try \"module unload default-modules/2018\" first. You can use the -f option to force the module change. It will carry it out and warn you about modules it thinks are dependent. [uccaxxx@login01.kathleen ~]$ module unload -f compilers mpi Unloading compilers/intel/2018/update3 WARNING: Dependent default-modules/2018 is loaded Unloading mpi/intel/2018/update3/intel WARNING: Dependent default-modules/2018 is loaded Otherwise you will need to unload default-modules/2018 to swap compiler and MPI module, but that will leave you without gerun in your path. You can then do either of these things: # load everything that was in default-modules except the compiler and mpi module unload default-modules/2018 module load rcps-core/1.0.0 module load whatever or # just reload gerun module unload default-modules/2018 module load gerun module load whatever","title":"Loading and unloading modules"},{"location":"Clusters/Michael/","text":"Michael \u00a7 Michael is an extension to the UCL-hosted Hub for Materials and Molecular Modelling, an EPSRC-funded Tier 2 system providing large scale computation to UK researchers; and delivers computational capability for the Faraday Institution, a national institute for electrochemical energy storage science and technology. Applying for an account \u00a7 Michael accounts belong to you as an individual and are applied for via David Scanlon who is the point of contact for Michael. You will need to supply an SSH public key, which is the only method used to log in. Creating an ssh key pair \u00a7 An ssh key consists of a public and a private part, typically named id_rsa and id_rsa.pub by default. The public part is what we need. You must not share your private key with anyone else. You can copy it onto multiple machines belonging to you so you can log in from all of them (or you can have a separate pair for each machine). Creating an ssh key in Linux/Unix/Mac OS X \u00a7 ssh-keygen -t rsa The defaults should give you a reasonable key. If you prefer to use ed25519 instead, and/or longer keys, you can. You can also tell it to create one with a different name, so it doesn't overwrite any existing key. Do not use DSA as OpenSSH 7.0 has deprecated it and does not use it by default on client or server. We no longer accept DSA keys. You will be asked to add a passphrase for your key. A blank passphrase is not recommended; if you use one please make sure that no one else ever has access to your local computer account. How often you are asked for a passphrase depends on how long your local ssh agent keeps it. You may need to run ssh-add to add the key to your agent so you can use it. If you aren't sure what keys your agent can see, running ssh-add -L will show all the public parts of the keys it is aware of. Creating an ssh key in Windows \u00a7 Have a look at Key-Based SSH Logins With PuTTY which has step-by-step instructions. You can choose whether to use Pageant or not to manage your key. You can again pick RSA, ED25519, ECDSA etc but do not pick SSH-1 as that is a very old and insecure key type. As above, DSA is no longer accepted. The key must be at least 2048-bit. If you are using Windows 10, then you probably have OpenSSH installed and could instead run ssh-keygen in a terminal per the Linux instructions and use the ssh command to log in instead of PuTTY. Information for Points of Contact \u00a7 Points of Contact have some tools they can use to manage users and allocations, documented at MMM Points of Contact . Logging in \u00a7 You will be assigned a personal username and your SSH key pair will be used to log in. External users will have a username in the form mmmxxxx (where xxxx is a number) and UCL users will use their central username. You connect with ssh directly to: michael.rc.ucl.ac.uk SSH timeouts \u00a7 Idle ssh sessions will be disconnected after 7 days. Using the system \u00a7 Michael is a batch system. The login nodes allow you to manage your files, compile code and submit jobs. Very short (\\<15mins) and non-resource-intensive software tests can be run on the login nodes, but anything more should be submitted as a job. Full user guide \u00a7 Michael has the same user environment as RC Support's other clusters, so the User guide is relevant and is a good starting point for further information about how the environment works. Any variations that Michael has should be listed on this page. Submitting a job \u00a7 Create a job script for non-interactive use and submit your jobscript using qsub . Jobscripts must begin #!/bin/bash -l in order to run as a login shell and get your login environment and modules. A job on Michael must also specify what type of job it is (Gold, Free, Test) and the project it is being submitted for. (See Budgets and allocations below). Memory requests \u00a7 Note: the memory you request is always per core, not the total amount. If you ask for 128G RAM and 24 cores, that will run on 24 nodes using only one core per node. This allows you to have sparse process placement when you do actually need that much RAM per process. Monitoring a job \u00a7 In addition to qstat , nodesforjob $JOB_ID can be useful to see what proportion of cpu/memory/swap is being used on the nodes a certain job is running on. qexplain $JOB_ID will show you the full error for a job that is in Eqw status. Useful utilities \u00a7 As well as nodesforjob , there are the following utilities which can help you find information about your jobs after they have run. jobhist - shows your job history for the last 24hrs by default, including start and end times and the head node it ran on. You can view a longer history by specifying --hours=100 for example. scriptfor $JOB_ID - show the script that was submitted for the given job. These utilities live in GitHub at https://github.com/UCL-RITS/go-clustertools and https://github.com/UCL-RITS/rcps-cluster-scripts Software \u00a7 Michael mounts the RC Systems software stack . Have a look at Software Guides for specific information on running some applications, including example scripts. The list there is not exhaustive. Access to software is managed through the use of modules. module avail shows all modules available. module list shows modules currently loaded. Access to licensed software may vary based on your host institution and project. Requesting software installs \u00a7 To request software installs, email us at the support address below or open an issue on our GitHub . You can see what software has already been requested in the Github issues and can add a comment if you're also interested in something already requested. Installing your own software \u00a7 You may install software in your own space. Please look at Compiling for tips. Maintaining a piece of software for a group \u00a7 It is possible for people to be given central areas to install software that they wish to make available to everyone or to a select group - generally because they are the developers or if they wish to use multiple versions or developer versions. The people given install access would then be responsible for managing and maintaining these installs. Licensed software \u00a7 Reserved application groups exist for software that requires them. The group name will begin with leg or lg . After we add you to one of these groups, the central group change will happen overnight. You can check your groups with the groups command. Please let us know your username when you ask to be added to a group. CASTEP : You/your group leader need to have signed up for a CASTEP license . Send us an acceptance email, or we can ask them to verify you have a license. You will then be added to the reserved application group lgcastep . If you are a member of UKCP you are already covered by a license and just need to tell us when you request access. CRYSTAL : You/your group leader need to have signed up for an Academic license. Crystal Solutions will send an email saying an account has been upgraded to \"Academic UK\" - forward that to us along with confirmation from the group leader that you should be in their group. You will be added to the legcryst group. DL_POLY : has individual licenses for specific versions. Sign up at DL_POLY's website and send us the acceptance email they give you. We will add you to the appropriate version's reserved application group, eg lgdlp408 . Gaussian : not currently accessible for non-UCL institutions. UCL having a site license and another institute having a site license does not allow users from the other institute to run Gaussian on UCL-owned hardware. VASP : When you request access you need to send us the email address you are named on a VASP license using. You can also send name and email of the main VASP license holder along with the license number if you wish. We will then check in the VASP portal if we can add you. We will add you to the legvasp5 or legvasp6 reserved application groups depending on which versions you are licensed for. You may also install your own copy in your home, and we provide a simple build script on Github (tested with VASP 5.4.4, no patches). You need to download the VASP source code and then you can run the script following the instructions at the top. Molpro : Only UCL users are licensed to use our central copy and can request to be added to the lgmolpro reserved application group. Suggested job sizes on original Michael \u00a7 The target job sizes for original Michael K-type nodes are 48-120 cores (2-5 nodes). Jobs larger than this may have a longer queue time and are better suited to ARCHER, and single node jobs may be more suited to your local facilities. Maximum job resources on original Michael \u00a7 Cores Max wallclock 864 48hrs On Michael, interactive sessions using qrsh have the same wallclock limit as other jobs. The K-type nodes in Michael are 24 cores, 128GB RAM. The default maximum jobsize is 864 cores, to remain within the 36-node 1:1 nonblocking interconnect zones. Jobs on Michael do not share nodes . This means that if you request less than 24 cores, your job is still taking up an entire node and no other jobs can run on it, but some of the cores are idle. Whenever possible, request a number of cores that is a multiple of 24 for full usage of your nodes. There is a superqueue for use in exceptional circumstances that will allow access to a larger number of cores outside the nonblocking interconnect zones, going across the 3:1 interconnect between blocks. A third of each CU is accessible this way, roughly approximating a 1:1 connection. Access to the superqueue for larger jobs must be applied for: contact the support address below for details. Some normal multi-node jobs will use the superqueue - this is to make it easier for larger jobs to be scheduled, as otherwise they can have very long waits if every CU is half full. 2020 Michael expansion \u00a7 At the end of March 2020, Michael was expanded to include a new set of nodes. The old Michael nodes are the K-type nodes, while the new ones are the A-type nodes. The node name will look like node-a14a-001 or node-k10a-001 . The Michael expansion consists of 208 compute nodes each with two 20-core Intel Xeon Gold 6248 2.5GHz processors, 192 gigabytes of 2933MHz DDR4 RAM, 1TB disk, and an Intel OmniPath network. Expansion nodes have two Hyperthreads available. These are arranged in two 32-node CUs (a and b) and four 36-node CUs (c to f). Jobs are restricted to running either within a CU (all nodes connected to the same switch) or across CUs using only the bottom third of nodes attached to each switch. This approximates 1:1 blocking on a cluster that does not have it. Maximum job resources on Michael expansion \u00a7 Please consider that Michael's A-type nodes have 40 physical cores - 2 nodes is 80 cores. Jobs do not share nodes, so although asking for 41 cores is possible, it means you are wasting the other 39 cores on your second node! Cores Max. Duration 2800 48h These are numbers of physical cores: multiply by two for virtual cores with hyperthreads. Hyperthreading \u00a7 The A-type nodes have hyperthreading enabled and you can choose on a per-job basis whether you want to use it. Hyperthreading lets you use two virtual cores instead of one physical core - some programs can take advantage of this. If you do not ask for hyperthreading, your job only uses one thread per core as normal. The -l threads= request is not a true/false setting, instead you are telling the scheduler you want one slot to block one virtual cpu instead of the normal situation where it blocks two. If you have a script with a threads request and want to override it on the command line or set it back to normal, the usual case is -l threads=2 . (Setting threads to 0 does not disable hyperthreading!) # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process export OMP_NUM_THREADS=2 This job would be using 80 physical cores, using 80 MPI processes each of which would create two threads (on Hyperthreads). Note that memory requests are now per virtual core with hyperthreading enabled. If you asked for #$ -l mem=4G on a node with 80 virtual cores and 192G RAM then you are requiring 320G RAM in total which will not fit on that node and so you would be given a sparse process layout across more nodes to meet this requirement. # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process # (a whole node's worth) export OMP_NUM_THREADS=80 This job would still be using 80 physical cores, but would use one MPI process per node which would create 80 threads on the node (on Hyperthreads). Choosing node types \u00a7 Given the difference in core count on the original and expansion Michael nodes, we strongly suggest you always specify which type of node you intend your job to run on, to avoid unintentionally wasting cores if your total number does not cleanly fit on that node size. The old nodes are K-type while the new nodes with hyperthreading are A-type. Jobs never run across a mix of node types - it will be all K nodes or all A nodes. To specify node type in your jobscript, add either: # run on original 24-core nodes #$ -ac allow=K or # run on expansion 40-core hyperthread-enabled nodes #$ -ac allow=A Queue names \u00a7 On Michael, users do not submit directly to queues - the scheduler assigns your job to one based on the resources it requested. The queues have somewhat unorthodox names as they are only used internally, and do not directly map to particular job types. Preventing a job from running cross-CU \u00a7 If your job must run within a single CU, you can request the parallel environment as -pe wss instead of -pe mpi ( wss standing for 'wants single switch'). This will increase your queue times. It is suggested you only do this for benchmarking or if performance is being greatly affected by running in the superqueue. back to top Disk quotas \u00a7 You have one per-user quota, with a default amount of 250GB - this is the total across home and Scratch. lquota shows you your quota and total usage (twice). request_quota is how you request a quota increase. If you go over quota, you will no longer be able to create new files and your jobs will fail as they cannot write. Quota increases may be granted without further approval, depending on size and how full the filesystem is. Otherwise they may need to go to the Thomas User Group for approval. back to top Budgets and allocations \u00a7 We have enabled Gold for allocation management. Jobs that are run under a project budget have higher priority than free non-budgeted jobs. All jobs need to specify what project they belong to, whether they are paid or free. To see the name of your project(s) and how much allocation that budget has, run the command budgets . $ budgets Project Machines Balance -------- -------- -------- Faraday_Test ANY 22781.89 Submitting a job under a project \u00a7 To submit a paid job that will take Gold from a particular project budget, add this to your jobscript: #$ -P Gold #$ -A MyProject To submit a free job that will not use up any Gold, use this instead: #$ -P Free #$ -A MyProject You can also submit testing jobs that will not use up any Gold, and will have higher priority than normal free jobs, but are limited to 2 nodes (48 cores) and 1 hour of walltime: #$ -P Test #$ -A MyProject Troubleshooting: Unable to verify membership in policyjsv project \u00a7 Unable to run job: Rejected by policyjsv Unable to verify membership of `<username>` in the policyjsv project You asked for a Free job but didn't specify #$ -A MyProject in your jobscript. Troubleshooting: Unable to verify membership in project / Uninitialized value \u00a7 Unable to run job: Rejected by policyjsv Reason:Unable to verify sufficient material worth to submit this job: Unable to verify membership of mmmxxxx in the UCL_Example project This error from qsub can mean that you aren't in the project you are trying to submit to, but also happens when the Gold daemon is not running. Use of uninitialized value in print at /opt/gold/bin/mybalance line 60, <GBALANCE> line 1. Failed sending message: (Unable to connect to socket (Connection refused)). If you also get this error from the budgets command, then the Gold daemon is definitely not running and you should contact rc-support. Gold charging \u00a7 When you submit a job, it will reserve the total number of core hours that the job script is asking for. When the job ends, the Gold will move from 'reserved' into charged. If the job doesn't run for the full time it asked for, the unused reserved portion will be refunded after the job ends. You cannot submit a job that you do not have the budget to run. Gold costs of A-type nodes \u00a7 The A-type nodes have twice the peak theoretical performance of the K-type nodes. A 24-core job lasting an hour costs 24 Gold on the K-type nodes. A 40-physical-core job lasting one hour costs 80 Gold on the A-type nodes. An 80-virtual-core job on the A-type nodes also costs 80 Gold. Troubleshooting: Unable to verify sufficient material worth \u00a7 Unable to run job: Rejected by policyjsv Reason:Unable to verify sufficient material worth to submit this job: Insufficient balance to reserve job This means you don't have enough Gold to cover the cores*wallclock time cost of the job you are trying to submit. You need to wait for queued jobs to finish and return unused Gold to your project, or submit a smaller/shorter job. Note that array jobs have to cover the whole cost of all the tasks at submit time. Job deletion \u00a7 If you qdel a submitted Gold job, the reserved Gold will be made available again. This is done by a cron job that runs every 15 minutes, so you may not see it back instantly. Reporting Gold usage \u00a7 There are a few commands that everyone can run that report Gold usage for their entire project, broken down by user. See Reporting from Gold . Support \u00a7 Email rc-support@ucl.ac.uk with any support queries. It will be helpful to include Michael in the subject along with some descriptive text about the type of problem, and you should mention your username in the body.","title":"MMM Michael"},{"location":"Clusters/Michael/#michael","text":"Michael is an extension to the UCL-hosted Hub for Materials and Molecular Modelling, an EPSRC-funded Tier 2 system providing large scale computation to UK researchers; and delivers computational capability for the Faraday Institution, a national institute for electrochemical energy storage science and technology.","title":"Michael"},{"location":"Clusters/Michael/#applying-for-an-account","text":"Michael accounts belong to you as an individual and are applied for via David Scanlon who is the point of contact for Michael. You will need to supply an SSH public key, which is the only method used to log in.","title":"Applying for an account"},{"location":"Clusters/Michael/#creating-an-ssh-key-pair","text":"An ssh key consists of a public and a private part, typically named id_rsa and id_rsa.pub by default. The public part is what we need. You must not share your private key with anyone else. You can copy it onto multiple machines belonging to you so you can log in from all of them (or you can have a separate pair for each machine).","title":"Creating an ssh key pair"},{"location":"Clusters/Michael/#creating-an-ssh-key-in-linuxunixmac-os-x","text":"ssh-keygen -t rsa The defaults should give you a reasonable key. If you prefer to use ed25519 instead, and/or longer keys, you can. You can also tell it to create one with a different name, so it doesn't overwrite any existing key. Do not use DSA as OpenSSH 7.0 has deprecated it and does not use it by default on client or server. We no longer accept DSA keys. You will be asked to add a passphrase for your key. A blank passphrase is not recommended; if you use one please make sure that no one else ever has access to your local computer account. How often you are asked for a passphrase depends on how long your local ssh agent keeps it. You may need to run ssh-add to add the key to your agent so you can use it. If you aren't sure what keys your agent can see, running ssh-add -L will show all the public parts of the keys it is aware of.","title":"Creating an ssh key in Linux/Unix/Mac OS X"},{"location":"Clusters/Michael/#creating-an-ssh-key-in-windows","text":"Have a look at Key-Based SSH Logins With PuTTY which has step-by-step instructions. You can choose whether to use Pageant or not to manage your key. You can again pick RSA, ED25519, ECDSA etc but do not pick SSH-1 as that is a very old and insecure key type. As above, DSA is no longer accepted. The key must be at least 2048-bit. If you are using Windows 10, then you probably have OpenSSH installed and could instead run ssh-keygen in a terminal per the Linux instructions and use the ssh command to log in instead of PuTTY.","title":"Creating an ssh key in Windows"},{"location":"Clusters/Michael/#information-for-points-of-contact","text":"Points of Contact have some tools they can use to manage users and allocations, documented at MMM Points of Contact .","title":"Information for Points of Contact"},{"location":"Clusters/Michael/#logging-in","text":"You will be assigned a personal username and your SSH key pair will be used to log in. External users will have a username in the form mmmxxxx (where xxxx is a number) and UCL users will use their central username. You connect with ssh directly to: michael.rc.ucl.ac.uk","title":"Logging in"},{"location":"Clusters/Michael/#ssh-timeouts","text":"Idle ssh sessions will be disconnected after 7 days.","title":"SSH timeouts"},{"location":"Clusters/Michael/#using-the-system","text":"Michael is a batch system. The login nodes allow you to manage your files, compile code and submit jobs. Very short (\\<15mins) and non-resource-intensive software tests can be run on the login nodes, but anything more should be submitted as a job.","title":"Using the system"},{"location":"Clusters/Michael/#full-user-guide","text":"Michael has the same user environment as RC Support's other clusters, so the User guide is relevant and is a good starting point for further information about how the environment works. Any variations that Michael has should be listed on this page.","title":"Full user guide"},{"location":"Clusters/Michael/#submitting-a-job","text":"Create a job script for non-interactive use and submit your jobscript using qsub . Jobscripts must begin #!/bin/bash -l in order to run as a login shell and get your login environment and modules. A job on Michael must also specify what type of job it is (Gold, Free, Test) and the project it is being submitted for. (See Budgets and allocations below).","title":"Submitting a job"},{"location":"Clusters/Michael/#memory-requests","text":"Note: the memory you request is always per core, not the total amount. If you ask for 128G RAM and 24 cores, that will run on 24 nodes using only one core per node. This allows you to have sparse process placement when you do actually need that much RAM per process.","title":"Memory requests"},{"location":"Clusters/Michael/#monitoring-a-job","text":"In addition to qstat , nodesforjob $JOB_ID can be useful to see what proportion of cpu/memory/swap is being used on the nodes a certain job is running on. qexplain $JOB_ID will show you the full error for a job that is in Eqw status.","title":"Monitoring a job"},{"location":"Clusters/Michael/#useful-utilities","text":"As well as nodesforjob , there are the following utilities which can help you find information about your jobs after they have run. jobhist - shows your job history for the last 24hrs by default, including start and end times and the head node it ran on. You can view a longer history by specifying --hours=100 for example. scriptfor $JOB_ID - show the script that was submitted for the given job. These utilities live in GitHub at https://github.com/UCL-RITS/go-clustertools and https://github.com/UCL-RITS/rcps-cluster-scripts","title":"Useful utilities"},{"location":"Clusters/Michael/#software","text":"Michael mounts the RC Systems software stack . Have a look at Software Guides for specific information on running some applications, including example scripts. The list there is not exhaustive. Access to software is managed through the use of modules. module avail shows all modules available. module list shows modules currently loaded. Access to licensed software may vary based on your host institution and project.","title":"Software"},{"location":"Clusters/Michael/#requesting-software-installs","text":"To request software installs, email us at the support address below or open an issue on our GitHub . You can see what software has already been requested in the Github issues and can add a comment if you're also interested in something already requested.","title":"Requesting software installs"},{"location":"Clusters/Michael/#installing-your-own-software","text":"You may install software in your own space. Please look at Compiling for tips.","title":"Installing your own software"},{"location":"Clusters/Michael/#maintaining-a-piece-of-software-for-a-group","text":"It is possible for people to be given central areas to install software that they wish to make available to everyone or to a select group - generally because they are the developers or if they wish to use multiple versions or developer versions. The people given install access would then be responsible for managing and maintaining these installs.","title":"Maintaining a piece of software for a group"},{"location":"Clusters/Michael/#licensed-software","text":"Reserved application groups exist for software that requires them. The group name will begin with leg or lg . After we add you to one of these groups, the central group change will happen overnight. You can check your groups with the groups command. Please let us know your username when you ask to be added to a group. CASTEP : You/your group leader need to have signed up for a CASTEP license . Send us an acceptance email, or we can ask them to verify you have a license. You will then be added to the reserved application group lgcastep . If you are a member of UKCP you are already covered by a license and just need to tell us when you request access. CRYSTAL : You/your group leader need to have signed up for an Academic license. Crystal Solutions will send an email saying an account has been upgraded to \"Academic UK\" - forward that to us along with confirmation from the group leader that you should be in their group. You will be added to the legcryst group. DL_POLY : has individual licenses for specific versions. Sign up at DL_POLY's website and send us the acceptance email they give you. We will add you to the appropriate version's reserved application group, eg lgdlp408 . Gaussian : not currently accessible for non-UCL institutions. UCL having a site license and another institute having a site license does not allow users from the other institute to run Gaussian on UCL-owned hardware. VASP : When you request access you need to send us the email address you are named on a VASP license using. You can also send name and email of the main VASP license holder along with the license number if you wish. We will then check in the VASP portal if we can add you. We will add you to the legvasp5 or legvasp6 reserved application groups depending on which versions you are licensed for. You may also install your own copy in your home, and we provide a simple build script on Github (tested with VASP 5.4.4, no patches). You need to download the VASP source code and then you can run the script following the instructions at the top. Molpro : Only UCL users are licensed to use our central copy and can request to be added to the lgmolpro reserved application group.","title":"Licensed software"},{"location":"Clusters/Michael/#suggested-job-sizes-on-original-michael","text":"The target job sizes for original Michael K-type nodes are 48-120 cores (2-5 nodes). Jobs larger than this may have a longer queue time and are better suited to ARCHER, and single node jobs may be more suited to your local facilities.","title":"Suggested job sizes on original Michael"},{"location":"Clusters/Michael/#maximum-job-resources-on-original-michael","text":"Cores Max wallclock 864 48hrs On Michael, interactive sessions using qrsh have the same wallclock limit as other jobs. The K-type nodes in Michael are 24 cores, 128GB RAM. The default maximum jobsize is 864 cores, to remain within the 36-node 1:1 nonblocking interconnect zones. Jobs on Michael do not share nodes . This means that if you request less than 24 cores, your job is still taking up an entire node and no other jobs can run on it, but some of the cores are idle. Whenever possible, request a number of cores that is a multiple of 24 for full usage of your nodes. There is a superqueue for use in exceptional circumstances that will allow access to a larger number of cores outside the nonblocking interconnect zones, going across the 3:1 interconnect between blocks. A third of each CU is accessible this way, roughly approximating a 1:1 connection. Access to the superqueue for larger jobs must be applied for: contact the support address below for details. Some normal multi-node jobs will use the superqueue - this is to make it easier for larger jobs to be scheduled, as otherwise they can have very long waits if every CU is half full.","title":"Maximum job resources on original Michael"},{"location":"Clusters/Michael/#2020-michael-expansion","text":"At the end of March 2020, Michael was expanded to include a new set of nodes. The old Michael nodes are the K-type nodes, while the new ones are the A-type nodes. The node name will look like node-a14a-001 or node-k10a-001 . The Michael expansion consists of 208 compute nodes each with two 20-core Intel Xeon Gold 6248 2.5GHz processors, 192 gigabytes of 2933MHz DDR4 RAM, 1TB disk, and an Intel OmniPath network. Expansion nodes have two Hyperthreads available. These are arranged in two 32-node CUs (a and b) and four 36-node CUs (c to f). Jobs are restricted to running either within a CU (all nodes connected to the same switch) or across CUs using only the bottom third of nodes attached to each switch. This approximates 1:1 blocking on a cluster that does not have it.","title":"2020 Michael expansion"},{"location":"Clusters/Michael/#maximum-job-resources-on-michael-expansion","text":"Please consider that Michael's A-type nodes have 40 physical cores - 2 nodes is 80 cores. Jobs do not share nodes, so although asking for 41 cores is possible, it means you are wasting the other 39 cores on your second node! Cores Max. Duration 2800 48h These are numbers of physical cores: multiply by two for virtual cores with hyperthreads.","title":"Maximum job resources on Michael expansion"},{"location":"Clusters/Michael/#hyperthreading","text":"The A-type nodes have hyperthreading enabled and you can choose on a per-job basis whether you want to use it. Hyperthreading lets you use two virtual cores instead of one physical core - some programs can take advantage of this. If you do not ask for hyperthreading, your job only uses one thread per core as normal. The -l threads= request is not a true/false setting, instead you are telling the scheduler you want one slot to block one virtual cpu instead of the normal situation where it blocks two. If you have a script with a threads request and want to override it on the command line or set it back to normal, the usual case is -l threads=2 . (Setting threads to 0 does not disable hyperthreading!) # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process export OMP_NUM_THREADS=2 This job would be using 80 physical cores, using 80 MPI processes each of which would create two threads (on Hyperthreads). Note that memory requests are now per virtual core with hyperthreading enabled. If you asked for #$ -l mem=4G on a node with 80 virtual cores and 192G RAM then you are requiring 320G RAM in total which will not fit on that node and so you would be given a sparse process layout across more nodes to meet this requirement. # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process # (a whole node's worth) export OMP_NUM_THREADS=80 This job would still be using 80 physical cores, but would use one MPI process per node which would create 80 threads on the node (on Hyperthreads).","title":"Hyperthreading"},{"location":"Clusters/Michael/#choosing-node-types","text":"Given the difference in core count on the original and expansion Michael nodes, we strongly suggest you always specify which type of node you intend your job to run on, to avoid unintentionally wasting cores if your total number does not cleanly fit on that node size. The old nodes are K-type while the new nodes with hyperthreading are A-type. Jobs never run across a mix of node types - it will be all K nodes or all A nodes. To specify node type in your jobscript, add either: # run on original 24-core nodes #$ -ac allow=K or # run on expansion 40-core hyperthread-enabled nodes #$ -ac allow=A","title":"Choosing node types"},{"location":"Clusters/Michael/#queue-names","text":"On Michael, users do not submit directly to queues - the scheduler assigns your job to one based on the resources it requested. The queues have somewhat unorthodox names as they are only used internally, and do not directly map to particular job types.","title":"Queue names"},{"location":"Clusters/Michael/#preventing-a-job-from-running-cross-cu","text":"If your job must run within a single CU, you can request the parallel environment as -pe wss instead of -pe mpi ( wss standing for 'wants single switch'). This will increase your queue times. It is suggested you only do this for benchmarking or if performance is being greatly affected by running in the superqueue. back to top","title":"Preventing a job from running cross-CU"},{"location":"Clusters/Michael/#disk-quotas","text":"You have one per-user quota, with a default amount of 250GB - this is the total across home and Scratch. lquota shows you your quota and total usage (twice). request_quota is how you request a quota increase. If you go over quota, you will no longer be able to create new files and your jobs will fail as they cannot write. Quota increases may be granted without further approval, depending on size and how full the filesystem is. Otherwise they may need to go to the Thomas User Group for approval. back to top","title":"Disk quotas"},{"location":"Clusters/Michael/#budgets-and-allocations","text":"We have enabled Gold for allocation management. Jobs that are run under a project budget have higher priority than free non-budgeted jobs. All jobs need to specify what project they belong to, whether they are paid or free. To see the name of your project(s) and how much allocation that budget has, run the command budgets . $ budgets Project Machines Balance -------- -------- -------- Faraday_Test ANY 22781.89","title":"Budgets and allocations"},{"location":"Clusters/Michael/#submitting-a-job-under-a-project","text":"To submit a paid job that will take Gold from a particular project budget, add this to your jobscript: #$ -P Gold #$ -A MyProject To submit a free job that will not use up any Gold, use this instead: #$ -P Free #$ -A MyProject You can also submit testing jobs that will not use up any Gold, and will have higher priority than normal free jobs, but are limited to 2 nodes (48 cores) and 1 hour of walltime: #$ -P Test #$ -A MyProject","title":"Submitting a job under a project"},{"location":"Clusters/Michael/#troubleshooting-unable-to-verify-membership-in-policyjsv-project","text":"Unable to run job: Rejected by policyjsv Unable to verify membership of `<username>` in the policyjsv project You asked for a Free job but didn't specify #$ -A MyProject in your jobscript.","title":"Troubleshooting: Unable to verify membership in policyjsv project"},{"location":"Clusters/Michael/#troubleshooting-unable-to-verify-membership-in-project-uninitialized-value","text":"Unable to run job: Rejected by policyjsv Reason:Unable to verify sufficient material worth to submit this job: Unable to verify membership of mmmxxxx in the UCL_Example project This error from qsub can mean that you aren't in the project you are trying to submit to, but also happens when the Gold daemon is not running. Use of uninitialized value in print at /opt/gold/bin/mybalance line 60, <GBALANCE> line 1. Failed sending message: (Unable to connect to socket (Connection refused)). If you also get this error from the budgets command, then the Gold daemon is definitely not running and you should contact rc-support.","title":"Troubleshooting: Unable to verify membership in project / Uninitialized value"},{"location":"Clusters/Michael/#gold-charging","text":"When you submit a job, it will reserve the total number of core hours that the job script is asking for. When the job ends, the Gold will move from 'reserved' into charged. If the job doesn't run for the full time it asked for, the unused reserved portion will be refunded after the job ends. You cannot submit a job that you do not have the budget to run.","title":"Gold charging"},{"location":"Clusters/Michael/#gold-costs-of-a-type-nodes","text":"The A-type nodes have twice the peak theoretical performance of the K-type nodes. A 24-core job lasting an hour costs 24 Gold on the K-type nodes. A 40-physical-core job lasting one hour costs 80 Gold on the A-type nodes. An 80-virtual-core job on the A-type nodes also costs 80 Gold.","title":"Gold costs of A-type nodes"},{"location":"Clusters/Michael/#troubleshooting-unable-to-verify-sufficient-material-worth","text":"Unable to run job: Rejected by policyjsv Reason:Unable to verify sufficient material worth to submit this job: Insufficient balance to reserve job This means you don't have enough Gold to cover the cores*wallclock time cost of the job you are trying to submit. You need to wait for queued jobs to finish and return unused Gold to your project, or submit a smaller/shorter job. Note that array jobs have to cover the whole cost of all the tasks at submit time.","title":"Troubleshooting: Unable to verify sufficient material worth"},{"location":"Clusters/Michael/#job-deletion","text":"If you qdel a submitted Gold job, the reserved Gold will be made available again. This is done by a cron job that runs every 15 minutes, so you may not see it back instantly.","title":"Job deletion"},{"location":"Clusters/Michael/#reporting-gold-usage","text":"There are a few commands that everyone can run that report Gold usage for their entire project, broken down by user. See Reporting from Gold .","title":"Reporting Gold usage"},{"location":"Clusters/Michael/#support","text":"Email rc-support@ucl.ac.uk with any support queries. It will be helpful to include Michael in the subject along with some descriptive text about the type of problem, and you should mention your username in the body.","title":"Support"},{"location":"Clusters/Myriad/","text":"Myriad \u00a7 Myriad is designed for high I/O, high throughput jobs that will run within a single node rather than multi-node parallel jobs. Accounts \u00a7 Myriad accounts can be applied for via the Research Computing sign up process . As Myriad is our most general-purpose system, everyone who signs up for a Research Computing account is given access to Myriad. Logging in \u00a7 You will use your UCL username and password to ssh in to Myriad. ssh uccaxxx@myriad.rc.ucl.ac.uk If using PuTTY, put myriad.rc.ucl.ac.uk as the hostname and your seven-character username (with no @ after) as the username when logging in, eg. uccaxxx . When entering your password in PuTTY no characters or bulletpoints will show on screen - this is normal. If you are outside the UCL firewall you will need to follow the instructions for Logging in from outside the UCL firewall . Logging in to a specific node \u00a7 You can access a specific Myriad login node with: ssh uccaxxx@login12.myriad.rc.ucl.ac.uk ssh uccaxxx@login13.myriad.rc.ucl.ac.uk The main address will redirect you on to either one of them. Copying data onto Myriad \u00a7 You will need to use an SCP or SFTP client to copy data onto Myriad. Please refer to the page on How do I transfer data onto the system? Quotas \u00a7 The default quotas on Myriad are 150GB for home and 1TB for Scratch. These are hard quotas: once you reach them, you will no longer be able to write more data. Keep an eye on them, as this will cause jobs to fail if they cannot create their .o or .e files at the start, or their output files partway through. You can check both quotas on Myriad by running: lquota which will give you output similar to this: Storage Used Quota % Used Path home 721.68 MiB 150.00 GiB 0% /home/uccaxxx scratch 52.09 MiB 1.00 TiB 0% /scratch/scratch/uccaxxx You can apply for quota increases using the form at Additional Resource Requests . Here are some tips for managing your quota and finding where space is being used. Job sizes \u00a7 Cores Max wallclock 1 72hrs 2 to 36 48hrs Interactive jobs run with qrsh have the same maximum wallclock time as other jobs. Node types \u00a7 Myriad contains three main node types: standard compute nodes, high memory nodes and GPU nodes. As new nodes as added over time with slightly newer processor variants, new letters are added. Type Cores per node RAM per node tmpfs Nodes H,D 36 192GB 1500G 342 I,B 36 1.5TB 1500G 17 J 36 + 2 P100 GPUs 192GB 1500G 2 E,F 36 + 2 V100 GPUs 192GB 1500G 19 L 36 + 4 A100 GPUs 192GB 1500G 6 You can tell the type of a node by its name: type H nodes are named node-h00a-001 etc. Here are the processors each node type has: F, H, I, J: Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz B, D, E, L: Intel(R) Xeon(R) Gold 6240 CPU @ 2.60GHz (If you ever need to check this, you can include cat /proc/cpuinfo in your jobscript so you get it in your job's .o file for the exact node your job ran on. You will get an entry for every core). GPUs \u00a7 Myriad has four types of GPU nodes: E, F, J and L. L-type nodes each have four NVIDIA A100s. (Compute Capability 80) F-type and E-type nodes each have two NVIDIA Tesla V100s. The CPUs are slightly different on the different letters, see above. (Compute Capability 70) J-type nodes each have two NVIDIA Tesla P100s. (Compute Capability 60) You can include nvidia-smi in your jobscript to get information about the GPU your job ran on. Compute Capability \u00a7 Compute Capability is how NVIDIA categorises its generations of GPU architectures. When code is compiled, it targets one or multiple of these and so it may only be able to run on GPUs of a specific Compute Capability. If you get an error like this: CUDA runtime implicit initialization on GPU:0 failed. Status: device kernel image is invalid then the software you are running does not support the Compute Capability of the GPU you tried to run it on, and you probably need a newer version. Requesting multiple and specific types of GPU \u00a7 You can request a number of GPUs by adding them as a resource request to your jobscript: # For 1 GPU #$ -l gpu=1 # For 2 GPUs #$ -l gpu=2 # For 4 GPUs #$ -l gpu=4 If you ask for one or two GPUs your job can run on any type of GPU since it can fit on any of the nodetypes. If you ask for four, it can only be a node that has four. If you need to specify one node type over the others because you need a particular Compute Capability, add a request for that type of node to your jobscript: # request a V100 node only #$ -ac allow=EF # request an A100 node only #$ -ac allow=L The GPU nodes page has some sample code for running GPU jobs if you need a test example. Tensorflow \u00a7 Tensorflow is installed: type module avail tensorflow to see the available versions. Modules to load for the non-MKL GPU version: module load python3/3.7 module load cuda/10.0.130/gnu-4.9.2 module load cudnn/7.4.2.24/cuda-10.0 module load tensorflow/2.0.0/gpu-py37 PyTorch \u00a7 PyTorch is installed: type module avail pytorch to see the versions available. Modules to load the most recent release we have installed (May 2022) are: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load python3/3.9-gnu-10.2.0 module load cuda/11.3.1/gnu-10.2.0 module load cudnn/8.2.1.32/cuda-11.3 module load pytorch/1.11.0/gpu If you want the CPU only version then use: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load python3/3.9-gnu-10.2.0 module load pytorch/1.11.0/cpu","title":"Myriad"},{"location":"Clusters/Myriad/#myriad","text":"Myriad is designed for high I/O, high throughput jobs that will run within a single node rather than multi-node parallel jobs.","title":"Myriad"},{"location":"Clusters/Myriad/#accounts","text":"Myriad accounts can be applied for via the Research Computing sign up process . As Myriad is our most general-purpose system, everyone who signs up for a Research Computing account is given access to Myriad.","title":"Accounts"},{"location":"Clusters/Myriad/#logging-in","text":"You will use your UCL username and password to ssh in to Myriad. ssh uccaxxx@myriad.rc.ucl.ac.uk If using PuTTY, put myriad.rc.ucl.ac.uk as the hostname and your seven-character username (with no @ after) as the username when logging in, eg. uccaxxx . When entering your password in PuTTY no characters or bulletpoints will show on screen - this is normal. If you are outside the UCL firewall you will need to follow the instructions for Logging in from outside the UCL firewall .","title":"Logging in"},{"location":"Clusters/Myriad/#logging-in-to-a-specific-node","text":"You can access a specific Myriad login node with: ssh uccaxxx@login12.myriad.rc.ucl.ac.uk ssh uccaxxx@login13.myriad.rc.ucl.ac.uk The main address will redirect you on to either one of them.","title":"Logging in to a specific node"},{"location":"Clusters/Myriad/#copying-data-onto-myriad","text":"You will need to use an SCP or SFTP client to copy data onto Myriad. Please refer to the page on How do I transfer data onto the system?","title":"Copying data onto Myriad"},{"location":"Clusters/Myriad/#quotas","text":"The default quotas on Myriad are 150GB for home and 1TB for Scratch. These are hard quotas: once you reach them, you will no longer be able to write more data. Keep an eye on them, as this will cause jobs to fail if they cannot create their .o or .e files at the start, or their output files partway through. You can check both quotas on Myriad by running: lquota which will give you output similar to this: Storage Used Quota % Used Path home 721.68 MiB 150.00 GiB 0% /home/uccaxxx scratch 52.09 MiB 1.00 TiB 0% /scratch/scratch/uccaxxx You can apply for quota increases using the form at Additional Resource Requests . Here are some tips for managing your quota and finding where space is being used.","title":"Quotas"},{"location":"Clusters/Myriad/#job-sizes","text":"Cores Max wallclock 1 72hrs 2 to 36 48hrs Interactive jobs run with qrsh have the same maximum wallclock time as other jobs.","title":"Job sizes"},{"location":"Clusters/Myriad/#node-types","text":"Myriad contains three main node types: standard compute nodes, high memory nodes and GPU nodes. As new nodes as added over time with slightly newer processor variants, new letters are added. Type Cores per node RAM per node tmpfs Nodes H,D 36 192GB 1500G 342 I,B 36 1.5TB 1500G 17 J 36 + 2 P100 GPUs 192GB 1500G 2 E,F 36 + 2 V100 GPUs 192GB 1500G 19 L 36 + 4 A100 GPUs 192GB 1500G 6 You can tell the type of a node by its name: type H nodes are named node-h00a-001 etc. Here are the processors each node type has: F, H, I, J: Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz B, D, E, L: Intel(R) Xeon(R) Gold 6240 CPU @ 2.60GHz (If you ever need to check this, you can include cat /proc/cpuinfo in your jobscript so you get it in your job's .o file for the exact node your job ran on. You will get an entry for every core).","title":"Node types"},{"location":"Clusters/Myriad/#gpus","text":"Myriad has four types of GPU nodes: E, F, J and L. L-type nodes each have four NVIDIA A100s. (Compute Capability 80) F-type and E-type nodes each have two NVIDIA Tesla V100s. The CPUs are slightly different on the different letters, see above. (Compute Capability 70) J-type nodes each have two NVIDIA Tesla P100s. (Compute Capability 60) You can include nvidia-smi in your jobscript to get information about the GPU your job ran on.","title":"GPUs"},{"location":"Clusters/Myriad/#compute-capability","text":"Compute Capability is how NVIDIA categorises its generations of GPU architectures. When code is compiled, it targets one or multiple of these and so it may only be able to run on GPUs of a specific Compute Capability. If you get an error like this: CUDA runtime implicit initialization on GPU:0 failed. Status: device kernel image is invalid then the software you are running does not support the Compute Capability of the GPU you tried to run it on, and you probably need a newer version.","title":"Compute Capability"},{"location":"Clusters/Myriad/#requesting-multiple-and-specific-types-of-gpu","text":"You can request a number of GPUs by adding them as a resource request to your jobscript: # For 1 GPU #$ -l gpu=1 # For 2 GPUs #$ -l gpu=2 # For 4 GPUs #$ -l gpu=4 If you ask for one or two GPUs your job can run on any type of GPU since it can fit on any of the nodetypes. If you ask for four, it can only be a node that has four. If you need to specify one node type over the others because you need a particular Compute Capability, add a request for that type of node to your jobscript: # request a V100 node only #$ -ac allow=EF # request an A100 node only #$ -ac allow=L The GPU nodes page has some sample code for running GPU jobs if you need a test example.","title":"Requesting multiple and specific types of GPU"},{"location":"Clusters/Myriad/#tensorflow","text":"Tensorflow is installed: type module avail tensorflow to see the available versions. Modules to load for the non-MKL GPU version: module load python3/3.7 module load cuda/10.0.130/gnu-4.9.2 module load cudnn/7.4.2.24/cuda-10.0 module load tensorflow/2.0.0/gpu-py37","title":"Tensorflow"},{"location":"Clusters/Myriad/#pytorch","text":"PyTorch is installed: type module avail pytorch to see the versions available. Modules to load the most recent release we have installed (May 2022) are: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load python3/3.9-gnu-10.2.0 module load cuda/11.3.1/gnu-10.2.0 module load cudnn/8.2.1.32/cuda-11.3 module load pytorch/1.11.0/gpu If you want the CPU only version then use: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load python3/3.9-gnu-10.2.0 module load pytorch/1.11.0/cpu","title":"PyTorch"},{"location":"Clusters/Thomas/","text":"Thomas is the UK National Tier 2 High Performance Computing Hub in Materials and Molecular Modelling. Thomas end of life The Thomas cluster is being retired. Notable dates are: Monday 1 March 2021 : Job submission will be switched off this morning. Jobs already in the queue may still run. Access to the login nodes will remain for one month so you can retrieve data. Friday 5 March 2021 : Queues will be drained. Any jobs left will never run. Thursday 1 April 2021 : Access to the login nodes will be removed and all data will be deleted. Thomas has now been retired as an MMM Hub machine. A portion of Thomas is running for UCL users only until the end of 2021. 7 June 2021: Thomas is now inside the UCL firewall, use VPN, or SSH via ssh-gateway.ucl.ac.uk to access. Thomas technical specs \u00a7 Thomas originally consisted of 720 Lenovo Intel x86-64 nodes, giving 17.2k cores in total, with Intel OmniPath interconnect (1:1 nonblocking in 36 node blocks, 3:1 between blocks and across the system). Each node has the following specs: 2 x 12 core Intel Broadwell processors (24 cores total) 128GB RAM 120GB SSD Applying for an account \u00a7 UCL users can contact David Scanlon or Scott Woodley for access to the post-retirement portion of Thomas. Thomas accounts belong to you as an individual and are applied for through your own institution's Point of Contact . You will need to supply an SSH public key, which is the only method used to log in. Creating an ssh key pair \u00a7 An ssh key consists of a public and a private part, typically named id_rsa and id_rsa.pub by default. The public part is what we need. You must not share your private key with anyone else. You can copy it onto multiple machines belonging to you so you can log in from all of them (or you can have a separate pair for each machine). Creating an ssh key in Linux/Unix/Mac OS X \u00a7 ssh-keygen -t rsa The defaults should give you a reasonable key. If you prefer to use ed25519 instead, and/or longer keys, you can. You can also tell it to create one with a different name, so it doesn't overwrite any existing key. Do not use DSA as OpenSSH 7.0 has deprecated it and does not use it by default on client or server. We no longer accept DSA keys. You will be asked to add a passphrase for your key. A blank passphrase is not recommended; if you use one please make sure that no one else ever has access to your local computer account. How often you are asked for a passphrase depends on how long your local ssh agent keeps it. You may need to run ssh-add to add the key to your agent so you can use it. If you aren't sure what keys your agent can see, running ssh-add -L will show all the public parts of the keys it is aware of. Creating an ssh key in Windows \u00a7 Have a look at Key-Based SSH Logins With PuTTY which has step-by-step instructions. You can choose whether to use Pageant or not to manage your key. You can again pick RSA, ED25519, ECDSA etc but do not pick SSH-1 as that is a very old and insecure key type. As above, DSA is no longer accepted. The key must be at least 2048-bit. If you are using Windows 10, then you probably have OpenSSH installed and could instead run ssh-keygen in a terminal per the Linux instructions and use the ssh command to log in instead of PuTTY. Information for Points of Contact \u00a7 Points of Contact have some tools they can use to manage users and allocations, documented at MMM Points of Contact . Logging in \u00a7 You will be assigned a personal username and your SSH key pair will be used to log in. External users will have a username in the form mmmxxxx (where xxxx is a number) and UCL users will use their central username. You ssh directly to: thomas.rc.ucl.ac.uk From inside the UCL VPN you can ssh directly into the above but from outside you can do the following: ssh -o ProxyJump=<UCL_user_ID>@ssh-gateway.ucl.ac.uk <thomas_user_ID>@thomas.rc.ucl.ac.uk SSH timeouts \u00a7 Idle ssh sessions will be disconnected after 7 days. Using the system \u00a7 Thomas is a batch system. The login nodes allow you to manage your files, compile code and submit jobs. Very short (\\<15mins) and non-resource-intensive software tests can be run on the login nodes, but anything more should be submitted as a job. Full user guide \u00a7 Thomas has the same user environment as RC Support's other clusters, so the User guide is relevant and is a good starting point for further information about how the environment works. Any variations that Thomas has should be listed on this page. Submitting a job \u00a7 Create a jobscript for non-interactive use and submit your jobscript using qsub . Jobscripts must begin #!/bin/bash -l in order to run as a login shell and get your login environment and modules. Jobs no longer need to specify what type of job it is (Gold, Free, Test) or the project it is being submitted for. (See Budgets and allocations below.) Memory requests \u00a7 Note: the memory you request is always per core, not the total amount. If you ask for 128GB RAM and 24 cores, that will run on 24 nodes using only one core per node. This allows you to have sparse process placement when you do actually need that much RAM per process. Monitoring a job \u00a7 In addition to qstat , nodesforjob $JOB_ID can be useful to see what proportion of cpu/memory/swap is being used on the nodes a certain job is running on. qexplain $JOB_ID will show you the full error for a job that is in Eqw status. Useful utilities \u00a7 As well as nodesforjob , there are the following utilities which can help you find information about your jobs after they have run. jobhist - shows your job history for the last 24hrs by default, including start and end times and the head node it ran on. You can view a longer history by specifying --hours=100 for example. scriptfor $JOB_ID - show the script that was submitted for the given job. These utilities live in GitHub at https://github.com/UCL-RITS/go-clustertools and https://github.com/UCL-RITS/rcps-cluster-scripts Software \u00a7 Thomas mounts the RC Systems software stack . Have a look at Software Guides for specific information on running some applications, including example scripts. The list there is not exhaustive. Access to software is managed through the use of modules. module avail shows all modules available. module list shows modules currently loaded. Access to licensed software may vary based on your host institution and project. Requesting software installs \u00a7 To request software installs, email us at the support address below or open an issue on our GitHub . You can see what software has already been requested in the Github issues and can add a comment if you're also interested in something already requested. Installing your own software \u00a7 You may install software in your own space. Please look at Compiling for tips. Maintaining a piece of software for a group \u00a7 It is possible for people to be given central areas to install software that they wish to make available to everyone or to a select group - generally because they are the developers or if they wish to use multiple versions or developer versions. The people given install access would then be responsible for managing and maintaining these installs. Licensed software \u00a7 Reserved application groups exist for software that requires them. The group name will begin with leg or lg . After we add you to one of these groups, the central group change will happen overnight. You can check your groups with the groups command. Please let us know your username when you ask to be added to a group. CASTEP : You/your group leader need to have signed up for a CASTEP license . Send us an acceptance email, or we can ask them to verify you have a license. You will then be added to the reserved application group lgcastep . If you are a member of UKCP you are already covered by a license and just need to tell us when you request access. CRYSTAL : You/your group leader need to have signed up for an Academic license. Crystal Solutions will send an email saying an account has been upgraded to \"Academic UK\" - forward that to us along with confirmation from the group leader that you should be in their group. You will be added to the legcryst group. DL_POLY : has individual licenses for specific versions. Sign up at DL_POLY's website and send us the acceptance email they give you. We will add you to the appropriate version's reserved application group, eg lgdlp408 . Gaussian : not currently accessible for non-UCL institutions. UCL having a site license and another institute having a site license does not allow users from the other institute to run Gaussian on UCL-owned hardware. VASP : When you request access you need to send us the email address you are named on a VASP license using. You can also send name and email of the main VASP license holder along with the license number if you wish. We will then check in the VASP portal if we can add you. We will add you to the legvasp5 or legvasp6 reserved application groups depending on which versions you are licensed for. You may also install your own copy in your home, and we provide a simple build script on Github (tested with VASP 5.4.4, no patches). You need to download the VASP source code and then you can run the script following the instructions at the top. Molpro : Only UCL users are licensed to use our central copy and can request to be added to the lgmolpro reserved application group. Suggested job sizes \u00a7 The target job sizes for Thomas are 48-120 cores (2-5 nodes). Jobs larger than this may have a longer queue time and are better suited to ARCHER, and single node jobs may be more suited to your local facilities. Maximum job resources \u00a7 Cores Max wallclock 864 48hrs On Thomas, interactive sessions using qrsh have the same wallclock limit as other jobs. Nodes in Thomas are 24 cores, 128G RAM. The default maximum jobsize is 864 cores, to remain within the 36-node 1:1 nonblocking interconnect zones. Jobs on Thomas do not share nodes . This means that if you request less than 24 cores, your job is still taking up an entire node and no other jobs can run on it, but some of the cores are idle. Whenever possible, request a number of cores that is a multiple of 24 for full usage of your nodes. There is a superqueue for use in exceptional circumstances that will allow access to a larger number of cores outside the nonblocking interconnect zones, going across the 3:1 interconnect between blocks. A third of each CU is accessible this way, roughly approximating a 1:1 connection. Access to the superqueue for larger jobs must be applied for: contact the support address below for details. Some normal multi-node jobs will use the superqueue - this is to make it easier for larger jobs to be scheduled, as otherwise they can have very long waits if every CU is half full. Queue names \u00a7 On Thomas, users do not submit directly to queues - the scheduler assigns your job to one based on the resources it requested. The queues have somewhat unorthodox names as they are only used internally, and do not directly map to particular job types. Preventing a job from running cross-CU \u00a7 If your job must run within a single CU, you can request the parallel environment as -pe wss instead of -pe mpi ( wss standing for 'wants single switch'). This will increase your queue times. It is suggested you only do this for benchmarking or if performance is being greatly affected by running in the superqueue. back to top Node types \u00a7 Thomas has one type of node. Type Cores per node RAM per node tmpfs Nodes K 24 128G 100G 705 Here are the processors each node type has: K: Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz (If you ever need to check this, you can include cat /proc/cpuinfo in your jobscript so you get it in your job's .o file for the exact node your job ran on. You will get an entry for every core). Disk quotas \u00a7 Quotas were enabled on Thomas on 29 May 2019. You have one per-user quota, with a default amount of 250GB - this is the total across home and Scratch. lquota shows you your quota and total usage (twice). request_quota is how you request a quota increase. If you go over quota, you will no longer be able to create new files and your jobs will fail as they cannot write. Quota increases may be granted without further approval, depending on size and how full the filesystem is. Otherwise they may need to go to the Thomas User Group for approval. back to top Budgets and allocations \u00a7 There is no more Gold on Thomas. Jobs should now be submitted without specifying any -P or -A entries in your jobscript. Info 1 Gold unit is 1 hour of using 1 processor core. Troubleshooting: Unable to verify membership in project / Uninitialized value \u00a7 Unable to run job: Rejected by policyjsv Reason:Unable to verify sufficient material worth to submit this job: Unable to verify membership of mmmxxxx in the UCL_Example project This error from qsub can mean that you aren't in the project you are trying to submit to, but also happens when the Gold daemon is not running. Remove the -P and -A lines from your jobscript and submit jobs without any project specified. Use of uninitialized value in print at /opt/gold/bin/mybalance line 60, <GBALANCE> line 1. Failed sending message: (Unable to connect to socket (Connection refused)). The Gold database is uncontactable. Remove the -P and -A lines from your jobscript and submit jobs without any project specified. The Tier 2 SAFE \u00a7 SAFE is a service administration platform used by ARCHER and various of the Tier 2 sites. As a user, you can use it to do some management of your details and view your usage across all systems that send data to SAFE. See your usage data in SAFE \u00a7 If you wish, you can claim your Thomas account as belonging to you in the Tier 2 SAFE. This lets you view some individual usage reports, and if you have other Tier 2 accounts that also use SAFE, you use the same login information. You need to login at https://safe.epcc.ed.ac.uk or create a new Tier2 SAFE account if you do not have one. If creating a new account, you will be asked to create a password - this is for the SAFE login only and has no link to your Thomas account. On Thomas, run hashclaim . This will give you a link to claim your Thomas username's usage data. Visit this link when logged in to SAFE and it will tell you this account has been added to your SAFE account, and username@Thomas will now be visible in the 'Login accounts' menu at the top. Choosing that account will take you to a page where you can view your individual usage reports. If you do not claim your account, then SAFE only contains username/job usage information with no information about who owns that username. Points of Contact can use it to allocate Gold to your budgets. Update your SSH key via SAFE \u00a7 SAFE also gives you a second mechanism for changing your SSH key - changing the key you have associated with your SAFE account will automatically create a request for us to add that key to your Thomas account. (We still need to act on it, so it won't update immediately). Support \u00a7 Email rc-support@ucl.ac.uk with any support queries. It will be helpful to include Thomas in the subject along with some descriptive text about the type of problem, and you should mention your username in the body. Notional costs \u00a7 EPSRC contributed to the hardware, so there are two numbers to use for notional costs: Cost per core hour excluding hardware (to be charged on EPSRC grants): 0.6 pence / core hour Cost per core hour including hardware cost (to be charged on non-EPSRC grants): 1.5 pence / core hour Non-grant-funded projects should use the second figure. Acknowledging the use of Thomas in publications \u00a7 All work arising from this facility should be properly acknowledged in presentations and papers with the following text: \"We are grateful to the UK Materials and Molecular Modelling Hub for computational resources, which is partially funded by EPSRC (EP/P020194/1 and EP/T022213/1)\" MCC \u00a7 When publishing work that benefited from resources allocated by the MCC: please include the following acknowledgment: \"Via our membership of the UK's HEC Materials Chemistry Consortium, which is funded by EPSRC (EP/L000202), this work used the UK Materials and Molecular Modelling Hub for computational resources, MMM Hub, which is partially funded by EPSRC (EP/P020194 and EP/T022213)\" UKCP \u00a7 When publishing work that benefited from resources allocated by UKCP , please include: \"We are grateful for computational support from the UK Materials and Molecular Modelling Hub, which is partially funded by EPSRC (EP/P020194 and EP/T022213), for which access was obtained via the UKCP consortium and funded by EPSRC grant ref EP/P022561/1\"","title":"MMM Thomas"},{"location":"Clusters/Thomas/#thomas-technical-specs","text":"Thomas originally consisted of 720 Lenovo Intel x86-64 nodes, giving 17.2k cores in total, with Intel OmniPath interconnect (1:1 nonblocking in 36 node blocks, 3:1 between blocks and across the system). Each node has the following specs: 2 x 12 core Intel Broadwell processors (24 cores total) 128GB RAM 120GB SSD","title":"Thomas technical specs"},{"location":"Clusters/Thomas/#applying-for-an-account","text":"UCL users can contact David Scanlon or Scott Woodley for access to the post-retirement portion of Thomas. Thomas accounts belong to you as an individual and are applied for through your own institution's Point of Contact . You will need to supply an SSH public key, which is the only method used to log in.","title":"Applying for an account"},{"location":"Clusters/Thomas/#creating-an-ssh-key-pair","text":"An ssh key consists of a public and a private part, typically named id_rsa and id_rsa.pub by default. The public part is what we need. You must not share your private key with anyone else. You can copy it onto multiple machines belonging to you so you can log in from all of them (or you can have a separate pair for each machine).","title":"Creating an ssh key pair"},{"location":"Clusters/Thomas/#creating-an-ssh-key-in-linuxunixmac-os-x","text":"ssh-keygen -t rsa The defaults should give you a reasonable key. If you prefer to use ed25519 instead, and/or longer keys, you can. You can also tell it to create one with a different name, so it doesn't overwrite any existing key. Do not use DSA as OpenSSH 7.0 has deprecated it and does not use it by default on client or server. We no longer accept DSA keys. You will be asked to add a passphrase for your key. A blank passphrase is not recommended; if you use one please make sure that no one else ever has access to your local computer account. How often you are asked for a passphrase depends on how long your local ssh agent keeps it. You may need to run ssh-add to add the key to your agent so you can use it. If you aren't sure what keys your agent can see, running ssh-add -L will show all the public parts of the keys it is aware of.","title":"Creating an ssh key in Linux/Unix/Mac OS X"},{"location":"Clusters/Thomas/#creating-an-ssh-key-in-windows","text":"Have a look at Key-Based SSH Logins With PuTTY which has step-by-step instructions. You can choose whether to use Pageant or not to manage your key. You can again pick RSA, ED25519, ECDSA etc but do not pick SSH-1 as that is a very old and insecure key type. As above, DSA is no longer accepted. The key must be at least 2048-bit. If you are using Windows 10, then you probably have OpenSSH installed and could instead run ssh-keygen in a terminal per the Linux instructions and use the ssh command to log in instead of PuTTY.","title":"Creating an ssh key in Windows"},{"location":"Clusters/Thomas/#information-for-points-of-contact","text":"Points of Contact have some tools they can use to manage users and allocations, documented at MMM Points of Contact .","title":"Information for Points of Contact"},{"location":"Clusters/Thomas/#logging-in","text":"You will be assigned a personal username and your SSH key pair will be used to log in. External users will have a username in the form mmmxxxx (where xxxx is a number) and UCL users will use their central username. You ssh directly to: thomas.rc.ucl.ac.uk From inside the UCL VPN you can ssh directly into the above but from outside you can do the following: ssh -o ProxyJump=<UCL_user_ID>@ssh-gateway.ucl.ac.uk <thomas_user_ID>@thomas.rc.ucl.ac.uk","title":"Logging in"},{"location":"Clusters/Thomas/#ssh-timeouts","text":"Idle ssh sessions will be disconnected after 7 days.","title":"SSH timeouts"},{"location":"Clusters/Thomas/#using-the-system","text":"Thomas is a batch system. The login nodes allow you to manage your files, compile code and submit jobs. Very short (\\<15mins) and non-resource-intensive software tests can be run on the login nodes, but anything more should be submitted as a job.","title":"Using the system"},{"location":"Clusters/Thomas/#full-user-guide","text":"Thomas has the same user environment as RC Support's other clusters, so the User guide is relevant and is a good starting point for further information about how the environment works. Any variations that Thomas has should be listed on this page.","title":"Full user guide"},{"location":"Clusters/Thomas/#submitting-a-job","text":"Create a jobscript for non-interactive use and submit your jobscript using qsub . Jobscripts must begin #!/bin/bash -l in order to run as a login shell and get your login environment and modules. Jobs no longer need to specify what type of job it is (Gold, Free, Test) or the project it is being submitted for. (See Budgets and allocations below.)","title":"Submitting a job"},{"location":"Clusters/Thomas/#memory-requests","text":"Note: the memory you request is always per core, not the total amount. If you ask for 128GB RAM and 24 cores, that will run on 24 nodes using only one core per node. This allows you to have sparse process placement when you do actually need that much RAM per process.","title":"Memory requests"},{"location":"Clusters/Thomas/#monitoring-a-job","text":"In addition to qstat , nodesforjob $JOB_ID can be useful to see what proportion of cpu/memory/swap is being used on the nodes a certain job is running on. qexplain $JOB_ID will show you the full error for a job that is in Eqw status.","title":"Monitoring a job"},{"location":"Clusters/Thomas/#useful-utilities","text":"As well as nodesforjob , there are the following utilities which can help you find information about your jobs after they have run. jobhist - shows your job history for the last 24hrs by default, including start and end times and the head node it ran on. You can view a longer history by specifying --hours=100 for example. scriptfor $JOB_ID - show the script that was submitted for the given job. These utilities live in GitHub at https://github.com/UCL-RITS/go-clustertools and https://github.com/UCL-RITS/rcps-cluster-scripts","title":"Useful utilities"},{"location":"Clusters/Thomas/#software","text":"Thomas mounts the RC Systems software stack . Have a look at Software Guides for specific information on running some applications, including example scripts. The list there is not exhaustive. Access to software is managed through the use of modules. module avail shows all modules available. module list shows modules currently loaded. Access to licensed software may vary based on your host institution and project.","title":"Software"},{"location":"Clusters/Thomas/#requesting-software-installs","text":"To request software installs, email us at the support address below or open an issue on our GitHub . You can see what software has already been requested in the Github issues and can add a comment if you're also interested in something already requested.","title":"Requesting software installs"},{"location":"Clusters/Thomas/#installing-your-own-software","text":"You may install software in your own space. Please look at Compiling for tips.","title":"Installing your own software"},{"location":"Clusters/Thomas/#maintaining-a-piece-of-software-for-a-group","text":"It is possible for people to be given central areas to install software that they wish to make available to everyone or to a select group - generally because they are the developers or if they wish to use multiple versions or developer versions. The people given install access would then be responsible for managing and maintaining these installs.","title":"Maintaining a piece of software for a group"},{"location":"Clusters/Thomas/#licensed-software","text":"Reserved application groups exist for software that requires them. The group name will begin with leg or lg . After we add you to one of these groups, the central group change will happen overnight. You can check your groups with the groups command. Please let us know your username when you ask to be added to a group. CASTEP : You/your group leader need to have signed up for a CASTEP license . Send us an acceptance email, or we can ask them to verify you have a license. You will then be added to the reserved application group lgcastep . If you are a member of UKCP you are already covered by a license and just need to tell us when you request access. CRYSTAL : You/your group leader need to have signed up for an Academic license. Crystal Solutions will send an email saying an account has been upgraded to \"Academic UK\" - forward that to us along with confirmation from the group leader that you should be in their group. You will be added to the legcryst group. DL_POLY : has individual licenses for specific versions. Sign up at DL_POLY's website and send us the acceptance email they give you. We will add you to the appropriate version's reserved application group, eg lgdlp408 . Gaussian : not currently accessible for non-UCL institutions. UCL having a site license and another institute having a site license does not allow users from the other institute to run Gaussian on UCL-owned hardware. VASP : When you request access you need to send us the email address you are named on a VASP license using. You can also send name and email of the main VASP license holder along with the license number if you wish. We will then check in the VASP portal if we can add you. We will add you to the legvasp5 or legvasp6 reserved application groups depending on which versions you are licensed for. You may also install your own copy in your home, and we provide a simple build script on Github (tested with VASP 5.4.4, no patches). You need to download the VASP source code and then you can run the script following the instructions at the top. Molpro : Only UCL users are licensed to use our central copy and can request to be added to the lgmolpro reserved application group.","title":"Licensed software"},{"location":"Clusters/Thomas/#suggested-job-sizes","text":"The target job sizes for Thomas are 48-120 cores (2-5 nodes). Jobs larger than this may have a longer queue time and are better suited to ARCHER, and single node jobs may be more suited to your local facilities.","title":"Suggested job sizes"},{"location":"Clusters/Thomas/#maximum-job-resources","text":"Cores Max wallclock 864 48hrs On Thomas, interactive sessions using qrsh have the same wallclock limit as other jobs. Nodes in Thomas are 24 cores, 128G RAM. The default maximum jobsize is 864 cores, to remain within the 36-node 1:1 nonblocking interconnect zones. Jobs on Thomas do not share nodes . This means that if you request less than 24 cores, your job is still taking up an entire node and no other jobs can run on it, but some of the cores are idle. Whenever possible, request a number of cores that is a multiple of 24 for full usage of your nodes. There is a superqueue for use in exceptional circumstances that will allow access to a larger number of cores outside the nonblocking interconnect zones, going across the 3:1 interconnect between blocks. A third of each CU is accessible this way, roughly approximating a 1:1 connection. Access to the superqueue for larger jobs must be applied for: contact the support address below for details. Some normal multi-node jobs will use the superqueue - this is to make it easier for larger jobs to be scheduled, as otherwise they can have very long waits if every CU is half full.","title":"Maximum job resources"},{"location":"Clusters/Thomas/#queue-names","text":"On Thomas, users do not submit directly to queues - the scheduler assigns your job to one based on the resources it requested. The queues have somewhat unorthodox names as they are only used internally, and do not directly map to particular job types.","title":"Queue names"},{"location":"Clusters/Thomas/#preventing-a-job-from-running-cross-cu","text":"If your job must run within a single CU, you can request the parallel environment as -pe wss instead of -pe mpi ( wss standing for 'wants single switch'). This will increase your queue times. It is suggested you only do this for benchmarking or if performance is being greatly affected by running in the superqueue. back to top","title":"Preventing a job from running cross-CU"},{"location":"Clusters/Thomas/#node-types","text":"Thomas has one type of node. Type Cores per node RAM per node tmpfs Nodes K 24 128G 100G 705 Here are the processors each node type has: K: Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz (If you ever need to check this, you can include cat /proc/cpuinfo in your jobscript so you get it in your job's .o file for the exact node your job ran on. You will get an entry for every core).","title":"Node types"},{"location":"Clusters/Thomas/#disk-quotas","text":"Quotas were enabled on Thomas on 29 May 2019. You have one per-user quota, with a default amount of 250GB - this is the total across home and Scratch. lquota shows you your quota and total usage (twice). request_quota is how you request a quota increase. If you go over quota, you will no longer be able to create new files and your jobs will fail as they cannot write. Quota increases may be granted without further approval, depending on size and how full the filesystem is. Otherwise they may need to go to the Thomas User Group for approval. back to top","title":"Disk quotas"},{"location":"Clusters/Thomas/#budgets-and-allocations","text":"There is no more Gold on Thomas. Jobs should now be submitted without specifying any -P or -A entries in your jobscript. Info 1 Gold unit is 1 hour of using 1 processor core.","title":"Budgets and allocations"},{"location":"Clusters/Thomas/#troubleshooting-unable-to-verify-membership-in-project-uninitialized-value","text":"Unable to run job: Rejected by policyjsv Reason:Unable to verify sufficient material worth to submit this job: Unable to verify membership of mmmxxxx in the UCL_Example project This error from qsub can mean that you aren't in the project you are trying to submit to, but also happens when the Gold daemon is not running. Remove the -P and -A lines from your jobscript and submit jobs without any project specified. Use of uninitialized value in print at /opt/gold/bin/mybalance line 60, <GBALANCE> line 1. Failed sending message: (Unable to connect to socket (Connection refused)). The Gold database is uncontactable. Remove the -P and -A lines from your jobscript and submit jobs without any project specified.","title":"Troubleshooting: Unable to verify membership in project / Uninitialized value"},{"location":"Clusters/Thomas/#the-tier-2-safe","text":"SAFE is a service administration platform used by ARCHER and various of the Tier 2 sites. As a user, you can use it to do some management of your details and view your usage across all systems that send data to SAFE.","title":"The Tier 2 SAFE"},{"location":"Clusters/Thomas/#see-your-usage-data-in-safe","text":"If you wish, you can claim your Thomas account as belonging to you in the Tier 2 SAFE. This lets you view some individual usage reports, and if you have other Tier 2 accounts that also use SAFE, you use the same login information. You need to login at https://safe.epcc.ed.ac.uk or create a new Tier2 SAFE account if you do not have one. If creating a new account, you will be asked to create a password - this is for the SAFE login only and has no link to your Thomas account. On Thomas, run hashclaim . This will give you a link to claim your Thomas username's usage data. Visit this link when logged in to SAFE and it will tell you this account has been added to your SAFE account, and username@Thomas will now be visible in the 'Login accounts' menu at the top. Choosing that account will take you to a page where you can view your individual usage reports. If you do not claim your account, then SAFE only contains username/job usage information with no information about who owns that username. Points of Contact can use it to allocate Gold to your budgets.","title":"See your usage data in SAFE"},{"location":"Clusters/Thomas/#update-your-ssh-key-via-safe","text":"SAFE also gives you a second mechanism for changing your SSH key - changing the key you have associated with your SAFE account will automatically create a request for us to add that key to your Thomas account. (We still need to act on it, so it won't update immediately).","title":"Update your SSH key via SAFE"},{"location":"Clusters/Thomas/#support","text":"Email rc-support@ucl.ac.uk with any support queries. It will be helpful to include Thomas in the subject along with some descriptive text about the type of problem, and you should mention your username in the body.","title":"Support"},{"location":"Clusters/Thomas/#notional-costs","text":"EPSRC contributed to the hardware, so there are two numbers to use for notional costs: Cost per core hour excluding hardware (to be charged on EPSRC grants): 0.6 pence / core hour Cost per core hour including hardware cost (to be charged on non-EPSRC grants): 1.5 pence / core hour Non-grant-funded projects should use the second figure.","title":"Notional costs"},{"location":"Clusters/Thomas/#acknowledging-the-use-of-thomas-in-publications","text":"All work arising from this facility should be properly acknowledged in presentations and papers with the following text: \"We are grateful to the UK Materials and Molecular Modelling Hub for computational resources, which is partially funded by EPSRC (EP/P020194/1 and EP/T022213/1)\"","title":"Acknowledging the use of Thomas in publications"},{"location":"Clusters/Thomas/#mcc","text":"When publishing work that benefited from resources allocated by the MCC: please include the following acknowledgment: \"Via our membership of the UK's HEC Materials Chemistry Consortium, which is funded by EPSRC (EP/L000202), this work used the UK Materials and Molecular Modelling Hub for computational resources, MMM Hub, which is partially funded by EPSRC (EP/P020194 and EP/T022213)\"","title":"MCC"},{"location":"Clusters/Thomas/#ukcp","text":"When publishing work that benefited from resources allocated by UKCP , please include: \"We are grateful for computational support from the UK Materials and Molecular Modelling Hub, which is partially funded by EPSRC (EP/P020194 and EP/T022213), for which access was obtained via the UKCP consortium and funded by EPSRC grant ref EP/P022561/1\"","title":"UKCP"},{"location":"Clusters/Young/","text":"Young is the UK National Tier 2 High Performance Computing Hub in Materials and Molecular Modelling, and replacement for Thomas. Young went into pilot on 3 Aug 2020. Training resources \u00a7 The MMM Hub's Events and Training page contains useful information for new users and about specific software. In particular the \"Software Training\" section: A basic introduction video to Young , including details of hardware, how to submit jobs and an overview of types of parallelism A quick 4 minute overview of how to choose memory Longer videos on memory allocation for new users A hands-on memory allocation example MMM Hub: HPE / NVIDIA GPU Training Day \u00a7 The MMM Hub: HPE / NVIDIA GPU Training Day took place on 31 March 2022 and recordings of the talks are available at the link below. The day was split into two parts, \"Technology and Partner sessions (UCL, HPE & NVIDIA)\" which gave an overview of the new GPU nodes being added to Young and tools useful for GPU programming, followed by \"Materials community codes, experiences & lessons learned (invited speakers)\" which looked at how CASTEP, VASP, CP2K, GSGW and QMCpack had approached adding GPU support. MMM Hub: HPE / NVIDIA GPU Training Day Applying for an account \u00a7 Young accounts belong to you as an individual and are applied for through your own institution's Point of Contact . You will need to supply an SSH public key, which is the only method used to log in. Creating an ssh key pair \u00a7 An ssh key consists of a public and a private part, typically named id_rsa and id_rsa.pub by default. The public part is what we need. You must not share your private key with anyone else. You can copy it onto multiple machines belonging to you so you can log in from all of them (or you can have a separate pair for each machine). Creating an ssh key in Linux/Unix/Mac OS X \u00a7 ssh-keygen -t rsa The defaults should give you a reasonable key. If you prefer to use ed25519 instead, and/or longer keys, you can. You can also tell it to create one with a different name, so it doesn't overwrite any existing key. Do not use DSA as OpenSSH 7.0 has deprecated it and does not use it by default on client or server. We no longer accept DSA keys. You will be asked to add a passphrase for your key. A blank passphrase is not recommended; if you use one please make sure that no one else ever has access to your local computer account. How often you are asked for a passphrase depends on how long your local ssh agent keeps it. You may need to run ssh-add to add the key to your agent so you can use it. If you aren't sure what keys your agent can see, running ssh-add -L will show all the public parts of the keys it is aware of. Creating an ssh key in Windows \u00a7 Have a look at Key-Based SSH Logins With PuTTY which has step-by-step instructions. You can choose whether to use Pageant or not to manage your key. You can again pick RSA, ED25519, ECDSA etc but do not pick SSH-1 as that is a very old and insecure key type. As above, DSA is no longer accepted. The key must be at least 2048-bit. If you are using Windows 10, then you probably have OpenSSH installed and could instead run ssh-keygen in a terminal per the Linux instructions and use the ssh command to log in instead of PuTTY. Information for Points of Contact \u00a7 Points of Contact have some tools they can use to manage users and allocations, documented at MMM Points of Contact . Logging in \u00a7 You will be assigned a personal username and your SSH key pair will be used to log in. External users will have a username in the form mmmxxxx (where xxxx is a number) and UCL users will use their central username. You ssh directly to: young.rc.ucl.ac.uk SSH timeouts \u00a7 Idle ssh sessions will be disconnected after 7 days. Using the system \u00a7 Young is a batch system. The login nodes allow you to manage your files, compile code and submit jobs. Very short (\\<15mins) and non-resource-intensive software tests can be run on the login nodes, but anything more should be submitted as a job. Full user guide \u00a7 Young has the same user environment as RC Support's other clusters, so the User guide is relevant and is a good starting point for further information about how the environment works. Any variations that Young has should be listed on this page. Submitting a job \u00a7 Create a jobscript for non-interactive use and submit your jobscript using qsub . Jobscripts must begin #!/bin/bash -l in order to run as a login shell and get your login environment and modules. A job on Young must also specify what type of job it is (Gold, Free, Test) and the project it is being submitted for. (See Budgets and allocations below.) Memory requests \u00a7 Note: the memory you request is always per core, not the total amount. If you ask for 192GB RAM and 40 cores, that may run on 40 nodes using only one core per node. This allows you to have sparse process placement when you do actually need that much RAM per process. Young also has high memory nodes , where a job like this may run. If you want to avoid sparse process placement and your job taking up more nodes than you were expecting, the maximum memory request you can make when using all the cores in a standard node is 4.6G. Monitoring a job \u00a7 In addition to qstat , nodesforjob $JOB_ID can be useful to see what proportion of cpu/memory/swap is being used on the nodes a certain job is running on. qexplain $JOB_ID will show you the full error for a job that is in Eqw status. Useful utilities \u00a7 As well as nodesforjob , there are the following utilities which can help you find information about your jobs after they have run. jobhist - shows your job history for the last 24hrs by default, including start and end times and the head node it ran on. You can view a longer history by specifying --hours=100 for example. scriptfor $JOB_ID - show the script that was submitted for the given job. These utilities live in GitHub at https://github.com/UCL-RITS/go-clustertools and https://github.com/UCL-RITS/rcps-cluster-scripts Software \u00a7 Young mounts the RC Systems software stack . Have a look at Software Guides for specific information on running some applications, including example scripts. The list there is not exhaustive. Access to software is managed through the use of modules. module avail shows all modules available. module list shows modules currently loaded. Access to licensed software may vary based on your host institution and project. Loading and unloading modules \u00a7 Young has a newer version of modulecmd which tries to manage module dependencies automatically by loading or unloading prerequisites for you whenever possible. If you get an error like this: [uccaxxx@login01 ~]$ module unload compilers mpi Unloading compilers/intel/2018/update3 ERROR: compilers/intel/2018/update3 cannot be unloaded due to a prereq. HINT: Might try \"module unload default-modules/2018\" first. Unloading mpi/intel/2018/update3/intel ERROR: mpi/intel/2018/update3/intel cannot be unloaded due to a prereq. HINT: Might try \"module unload default-modules/2018\" first. You can use the -f option to force the module change. It will carry it out and warn you about modules it thinks are dependent. [uccaxxx@login01 ~]$ module unload -f compilers mpi Unloading compilers/intel/2018/update3 WARNING: Dependent default-modules/2018 is loaded Unloading mpi/intel/2018/update3/intel WARNING: Dependent default-modules/2018 is loaded Requesting software installs \u00a7 To request software installs, email us at the support address below or open an issue on our GitHub . You can see what software has already been requested in the Github issues and can add a comment if you're also interested in something already requested. Installing your own software \u00a7 You may install software in your own space. Please look at Compiling for tips. Maintaining a piece of software for a group \u00a7 It is possible for people to be given central areas to install software that they wish to make available to everyone or to a select group - generally because they are the developers or if they wish to use multiple versions or developer versions. The people given install access would then be responsible for managing and maintaining these installs. Licensed software \u00a7 Reserved application groups exist for software that requires them. The group name will begin with leg or lg . After we add you to one of these groups, the central group change will happen overnight. You can check your groups with the groups command. Please let us know your username when you ask to be added to a group. CASTEP : You/your group leader need to have signed up for a CASTEP license . Send us an acceptance email, or we can ask them to verify you have a license. You will then be added to the reserved application group lgcastep . If you are a member of UKCP you are already covered by a license and just need to tell us when you request access. CRYSTAL : You/your group leader need to have signed up for an Academic license. Crystal Solutions will send an email saying an account has been upgraded to \"Academic UK\" - forward that to us along with confirmation from the group leader that you should be in their group. You will be added to the legcryst group. DL_POLY : has individual licenses for specific versions. Sign up at DL_POLY's website and send us the acceptance email they give you. We will add you to the appropriate version's reserved application group, eg lgdlp408 . Gaussian : not currently accessible for non-UCL institutions. UCL having a site license and another institute having a site license does not allow users from the other institute to run Gaussian on UCL-owned hardware. VASP : When you request access you need to send us the email address you are named on a VASP license using. You can also send name and email of the main VASP license holder along with the license number if you wish. We will then check in the VASP portal if we can add you. We will add you to the legvasp5 or legvasp6 reserved application groups depending on which versions you are licensed for. You may also install your own copy in your home, and we provide a simple build script on Github (tested with VASP 5.4.4, no patches). You need to download the VASP source code and then you can run the script following the instructions at the top. Molpro : Only UCL users are licensed to use our central copy and can request to be added to the lgmolpro reserved application group. Suggested job sizes \u00a7 The target job sizes for Young are 2-5 nodes. Jobs larger than this may have a longer queue time and are better suited to ARCHER, and single node jobs may be more suited to your local facilities. Maximum job resources \u00a7 Cores Max wallclock 5120 48hrs These are numbers of physical cores: multiply by two for virtual cores with hyperthreads . On Young, interactive sessions using qrsh have the same wallclock limit as other jobs. Jobs on Young do not share nodes . This means that if you request less than 40 cores, your job is still taking up an entire node and no other jobs can run on it, but some of the cores are idle. Whenever possible, request a number of cores that is a multiple of 40 for full usage of your nodes. There is a superqueue for use in exceptional circumstances that will allow access to a larger number of cores outside the nonblocking interconnect zones, going across the interconnect between blocks. A third of each CU is accessible this way, roughly approximating a 1:1 connection. Access to the superqueue for larger jobs must be applied for: contact the support address below for details. Some normal multi-node jobs will use the superqueue - this is to make it easier for larger jobs to be scheduled, as otherwise they can have very long waits if every CU is half full. Preventing a job from running cross-CU \u00a7 If your job must run within a single CU, you can request the parallel environment as -pe wss instead of -pe mpi ( wss standing for 'wants single switch'). This will increase your queue times. It is suggested you only do this for benchmarking or if performance is being greatly affected by running in the superqueue. back to top Node types \u00a7 Young has four types of node: standard nodes, big memory nodes, really big memory nodes and GPU nodes. Note those last two have different processors and number of CPU cores per node. Type Cores per node RAM per node tmpfs Nodes Memory request necessary GPU C 40 192G None 576 Any None Y 40 1.5T None 3 mpi: mem >=19G, smp: >186G total None Z 36 3.0T None 3 mpi: mem >=42G, smp: >1530G total None X 64 1T 200G 6 Any 8 x Nvidia 40G A100 These are numbers of physical cores: multiply by two for virtual cores with hyperthreading. The 'memory request necessary' column shows what memory requests a job needs to make to be eligible for that node type. For MPI jobs it looks at the memory per slot requested. For SMP jobs they will go on the node that their total memory request (slots * mem) fits on. Here are the processors each node type has: C: Intel(R) Xeon(R) Gold 6248 CPU @ 2.50GHz Y: Intel(R) Xeon(R) Gold 6248 CPU @ 2.50GHz Z: Intel(R) Xeon(R) Gold 6240M CPU @ 2.60GHz X: dual AMD EPYC 7543 32-Core Processor (If you ever need to check this, you can include cat /proc/cpuinfo in your jobscript so you get it in your job's .o file for the exact node your job ran on. You will get an entry for every core). GPU nodes \u00a7 Now available for general use, for Free jobs only. There will be separate GPU Gold budgets in future. How to use the GPU nodes . Restricting to one node type \u00a7 The scheduler will schedule your job on the relevant nodetype based on the resources you request, but if you really need to specify the nodetype yourself, use: # Only run on Z-type nodes #$ -ac allow=Z Hyperthreading \u00a7 Young has hyperthreading enabled and you can choose on a per-job basis whether you want to use it. Hyperthreading lets you use two virtual cores instead of one physical core - some programs can take advantage of this. If you do not ask for hyperthreading, your job only uses one thread per core as normal. The -l threads= request is not a true/false setting, instead you are telling the scheduler you want one slot to block one virtual cpu instead of the normal situation where it blocks two. If you have a script with a threads request and want to override it on the command line or set it back to normal, the usual case is -l threads=2 . (Setting threads to 0 does not disable hyperthreading!) # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process export OMP_NUM_THREADS=2 This job would be using 80 physical cores, using 80 MPI processes each of which would create two threads (on Hyperthreads). Note that memory requests are now per virtual core with hyperthreading enabled. If you asked for #$ -l mem=4G on a node with 80 virtual cores and 192G RAM then you are requiring 320G RAM in total which will not fit on that node and so you would be given a sparse process layout across more nodes to meet this requirement. # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process # (a whole node's worth) export OMP_NUM_THREADS=80 This job would still be using 80 physical cores, but would use one MPI process per node which would create 80 threads on the node (on Hyperthreads). Diskless nodes \u00a7 Young nodes are diskless (have no local hard drives) - there is no $TMPDIR available, so you should not request -l tmpfs=10G in your jobscripts or your job will be rejected at submit time. If you need temporary space, you should use somewhere in your Scratch. Disk quotas \u00a7 You have one per-user quota, with a default amount of 250GB - this is the total across home and Scratch. lquota shows you your quota and total usage (twice). request_quota is how you request a quota increase. If you go over quota, you will no longer be able to create new files and your jobs will fail as they cannot write. Quota increases may be granted without further approval, depending on size and how full the filesystem is. Otherwise they may need to go to the MMM Hub User Group for approval. back to top Budgets and allocations \u00a7 We have enabled Gold for allocation management. Jobs that are run under a project budget have higher priority than free non-budgeted jobs. All jobs need to specify what project they belong to, whether they are paid or free. To see the name of your project(s) and how much allocation that budget has, run the command budgets . budgets Project Machines Balance -------- -------- -------- UCL_Test ANY 22781.89 Pilot users temporarily have access to a project for their institution, eg. Imperial_pilot. These will be deactivated after the pilot and no longer show up. Info 1 Gold unit is 1 hour of using 1 virtual processor core (= 0.5 physical core). Since Young has hyperthreading , a job asking for 40 physical cores and one asking for 80 virtual cores with hyperthreading on both cost the same amount: 80 Gold. Subprojects \u00a7 You might be in a subproject that does not itself have an allocation, but instead takes allocation from a different project: Project Machines Balance -------- -------- -------- UCL_physM ANY 474999.70 UCL_physM_Bowler ANY 0.00 In this case, you submit jobs using the subproject ( UCL_physM_Bowler here) even though it says it has 0 budget and it takes Gold from the superproject. Submitting a job under a project \u00a7 To submit a paid job that will take Gold from a particular project budget, add this to your jobscript: #$ -P Gold #$ -A MyProject To submit a free job that will not use up any Gold, use this instead: #$ -P Free #$ -A MyProject You can also submit testing jobs that will not use up any Gold, and will have higher priority than normal free jobs, but are limited to 2 nodes (80 cores) and 1 hour of walltime: #$ -P Test #$ -A MyProject Troubleshooting: Unable to verify membership in policyjsv project \u00a7 Unable to run job: Rejected by policyjsv Unable to verify membership of `<username>` in the policyjsv project You asked for a Free job but didn't specify #$ -A MyProject in your jobscript. Troubleshooting: Unable to verify membership in project / Uninitialized value \u00a7 Unable to run job: Rejected by policyjsv Reason:Unable to verify sufficient material worth to submit this job: Unable to verify membership of mmmxxxx in the UCL_Example project This error from qsub can mean that you aren't in the project you are trying to submit to, but also happens when the Gold daemon is not running. Use of uninitialized value in print at /opt/gold/bin/mybalance line 60, <GBALANCE> line 1. Failed sending message: (Unable to connect to socket (Connection refused)). If you also get this error from the budgets command, then the Gold daemon is definitely not running and you should contact rc-support. Gold charging \u00a7 When you submit a job, it will reserve the total number of core hours that the job script is asking for. When the job ends, the Gold will move from 'reserved' into charged. If the job doesn't run for the full time it asked for, the unused reserved portion will be refunded after the job ends. You cannot submit a job that you do not have the budget to run. Troubleshooting: Unable to verify sufficient material worth \u00a7 Unable to run job: Rejected by policyjsv Reason:Unable to verify sufficient material worth to submit this job: Insufficient balance to reserve job This means you don't have enough Gold to cover the cores \u2a09 wallclock time cost of the job you are trying to submit. You need to wait for queued jobs to finish and return unused Gold to your project, or submit a smaller/shorter job. Note that array jobs have to cover the whole cost of all the tasks at submit time. Job deletion \u00a7 If you qdel a submitted Gold job, the reserved Gold will be made available again. This is done by a cron job that runs every 15 minutes, so you may not see it back instantly. Reporting Gold usage \u00a7 There are a few commands that everyone can run that report Gold usage for their entire project, broken down by user. See Reporting from Gold . Requests for longer wallclock time \u00a7 You can apply for access to a 96-hour queue for Gold jobs only using this form: Wall clock request form The request must be sent to your local MMM Hub point of contact (PoC) who will evaluate the request and approve or reject it, as appropriate. The list of PoCs may be found on the MMM Hub website . Please complete the form and send it to your PoC. The request must include a clear and compelling justification of why the usual 48-hour wall time is insufficient, how a 96-hour wall time would alleviate the problem and what it will enable you to achieve scientifically. Justifications that are solely based on simplifying your workflow and job management will not be approved - clear reasoning must be provided for why it is either very difficult or impossible to work within a 48-hour wall time. Support \u00a7 Email rc-support@ucl.ac.uk with any support queries. It will be helpful to include Young in the subject along with some descriptive text about the type of problem, and you should mention your username in the body. Acknowledging the use of Young in publications \u00a7 All work arising from this facility should be properly acknowledged in presentations and papers with the following text: \"We are grateful to the UK Materials and Molecular Modelling Hub for computational resources, which is partially funded by EPSRC (EP/P020194/1 and EP/T022213/1)\" MCC \u00a7 When publishing work that benefited from resources allocated by the MCC: please include the following acknowledgment: \"Via our membership of the UK's HEC Materials Chemistry Consortium, which is funded by EPSRC (EP/L000202), this work used the UK Materials and Molecular Modelling Hub for computational resources, MMM Hub, which is partially funded by EPSRC (EP/P020194 and EP/T022213)\" UKCP \u00a7 When publishing work that benefited from resources allocated by UKCP , please include: \"We are grateful for computational support from the UK Materials and Molecular Modelling Hub, which is partially funded by EPSRC (EP/P020194 and EP/T022213), for which access was obtained via the UKCP consortium and funded by EPSRC grant ref EP/P022561/1\"","title":"MMM Hub Young"},{"location":"Clusters/Young/#training-resources","text":"The MMM Hub's Events and Training page contains useful information for new users and about specific software. In particular the \"Software Training\" section: A basic introduction video to Young , including details of hardware, how to submit jobs and an overview of types of parallelism A quick 4 minute overview of how to choose memory Longer videos on memory allocation for new users A hands-on memory allocation example","title":"Training resources"},{"location":"Clusters/Young/#mmm-hub-hpe-nvidia-gpu-training-day","text":"The MMM Hub: HPE / NVIDIA GPU Training Day took place on 31 March 2022 and recordings of the talks are available at the link below. The day was split into two parts, \"Technology and Partner sessions (UCL, HPE & NVIDIA)\" which gave an overview of the new GPU nodes being added to Young and tools useful for GPU programming, followed by \"Materials community codes, experiences & lessons learned (invited speakers)\" which looked at how CASTEP, VASP, CP2K, GSGW and QMCpack had approached adding GPU support. MMM Hub: HPE / NVIDIA GPU Training Day","title":"MMM Hub: HPE / NVIDIA GPU Training Day"},{"location":"Clusters/Young/#applying-for-an-account","text":"Young accounts belong to you as an individual and are applied for through your own institution's Point of Contact . You will need to supply an SSH public key, which is the only method used to log in.","title":"Applying for an account"},{"location":"Clusters/Young/#creating-an-ssh-key-pair","text":"An ssh key consists of a public and a private part, typically named id_rsa and id_rsa.pub by default. The public part is what we need. You must not share your private key with anyone else. You can copy it onto multiple machines belonging to you so you can log in from all of them (or you can have a separate pair for each machine).","title":"Creating an ssh key pair"},{"location":"Clusters/Young/#creating-an-ssh-key-in-linuxunixmac-os-x","text":"ssh-keygen -t rsa The defaults should give you a reasonable key. If you prefer to use ed25519 instead, and/or longer keys, you can. You can also tell it to create one with a different name, so it doesn't overwrite any existing key. Do not use DSA as OpenSSH 7.0 has deprecated it and does not use it by default on client or server. We no longer accept DSA keys. You will be asked to add a passphrase for your key. A blank passphrase is not recommended; if you use one please make sure that no one else ever has access to your local computer account. How often you are asked for a passphrase depends on how long your local ssh agent keeps it. You may need to run ssh-add to add the key to your agent so you can use it. If you aren't sure what keys your agent can see, running ssh-add -L will show all the public parts of the keys it is aware of.","title":"Creating an ssh key in Linux/Unix/Mac OS X"},{"location":"Clusters/Young/#creating-an-ssh-key-in-windows","text":"Have a look at Key-Based SSH Logins With PuTTY which has step-by-step instructions. You can choose whether to use Pageant or not to manage your key. You can again pick RSA, ED25519, ECDSA etc but do not pick SSH-1 as that is a very old and insecure key type. As above, DSA is no longer accepted. The key must be at least 2048-bit. If you are using Windows 10, then you probably have OpenSSH installed and could instead run ssh-keygen in a terminal per the Linux instructions and use the ssh command to log in instead of PuTTY.","title":"Creating an ssh key in Windows"},{"location":"Clusters/Young/#information-for-points-of-contact","text":"Points of Contact have some tools they can use to manage users and allocations, documented at MMM Points of Contact .","title":"Information for Points of Contact"},{"location":"Clusters/Young/#logging-in","text":"You will be assigned a personal username and your SSH key pair will be used to log in. External users will have a username in the form mmmxxxx (where xxxx is a number) and UCL users will use their central username. You ssh directly to: young.rc.ucl.ac.uk","title":"Logging in"},{"location":"Clusters/Young/#ssh-timeouts","text":"Idle ssh sessions will be disconnected after 7 days.","title":"SSH timeouts"},{"location":"Clusters/Young/#using-the-system","text":"Young is a batch system. The login nodes allow you to manage your files, compile code and submit jobs. Very short (\\<15mins) and non-resource-intensive software tests can be run on the login nodes, but anything more should be submitted as a job.","title":"Using the system"},{"location":"Clusters/Young/#full-user-guide","text":"Young has the same user environment as RC Support's other clusters, so the User guide is relevant and is a good starting point for further information about how the environment works. Any variations that Young has should be listed on this page.","title":"Full user guide"},{"location":"Clusters/Young/#submitting-a-job","text":"Create a jobscript for non-interactive use and submit your jobscript using qsub . Jobscripts must begin #!/bin/bash -l in order to run as a login shell and get your login environment and modules. A job on Young must also specify what type of job it is (Gold, Free, Test) and the project it is being submitted for. (See Budgets and allocations below.)","title":"Submitting a job"},{"location":"Clusters/Young/#memory-requests","text":"Note: the memory you request is always per core, not the total amount. If you ask for 192GB RAM and 40 cores, that may run on 40 nodes using only one core per node. This allows you to have sparse process placement when you do actually need that much RAM per process. Young also has high memory nodes , where a job like this may run. If you want to avoid sparse process placement and your job taking up more nodes than you were expecting, the maximum memory request you can make when using all the cores in a standard node is 4.6G.","title":"Memory requests"},{"location":"Clusters/Young/#monitoring-a-job","text":"In addition to qstat , nodesforjob $JOB_ID can be useful to see what proportion of cpu/memory/swap is being used on the nodes a certain job is running on. qexplain $JOB_ID will show you the full error for a job that is in Eqw status.","title":"Monitoring a job"},{"location":"Clusters/Young/#useful-utilities","text":"As well as nodesforjob , there are the following utilities which can help you find information about your jobs after they have run. jobhist - shows your job history for the last 24hrs by default, including start and end times and the head node it ran on. You can view a longer history by specifying --hours=100 for example. scriptfor $JOB_ID - show the script that was submitted for the given job. These utilities live in GitHub at https://github.com/UCL-RITS/go-clustertools and https://github.com/UCL-RITS/rcps-cluster-scripts","title":"Useful utilities"},{"location":"Clusters/Young/#software","text":"Young mounts the RC Systems software stack . Have a look at Software Guides for specific information on running some applications, including example scripts. The list there is not exhaustive. Access to software is managed through the use of modules. module avail shows all modules available. module list shows modules currently loaded. Access to licensed software may vary based on your host institution and project.","title":"Software"},{"location":"Clusters/Young/#loading-and-unloading-modules","text":"Young has a newer version of modulecmd which tries to manage module dependencies automatically by loading or unloading prerequisites for you whenever possible. If you get an error like this: [uccaxxx@login01 ~]$ module unload compilers mpi Unloading compilers/intel/2018/update3 ERROR: compilers/intel/2018/update3 cannot be unloaded due to a prereq. HINT: Might try \"module unload default-modules/2018\" first. Unloading mpi/intel/2018/update3/intel ERROR: mpi/intel/2018/update3/intel cannot be unloaded due to a prereq. HINT: Might try \"module unload default-modules/2018\" first. You can use the -f option to force the module change. It will carry it out and warn you about modules it thinks are dependent. [uccaxxx@login01 ~]$ module unload -f compilers mpi Unloading compilers/intel/2018/update3 WARNING: Dependent default-modules/2018 is loaded Unloading mpi/intel/2018/update3/intel WARNING: Dependent default-modules/2018 is loaded","title":"Loading and unloading modules"},{"location":"Clusters/Young/#requesting-software-installs","text":"To request software installs, email us at the support address below or open an issue on our GitHub . You can see what software has already been requested in the Github issues and can add a comment if you're also interested in something already requested.","title":"Requesting software installs"},{"location":"Clusters/Young/#installing-your-own-software","text":"You may install software in your own space. Please look at Compiling for tips.","title":"Installing your own software"},{"location":"Clusters/Young/#maintaining-a-piece-of-software-for-a-group","text":"It is possible for people to be given central areas to install software that they wish to make available to everyone or to a select group - generally because they are the developers or if they wish to use multiple versions or developer versions. The people given install access would then be responsible for managing and maintaining these installs.","title":"Maintaining a piece of software for a group"},{"location":"Clusters/Young/#licensed-software","text":"Reserved application groups exist for software that requires them. The group name will begin with leg or lg . After we add you to one of these groups, the central group change will happen overnight. You can check your groups with the groups command. Please let us know your username when you ask to be added to a group. CASTEP : You/your group leader need to have signed up for a CASTEP license . Send us an acceptance email, or we can ask them to verify you have a license. You will then be added to the reserved application group lgcastep . If you are a member of UKCP you are already covered by a license and just need to tell us when you request access. CRYSTAL : You/your group leader need to have signed up for an Academic license. Crystal Solutions will send an email saying an account has been upgraded to \"Academic UK\" - forward that to us along with confirmation from the group leader that you should be in their group. You will be added to the legcryst group. DL_POLY : has individual licenses for specific versions. Sign up at DL_POLY's website and send us the acceptance email they give you. We will add you to the appropriate version's reserved application group, eg lgdlp408 . Gaussian : not currently accessible for non-UCL institutions. UCL having a site license and another institute having a site license does not allow users from the other institute to run Gaussian on UCL-owned hardware. VASP : When you request access you need to send us the email address you are named on a VASP license using. You can also send name and email of the main VASP license holder along with the license number if you wish. We will then check in the VASP portal if we can add you. We will add you to the legvasp5 or legvasp6 reserved application groups depending on which versions you are licensed for. You may also install your own copy in your home, and we provide a simple build script on Github (tested with VASP 5.4.4, no patches). You need to download the VASP source code and then you can run the script following the instructions at the top. Molpro : Only UCL users are licensed to use our central copy and can request to be added to the lgmolpro reserved application group.","title":"Licensed software"},{"location":"Clusters/Young/#suggested-job-sizes","text":"The target job sizes for Young are 2-5 nodes. Jobs larger than this may have a longer queue time and are better suited to ARCHER, and single node jobs may be more suited to your local facilities.","title":"Suggested job sizes"},{"location":"Clusters/Young/#maximum-job-resources","text":"Cores Max wallclock 5120 48hrs These are numbers of physical cores: multiply by two for virtual cores with hyperthreads . On Young, interactive sessions using qrsh have the same wallclock limit as other jobs. Jobs on Young do not share nodes . This means that if you request less than 40 cores, your job is still taking up an entire node and no other jobs can run on it, but some of the cores are idle. Whenever possible, request a number of cores that is a multiple of 40 for full usage of your nodes. There is a superqueue for use in exceptional circumstances that will allow access to a larger number of cores outside the nonblocking interconnect zones, going across the interconnect between blocks. A third of each CU is accessible this way, roughly approximating a 1:1 connection. Access to the superqueue for larger jobs must be applied for: contact the support address below for details. Some normal multi-node jobs will use the superqueue - this is to make it easier for larger jobs to be scheduled, as otherwise they can have very long waits if every CU is half full.","title":"Maximum job resources"},{"location":"Clusters/Young/#preventing-a-job-from-running-cross-cu","text":"If your job must run within a single CU, you can request the parallel environment as -pe wss instead of -pe mpi ( wss standing for 'wants single switch'). This will increase your queue times. It is suggested you only do this for benchmarking or if performance is being greatly affected by running in the superqueue. back to top","title":"Preventing a job from running cross-CU"},{"location":"Clusters/Young/#node-types","text":"Young has four types of node: standard nodes, big memory nodes, really big memory nodes and GPU nodes. Note those last two have different processors and number of CPU cores per node. Type Cores per node RAM per node tmpfs Nodes Memory request necessary GPU C 40 192G None 576 Any None Y 40 1.5T None 3 mpi: mem >=19G, smp: >186G total None Z 36 3.0T None 3 mpi: mem >=42G, smp: >1530G total None X 64 1T 200G 6 Any 8 x Nvidia 40G A100 These are numbers of physical cores: multiply by two for virtual cores with hyperthreading. The 'memory request necessary' column shows what memory requests a job needs to make to be eligible for that node type. For MPI jobs it looks at the memory per slot requested. For SMP jobs they will go on the node that their total memory request (slots * mem) fits on. Here are the processors each node type has: C: Intel(R) Xeon(R) Gold 6248 CPU @ 2.50GHz Y: Intel(R) Xeon(R) Gold 6248 CPU @ 2.50GHz Z: Intel(R) Xeon(R) Gold 6240M CPU @ 2.60GHz X: dual AMD EPYC 7543 32-Core Processor (If you ever need to check this, you can include cat /proc/cpuinfo in your jobscript so you get it in your job's .o file for the exact node your job ran on. You will get an entry for every core).","title":"Node types"},{"location":"Clusters/Young/#gpu-nodes","text":"Now available for general use, for Free jobs only. There will be separate GPU Gold budgets in future. How to use the GPU nodes .","title":"GPU nodes"},{"location":"Clusters/Young/#restricting-to-one-node-type","text":"The scheduler will schedule your job on the relevant nodetype based on the resources you request, but if you really need to specify the nodetype yourself, use: # Only run on Z-type nodes #$ -ac allow=Z","title":"Restricting to one node type"},{"location":"Clusters/Young/#hyperthreading","text":"Young has hyperthreading enabled and you can choose on a per-job basis whether you want to use it. Hyperthreading lets you use two virtual cores instead of one physical core - some programs can take advantage of this. If you do not ask for hyperthreading, your job only uses one thread per core as normal. The -l threads= request is not a true/false setting, instead you are telling the scheduler you want one slot to block one virtual cpu instead of the normal situation where it blocks two. If you have a script with a threads request and want to override it on the command line or set it back to normal, the usual case is -l threads=2 . (Setting threads to 0 does not disable hyperthreading!) # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process export OMP_NUM_THREADS=2 This job would be using 80 physical cores, using 80 MPI processes each of which would create two threads (on Hyperthreads). Note that memory requests are now per virtual core with hyperthreading enabled. If you asked for #$ -l mem=4G on a node with 80 virtual cores and 192G RAM then you are requiring 320G RAM in total which will not fit on that node and so you would be given a sparse process layout across more nodes to meet this requirement. # request hyperthreading in this job #$ -l threads=1 # request the number of virtual cores #$ -pe mpi 160 # request 2G RAM per virtual core #$ -l mem=2G # set number of OpenMP threads being used per MPI process # (a whole node's worth) export OMP_NUM_THREADS=80 This job would still be using 80 physical cores, but would use one MPI process per node which would create 80 threads on the node (on Hyperthreads).","title":"Hyperthreading"},{"location":"Clusters/Young/#diskless-nodes","text":"Young nodes are diskless (have no local hard drives) - there is no $TMPDIR available, so you should not request -l tmpfs=10G in your jobscripts or your job will be rejected at submit time. If you need temporary space, you should use somewhere in your Scratch.","title":"Diskless nodes"},{"location":"Clusters/Young/#disk-quotas","text":"You have one per-user quota, with a default amount of 250GB - this is the total across home and Scratch. lquota shows you your quota and total usage (twice). request_quota is how you request a quota increase. If you go over quota, you will no longer be able to create new files and your jobs will fail as they cannot write. Quota increases may be granted without further approval, depending on size and how full the filesystem is. Otherwise they may need to go to the MMM Hub User Group for approval. back to top","title":"Disk quotas"},{"location":"Clusters/Young/#budgets-and-allocations","text":"We have enabled Gold for allocation management. Jobs that are run under a project budget have higher priority than free non-budgeted jobs. All jobs need to specify what project they belong to, whether they are paid or free. To see the name of your project(s) and how much allocation that budget has, run the command budgets . budgets Project Machines Balance -------- -------- -------- UCL_Test ANY 22781.89 Pilot users temporarily have access to a project for their institution, eg. Imperial_pilot. These will be deactivated after the pilot and no longer show up. Info 1 Gold unit is 1 hour of using 1 virtual processor core (= 0.5 physical core). Since Young has hyperthreading , a job asking for 40 physical cores and one asking for 80 virtual cores with hyperthreading on both cost the same amount: 80 Gold.","title":"Budgets and allocations"},{"location":"Clusters/Young/#subprojects","text":"You might be in a subproject that does not itself have an allocation, but instead takes allocation from a different project: Project Machines Balance -------- -------- -------- UCL_physM ANY 474999.70 UCL_physM_Bowler ANY 0.00 In this case, you submit jobs using the subproject ( UCL_physM_Bowler here) even though it says it has 0 budget and it takes Gold from the superproject.","title":"Subprojects"},{"location":"Clusters/Young/#submitting-a-job-under-a-project","text":"To submit a paid job that will take Gold from a particular project budget, add this to your jobscript: #$ -P Gold #$ -A MyProject To submit a free job that will not use up any Gold, use this instead: #$ -P Free #$ -A MyProject You can also submit testing jobs that will not use up any Gold, and will have higher priority than normal free jobs, but are limited to 2 nodes (80 cores) and 1 hour of walltime: #$ -P Test #$ -A MyProject","title":"Submitting a job under a project"},{"location":"Clusters/Young/#troubleshooting-unable-to-verify-membership-in-policyjsv-project","text":"Unable to run job: Rejected by policyjsv Unable to verify membership of `<username>` in the policyjsv project You asked for a Free job but didn't specify #$ -A MyProject in your jobscript.","title":"Troubleshooting: Unable to verify membership in policyjsv project"},{"location":"Clusters/Young/#troubleshooting-unable-to-verify-membership-in-project-uninitialized-value","text":"Unable to run job: Rejected by policyjsv Reason:Unable to verify sufficient material worth to submit this job: Unable to verify membership of mmmxxxx in the UCL_Example project This error from qsub can mean that you aren't in the project you are trying to submit to, but also happens when the Gold daemon is not running. Use of uninitialized value in print at /opt/gold/bin/mybalance line 60, <GBALANCE> line 1. Failed sending message: (Unable to connect to socket (Connection refused)). If you also get this error from the budgets command, then the Gold daemon is definitely not running and you should contact rc-support.","title":"Troubleshooting: Unable to verify membership in project / Uninitialized value"},{"location":"Clusters/Young/#gold-charging","text":"When you submit a job, it will reserve the total number of core hours that the job script is asking for. When the job ends, the Gold will move from 'reserved' into charged. If the job doesn't run for the full time it asked for, the unused reserved portion will be refunded after the job ends. You cannot submit a job that you do not have the budget to run.","title":"Gold charging"},{"location":"Clusters/Young/#troubleshooting-unable-to-verify-sufficient-material-worth","text":"Unable to run job: Rejected by policyjsv Reason:Unable to verify sufficient material worth to submit this job: Insufficient balance to reserve job This means you don't have enough Gold to cover the cores \u2a09 wallclock time cost of the job you are trying to submit. You need to wait for queued jobs to finish and return unused Gold to your project, or submit a smaller/shorter job. Note that array jobs have to cover the whole cost of all the tasks at submit time.","title":"Troubleshooting: Unable to verify sufficient material worth"},{"location":"Clusters/Young/#job-deletion","text":"If you qdel a submitted Gold job, the reserved Gold will be made available again. This is done by a cron job that runs every 15 minutes, so you may not see it back instantly.","title":"Job deletion"},{"location":"Clusters/Young/#reporting-gold-usage","text":"There are a few commands that everyone can run that report Gold usage for their entire project, broken down by user. See Reporting from Gold .","title":"Reporting Gold usage"},{"location":"Clusters/Young/#requests-for-longer-wallclock-time","text":"You can apply for access to a 96-hour queue for Gold jobs only using this form: Wall clock request form The request must be sent to your local MMM Hub point of contact (PoC) who will evaluate the request and approve or reject it, as appropriate. The list of PoCs may be found on the MMM Hub website . Please complete the form and send it to your PoC. The request must include a clear and compelling justification of why the usual 48-hour wall time is insufficient, how a 96-hour wall time would alleviate the problem and what it will enable you to achieve scientifically. Justifications that are solely based on simplifying your workflow and job management will not be approved - clear reasoning must be provided for why it is either very difficult or impossible to work within a 48-hour wall time.","title":"Requests for longer wallclock time"},{"location":"Clusters/Young/#support","text":"Email rc-support@ucl.ac.uk with any support queries. It will be helpful to include Young in the subject along with some descriptive text about the type of problem, and you should mention your username in the body.","title":"Support"},{"location":"Clusters/Young/#acknowledging-the-use-of-young-in-publications","text":"All work arising from this facility should be properly acknowledged in presentations and papers with the following text: \"We are grateful to the UK Materials and Molecular Modelling Hub for computational resources, which is partially funded by EPSRC (EP/P020194/1 and EP/T022213/1)\"","title":"Acknowledging the use of Young in publications"},{"location":"Clusters/Young/#mcc","text":"When publishing work that benefited from resources allocated by the MCC: please include the following acknowledgment: \"Via our membership of the UK's HEC Materials Chemistry Consortium, which is funded by EPSRC (EP/L000202), this work used the UK Materials and Molecular Modelling Hub for computational resources, MMM Hub, which is partially funded by EPSRC (EP/P020194 and EP/T022213)\"","title":"MCC"},{"location":"Clusters/Young/#ukcp","text":"When publishing work that benefited from resources allocated by UKCP , please include: \"We are grateful for computational support from the UK Materials and Molecular Modelling Hub, which is partially funded by EPSRC (EP/P020194 and EP/T022213), for which access was obtained via the UKCP consortium and funded by EPSRC grant ref EP/P022561/1\"","title":"UKCP"},{"location":"Installed_Software_Lists/module-packages/","text":"General Software Lists \u00a7 Our clusters have a wide range of software installed, available by using the modules system. The module files are organised by name, version, variant (where applicable) and, if relevant, the compiler version used to build the software. If no compiler version is given, either no compiler was required, or only the base system compiler ( /usr/bin/gcc ) and libraries were used. When we install applications, we try to install them on all of our clusters, but sometimes licence restrictions prevent it. If something seems to be missing, it may be because we are not able to provide it. Please contact us for more information if this is hindering your work. The lists below were last updated at 12:35:21 (+0100) on 10 Oct 2022, and are generated from the software installed on the Myriad cluster. Bundles \u00a7 Some applications or tools depend on a lot of other modules, or have some awkward requirements. For these, we sometimes make a \"bundle\" module in this section, that loads all the dependencies. For Python and R in particular, we also have recommended bundles that load the module for a recent version of Python or R, along with a collection of packages for it that have been requested by users, and the modules those packages require. The lists of Python and R packages installed for those bundles are on separate pages: Python packages R packages We'll sometimes include /new and /old versions of these bundles, if we've recently made a version switch or are intending to make one soon. We send out emails to the user lists about version changes, so if you use these bundles, you should look out for those. Module Description beta-modules This module adds the beta module space to your environment. bioperl/recommended Loads all the modules needed to use BioPerl. blic-modules Adds Cancer Biology supported modules to your environment. brunel-modules Adds Brunel licensed software module space to module avail. cancerit/20190218 adds UCL set of cancerit packages to your environment variables cancerit/recommended adds UCL recommended set of cancerit packages to your environment variables chemistry-modules Adds Chemistry Department supported modules to your environment. climate-tools/recommended Adds set of default applications to the environment for climate science users. deep_earth Sets up VASP, Gnuplot etc for Earth Sciences default-modules-aristotle Adds default Aristotle modules to your environment. default-modules/2015 Adds default modules to your environment. default-modules/2017 Adds default modules to your environment. default-modules/2018 Adds default modules to your environment. economics-modules Adds Economics Department modules to your environment. farr-modules Adds FARR supported modules to your environment. farr/recommended Adds set of default applications to the environment for FARR users. gmt/new Adds set of default modules to the environment for GMT users. gmt/old Adds set of default modules to the environment for gmt users. gmt/recommended Adds set of default modules to the environment for gmt users. imperial-modules Adds Imperial College licensed software module space to module avail. naglib/mark27-intel-2019 adds the NAG Library Mark 27 and required modules to your environment. octave/recommended Octave is an open source competitor to Matlab. personal-modules Adds personal modules to your environment. physics-modules Adds Pysics Department supported modules to your environment. pypy3/3.5-compat Adds UCL recommended set of Pypy3 python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/pypy-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/pypy-3.list python2/recommended Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-2.list python3/3.4 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/3.5 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/3.6 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/3.7 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/3.8 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/3.9 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/recommended Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list r/new adds UCL recommended set of R packages for R 4.2.0 to your environment variables r/old adds UCL recommended set of R packages to your environment for R 3.6.0 r/r-3.5.1_bc-3.7 adds UCL recommended set of R packages to your environment variables r/r-3.6.0_bc-3.9 adds UCL recommended set of R packages to your environment variables r/recommended adds UCL recommended set of R packages for R 4.2.0 to your environment variables rsd-modules Adds Research Software Development supported modules to your environment. thermo-modules Adds modules for Molecular Thermodynamics to your environment. torch-deps Loads the dependencies for Torch and makes a quick-install alias. workaround-modules This module adds the workarounds module space to your environment. Applications \u00a7 Module Description abaqus/2017 Adds Abaqus 2017 to your environment. abaqus/2017-intelmpi Adds Abaqus 2017 to your environment. abinit/9.6.2/intel-2018-update3 adds ABINIT Version 9.6.2 compiled using Intel 2018 to your environment. adf/2014.10 Adds ADF 2014.10 to your environment. afni/22.2.05 Adds AFNI to your environment. afni/20151030 Adds AFNI to your environment. afni/20181011 Adds AFNI to your environment. amber/14/mpi/intel-2015-update2 Adds AMBER 14 to your environment amber/14/openmp/intel-2015-update2 Adds AMBER 14 to your environment amber/14/serial/intel-2015-update2 Adds AMBER 14 to your environment amber/16/mpi/gnu-4.9.2 Adds AMBER 16 to your environment amber/16/mpi/intel-2015-update2 Adds AMBER 16 to your environment amber/16/openmp/gnu-4.9.2 Adds AMBER 16 to your environment amber/16/openmp/intel-2015-update2 Adds AMBER 16 to your environment amber/16/serial/gnu-4.9.2 Adds AMBER 16 to your environment amber/16/serial/intel-2015-update2 Adds AMBER 16 to your environment ansys/17.2 Adds Ansys CFX/Fluent etc to your environment ansys/18.0 Adds Ansys CFX/Fluent etc to your environment ansys/19.1 Adds Ansys CFX/Fluent, EM etc to your environment ansys/2019.r3 Adds Ansys CFX/Fluent, EM etc to your environment ansys/2021.r2 Adds Ansys CFX/Fluent, EM etc to your environment ants/2.1.0 Adds ANTs 2.1.0 (Advanced Normalization Tools) to your environment. ANTs is popularly considered a state-of-the-art medical image registration and segmentation toolkit. approxwf/gnu-4.9.2 Adds ApproxWF to your environment. arrayfire/3.5.0/gnu-4.9.2 Adds ArrayFire 3.5.0 to your environment. asp/2.6.2 Adds NASA Ames Stereo Pipeline (ASP) 6.2.2 to your environment. autodock/4.2.6 Adds AutoDock and AutoGrid 4.2.6 to your environment. AutoDock is a suite of automated docking tools. It is designed to predict how small molecules, such as substrates or drug candidates, bind to a receptor of known 3D structure. bamtools/2.4.0/gnu-4.9.2 Adds BamTools 2.4.0 to your environment. BamTools provides both a programmer's API and an end-user's toolkit for handling BAM files. bcftools/1.2/gnu-4.9.2 Adds BCFtools 1.2 to your environment. Reading/writing BCF2/VCF/gVCF files and calling/filtering/summarising SNP and short indel sequence variants bcftools/1.3.1/gnu-4.9.2 Adds BCFtools 1.3.1 to your environment. Reading/writing BCF2/VCF/gVCF files and calling/filtering/summarising SNP and short indel sequence variants bcftools/1.11/gnu-4.9.2 Tools for reading/writing BCF2/VCF/gVCF files and calling/filtering/summarising SNP and short indel sequence variants. bcftools/2.1/gnu-4.9.2 Adds BCFtools 1.2 to your environment. Reading/writing BCF2/VCF/gVCF files and calling/filtering/summarising SNP and short indel sequence variants bcl2fastq/1.8.4 Adds bcl2fastq 1.8.4 to your environment. bcl2fastq2/2.19.1 Adds bcl2fastq2 2.19.1 to your environment. bcl2fastq2/2.20.0-rpm Adds bcl2fastq2 2.20.0.422 from rpm to your environment. beast/2.3.0 Adds BEAST 2.3.0 with addons to your PATH. bedtools/2.25.0 Adds bedtools 2.25.0 to your environment. The bedtools utilities are a swiss-army knife of tools for a wide-range of genomics analysis tasks. bgen/1.1.4 Adds BGen 1.1.4 to your environment. blast+/2.2.30/intel-2015-update2 This module adds the BLAST+ 2.2.30 package to your environment. blast+/2.13.0/gnu-7.3.0 This module adds the BLAST+ 2.13.0 package to your environment. blast/2.2.26 Adds Blast 2.2.26 to your environment. blender/2.79 Adds Blender Version 2.79 to your environment. boltztrap/1.2.5/intel-2018 Adds boltztrap 1.2.5 to your environment. bowtie/1.1.2 Adds Bowtie 1.1.2 to your environment. bowtie2/2.2.5 Adds Bowtie2 2.2.5 to your environment. bwa/0.6.2/gnu-4.9.2 Adds BWA 0.7.12 to your environment. BWA is a software package for mapping DNA sequences against a large reference genome, such as the human genome. bwa/0.7.12/gnu-4.9.2 Adds BWA 0.7.12 to your environment. BWA is a software package for mapping DNA sequences against a large reference genome, such as the human genome. caffe/1.0/cpu Adds Caffe 1.0 for CPU to your environment. caffe/1.0/cudnn Adds Caffe 1.0 for CUDA+CudNN to your environment. caffe/1.0/gpu Adds Caffe 1.0 for CUDA to your environment. cancerit/20190218-python-2.7.12/gnu-4.9.2 Adds CancerIT program versions as of 20190218 to your environment. The CancerIT Suite is a collection of linked bioinformatics tools. cancerit/gnu-4.9.2 Adds the cancer it suite to your environment. castep/17.2/intel-2017 Adds castep 17.2 to your environment. CASTEP is a program that uses density functional theory to calculate the properties of materials from first principles. castep/17.21/intel-2017 Adds castep 17.21 to your environment. CASTEP is a program that uses density functional theory to calculate the properties of materials from first principles. castep/19.1.1/intel-2019 CASTEP is a program that uses density functional theory to calculate the properties of materials from first principles. cctools/5.4.1/gnu-4.9.2 Adds cctools 5.4.1 to your environment. cctools/7.0.11/gnu-4.9.2 Adds cctools 7.0.11 to your environment. cdo/2.0.6/gnu-10.2.0 This module adds the CDO 2.0.6 package to your environment. cellranger/5.0.1 Adds Cell Ranger 5.0.1 to your environment. Cell Ranger is a set of analysis pipelines that process Chromium single-cell RNA-seq output to align reads, generate feature-barcode matrices and perform clustering and gene expression analysis. cellranger/6.0.1 Adds Cell Ranger 6.0.1 to your environment. Cell Ranger is a set of analysis pipelines that process Chromium single-cell RNA-seq output to align reads, generate feature-barcode matrices and perform clustering and gene expression analysis. cesm/1.0.6/intel-2015-update2 Adds CESM 1.0.6 to your environment. cesm/1.2.2/intel-2015-update2 Adds CESM 1.2.2 to your environment. cfd-ace/2014.1 Adds CFD-ACE+ to your execution path. Only on Kathleen and Myriad. cfd-ace/2018.0 Adds CFD-ACE+ to your execution path. Only on Kathleen and Myriad. chemshell/3.7.1/mpi/gulp4.5 This is a modulefile for ChemShell 3.7.1, MPI+GULP version. Can be used to run other packages if you load a module for those. chemshell/3.7.1/standalone This is a modulefile for ChemShell 3.7.1, standalone serial version. Can be used to run GULP and other packages if you load a module for those. clustal-omega/1.2.1 Adds Clustal Omega 1.2.1 to your environment. clustal-w/2.1 Adds Clustal W 2.1 to your environment. cmg/2017.101 Adds CMG Reservoir Simulation Software Version 2017.101 to your environment. cmg/2018.101 Adds CMG Reservoir Simulation Software Version 2018.101 to your environment. cmg/2019.101 Adds CMG Reservoir Simulation Software Version 2019.101 to your environment. collectl/4.0.2 [collectl/4.0.2] collectl is a tool for tracking and monitoring various node usage statistics. compucell3d/3.7.4 Adds CompuCell3D to your environment comsol/6.0 COMSOL is a general-purpose macroscopic physics simulation package. comsol/52 Adds the COMSOL 52 binaries to your environment. COMSOL Multiphysics\u00ae is a general-purpose software platform, based on advanced numerical methods, for modeling and simulating physics-based problems. Module must be loaded once from a login node prior to running jobs. comsol/52a Adds the COMSOL 52a binaries to your environment. COMSOL Multiphysics\u00ae is a general-purpose software platform, based on advanced numerical methods, for modeling and simulating physics-based problems. Module must be loaded once from a login node prior to running jobs. comsol/53a Adds COMSOL Multiphysics Version 53a to your environment. comsol/56 Adds COMSOL Multiphysics Version 56 to your environment. cosi-corr/oct14 Adds COSI-Corr Version Oct14 for use with ENVI 5.5.2/5.5.3 to your environment. covid-19-spatial-sim/0.8.0/intel-2020 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.9.0/gnu-4.9.2 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.13.0/gnu-4.9.2 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.14.0/gnu-4.9.2 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.14.0/intel-2020 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.15.0/gnu-4.9.2 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.15.0/intel-2020 SpatialSim COVID-19 pandemic modelling tool from Imperial College. cp2k/4.1/ompi/gnu-4.9.2 Adds CP2K to your environment. cp2k/5.1/ompi-plumed/gnu-4.9.2 Adds CP2K to your environment. cp2k/5.1/ompi/gnu-4.9.2 Adds CP2K to your environment. cp2k/6.1/ompi/gnu-4.9.2 Adds CP2K to your environment. cp2k/7.1/ompi/gnu-4.9.2 Adds CP2K to your environment. cpmd/4.1/intel-2017 Adds CPMD 4.1 to your environment. crystal14/v1.0.3 Adds Crystal14 v1.0.3 to your environment. crystal14/v1.0.4 Adds Crystal14 v1.0.4 to your environment. crystal14/v1.0.4_2017 Adds Crystal14 v1.0.4 to your environment. crystal17/v1.0.1 Adds Crystal17 v1.0.1 to your environment. crystal17/v1.0.2/intel-2017 The CRYSTAL program computes the electronic structure of periodic systems within Hartree Fock, density functional or various hybrid approximations. cuba/4.2/gnu-4.9.2 adds Cuba Numerical Integration Package Version 4.2 to your environment. cufflinks/2.2.1 Adds Cufflinks 2.2.1 to your environment. curl/7.47.1/gnu-4.9.2 Adds curl 7.47.1 to your environment. dakota/6.12.0-bindist Dakota is a package for performing parametric analysis with other software packages. datamash/1.4 This is a module with no description string. deeptools/3.0.2 Adds deeptools to your environment. delly/0.7.8-bindist Delly is an integrated structural variant (SV) prediction method that can discover, genotype and visualize deletions, tandem duplications, inversions and translocations at single-nucleotide resolution in short-read massively parallel sequencing data. dftbplus/17.1/intel-2017 DFTB+ is a quantum mechanical simulation software package, based on the Density Functional Tight Binding (DFTB) method. dftbplus/18.2/intel-2018 DFTB+ is a software package for carrying out fast quantum mechanical atomistic calculations based on the Density Functional Tight Binding method. dftbplus/19.1/intel-2018 DFTB+ is a software package for carrying out fast quantum mechanical atomistic calculations based on the Density Functional Tight Binding method. dftbplus/dev/d07f92e/intel-2017 DFTB+ is a quantum mechanical simulation software package, based on the Density Functional Tight Binding (DFTB) method. dl_monte/2.07/intel-2018 DL_MONTE is an open-source program for applying Monte Carlo molecular simulation to a wide range of systems. dl_poly/4.07/intel-2015-update2 Adds DL_POLY 4.07 to your environment dl_poly/4.08-plumed-2.3.1/intel-2017 Adds dl_poly 4.08 to your environment. DL_POLY is a general purpose classical molecular dynamics (MD) simulation software developed at Daresbury Laboratory. This version has been linked against the PLUMED metadynamics library. dl_poly/4.08/intel-2015-update2 Adds DL_POLY 4.08 to your environment. dl_poly/4.09/intel-2018 Adds DL_POLY 4.09 to your environment. dl_poly/4.10.0/intel-2018 Adds DL_POLY 4.10.0 to your environment. DL_POLY is a general purpose classical molecular dynamics (MD) simulation software. dl_poly/5.0.0/intel-2018 DL_POLY is a general-purpose classical molecular dynamics (MD) simulation software package. dl_poly/classic/1.9/intel-2015-update2 Adds DL_POLY Classic 1.9 to your environment dock/6.9-impi/intel-2018 The DOCK suite of programs is designed to find favorable orientations of a ligand in a receptor. This is the Intel MPI build, intended for high-performance parallel runs. dock/6.9-reference/gnu-4.9.2 The DOCK suite of programs is designed to find favorable orientations of a ligand in a receptor. This is a reference build intended to be close to the version of the software the developers test with: a serial build using the GNU compilers. dos2unix/7.3 Adds dos2unix 7.3 to your environment. Text format converters dos2unix, unix2dos, mac2unix, unix2mac. dssp/3.0.0/gnu-4.9.2 Adds dssp 3.0.0 to your environment. DSSP calculates DSSP entries from Protein Databank (PDB) entries. dymola/2020.1-1 Dymola is a commercial modeling and simulation environment based on the open Modelica modeling language. ea-utils/822 Adds ea-utils to your environment. easylausanne/55c7bf0 Adds Easy Lausanne to your environment. eigensoft/6.1.1/gnu-4.9.2 Adds EIGENSOFT 6.1.1 to your environment. Population genetics methods and EIGENSTRAT stratification correction method. elk/4.0.15/intel-2018 Adds Elk 4.0.15 to your environment. Binary is elk. elk/4.0.15/intel-2018+wa Adds Elk 4.0.15 to your environment. Binary is elk. elk/4.3.6/intel-2017 Adds Elk 4.3.6 to your environment. Binary is elk. elk/4.3.6/intel-2017+wa Adds Elk 4.3.6 to your environment. Binary is elk. elk/5.2.14/intel-2018 Elk is an all-electron full-potential linearised augmented-planewave (FP-LAPW) code. elk/6.8.4/intel-2018 An all-electron full-potential linearised augmented-planewave (FP-LAPW) code. energyplus/8.9.0-bindist EnergyPlus\u2122 is a whole building energy simulation program that engineers, architects, and researchers use to model both energy consumption\u2014for heating, cooling, ventilation, lighting and plug and process loads\u2014and water use in buildings. energyplus/9.1.0-bindist EnergyPlus\u2122 is a whole building energy simulation program that engineers, architects, and researchers use to model both energy consumption\u2014for heating, cooling, ventilation, lighting and plug and process loads\u2014and water use in buildings. envi/5.5.2 Adds ENVI 5.5.2 with IDL 8.7.2 to your environment. envi/5.5.3 Adds ENVI 5.5.3 with IDL 8.7.3 to your environment. epacts/3.3.0/gnu-4.9.2 Adds EPACTS 3.3.0 to your environment. examl/8dcf2cc/gnu-4.9.2 Adds ExaML to your environment. exonerate/2.2.0 Adds Exonerate to your environment. fasta/36.3.8d/gnu-4.9.2 Adds the cancer it suite to your environment. fastqc/0.11.5 Adds FastQC 0.11.5 to your environment. A quality control application for high throughput sequence data. fastqc/0.11.8 Adds FastQC 0.11.8 to your environment. A quality control application for high throughput sequence data. ffmpeg/4.1/gnu-4.9.2 FFmpeg is a framework for encoding, decoding, muxing, demuxing, encoding, transcoding, streaming, filtering, and playing many types of audio and video media. fgbio/0.5.1 Adds fgbio to your environment. fgbio is a command line toolkit for working with genomic and particularly next generation sequencing data. fgbio/0.6.1 Adds fgbio to your environment. fgbio is a command line toolkit for working with genomic and particularly next generation sequencing data. figtree/1.4.2 Adds Figtree 1.4.2. foldx/4 Adds FoldX Suite 4.0 to your environment. foldx/5 Adds FoldX Suite 5.0 to your environment. freesurfer/5.3.0 Adds FreeSurfer 5.3.0 to your environment. FreeSurfer is a set of automated tools for reconstruction of the brain's cortical surface from structural MRI data, and overlay of functional MRI data onto the reconstructed surface. freesurfer/6.0.0 Adds FreeSurfer 6.0.0 to your environment. FreeSurfer is a set of automated tools for reconstruction of the brain's cortical surface from structural MRI data, and overlay of functional MRI data onto the reconstructed surface. freesurfer/7.2.0 Adds FreeSurfer 7.2.0 to your environment. FreeSurfer is a set of automated tools for reconstruction of the brain's cortical surface from structural MRI data, and overlay of functional MRI data onto the reconstructed surface. fsl/5.0.9 Adds FSL 5.0.9 (FMRIB Software Library) to your environment. FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data. fsl/5.0.10 Adds FSL 5.0.10 (FMRIB Software Library) to your environment. FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data. fsl/6.0.0 Adds FSL 6.0.0 (FMRIB Software Library) to your environment. FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data. fsl/6.0.0_cuda Adds FSL 6.0.0 CUDA (FMRIB Software Library) to your environment. FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data. fsl/6.0.4 Adds FSL 6.0.4 CUDA (FMRIB Software Library) to your environment. FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data. gamess/5Dec2014_R1/intel-2015-update2 Adds GAMESS 5Dec2014_R1 to your environment, built for Intel MPI. Uses ~/Scratch/gamess for USERSCR. You can override by exporting GAMESS_USERSCR as another path. gatk/3.4.46 Adds GATK 3.4.46 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gatk/3.8.0 Adds GATK 3.8.0 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gatk/4.0.3.0 Adds GATK 4.0.3.0 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gatk/4.0.8.0 Adds GATK 4.0.8.0 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gatk/4.2.1.0 Adds GATK 4.2.1.0 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gatk/4.2.5.0 Adds GATK 4.2.1.0 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gaussian/g09-c01_linda/pgi-2013.9 Adds Gaussian 09 Revision C01 and GaussView 5 to your environment. gaussian/g09-d01/pgi-2015.4 Adds Gaussian G09-D01 to your environment and also includes Linda and Gaussview 5. gaussian/g09-d01/pgi-2015.7 Adds Gaussian G09-D01 to your environment and also includes Linda and Gaussview 5 gaussian/g16-a03/pgi-2016.5 Adds Gaussian G16-A03 to your environment and also includes Linda and Gaussview 6. gaussian/g16-c01/pgi-2018.10 Adds Gaussian G16-C01 to your environment and also includes Linda and Gaussview 6. gcta/1.93.2beta GCTA: a tool for Genome-wide Complex Trait Analysis. gdal/2.0.0 Adds GDAL 2.0.0 to your environment variables. Works with Python 2. gdal/2.1.1 adds GDAL 2.1.1 with PROJ.4 4.9.1 to your environment variables. Works with Python 2. gdal/2.1.4 adds GDAL 2.1.4 with PROJ.4 6.1.0 to your environment variables. Works with Python 2. gdal/3.0.4/gnu-4.9.2 adds GDAL 3.0.4 with PROJ.4 6.1.0 to your environment variables. Works with Python 2. gephi/0.9.1 Adds Gephi Version 0.9.1 to your environment. ghostscript/9.16/gnu-4.9.2 Adds Ghostscript 9.16 to your environment. ghostscript/9.19/gnu-4.9.2 Adds Ghostscript 9.19 to your environment. gmsh/2.12.0-bindist Adds gmsh 2.12.0 to your environment. Gmsh is a free 3D finite element grid generator with a build-in CAD engine and post-processor. gmt/5.1.2 adds GMT 5.1.2 to your environment variables gmt/5.3.1 adds GMT 5.3.1 to your environment variables gmt/5.4.5 adds GMT 5.4.5 to your environment variables gnuplot/5.0.1 Adds gnuplot 5.0.1 to your environment. Gnuplot is a portable command-line driven graphing utility. grace/5.1.25 Adds Grace 5.1.25 to your environment. Grace is a 2D plotting tool. graphicsmagick/1.3.21 adds GraphicsMagick 1.3.21 to your environment variables graphviz/2.38.0/gnu-4.9.2 This module adds the Graphviz 2.38.0 package to your environment. Graphviz is open source graph visualization software. graphviz/2.40.1/gnu-4.9.2 This module adds the Graphviz 2.40.1 package to your environment. Graphviz is open source graph visualization software. groff/1.22.3/gnu-4.9.2 Adds GNU groff Version 1.22.3 to your environment. gromacs/5.0.4/intel-2015-update2 Adds GROMACS 5.0.4 to your environment, built using MKL gromacs/5.0.4/plumed/intel-2015-update2 Adds GROMACS 5.0.4 with Plumed 2.1.2 to your environment. Note: Plumed will always run in double precision even if GROMACS is single-precision, so only use that combination if you need it and are aware of the effects. gromacs/5.1.1/intel-2015-update2 Adds GROMACS 5.1.1 to your environment, built using MKL gromacs/5.1.1/plumed/intel-2015-update2 Adds GROMACS 5.1.1 with Plumed 2.2 to your environment. Note: Plumed will always run in double precision even if GROMACS is single-precision, so only use that combination if you need it and are aware of the effects. gromacs/5.1.3/plumed/intel-2015-update2 GROMACS 5.1.3 molecular dynamics package, built with Intel 2015u2 compilers, PLUMED 2.2.3 patches (including libmatheval), and OpenBLAS 0.2.14. gromacs/2016.3/intel-2017-update1 Adds GROMACS 2016.3 to your environment, built using MKL gromacs/2016.3/plumed/intel-2017-update1 GROMACS 2016.3 molecular dynamics package, built with Intel 2017u1 compilers, PLUMED 2.3.1 patches (including libmatheval), and OpenBLAS 0.2.14. gromacs/2016.4/plumed/intel-2017 GROMACS 2016.4 molecular dynamics package, built with Intel 2017u4 compilers, PLUMED 2.4.1 patches (including libmatheval) with hrex, and OpenBLAS 0.2.14. gromacs/2018.2/intel-2018 Adds gromacs 2018 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2018.3/intel-2018 Adds gromacs 2018 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2018.3/plumed/intel-2018 GROMACS 2018.3 molecular dynamics package, built with Intel 2018u3 compilers, PLUMED 2.4.3 patches (including libmatheval). gromacs/2018/intel-2017 Adds gromacs 2018 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2019.3/cuda-10 Adds gromacs 2019 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2019.3/intel-2018 Adds gromacs 2019 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2019.3/plumed/intel-2018 GROMACS 2019.3 molecular dynamics package, built with Intel 2018u3 compilers, PLUMED 2.5.2 patches (including libmatheval). gromacs/2021.3/plumed/gnu-10.2.0 GROMACS 2021.3 molecular dynamics package, built with GNU 10.2.0 compilers, PLUMED 2.7.2 patches (including libmatheval). gulp/4.5/intel-2018 Adds GULP 4.5 to your environment. Built with FoX and without plumed. GULP is a materials simulation code. gulp/5.1.1/intel-2018 Adds GULP 5.1.1 to your environment. Built with FoX and without plumed. GULP is a materials simulation code. gurobi/7.5.1 Adds Gurobi 7.5.1 to your environment. gurobi/8.1.1 Adds Gurobi 8.1.1 to your environment. gurobi/9.1.2 Adds Gurobi 9.1.2 to your environment. h5utils/1.12.1 Adds h5utils 1.12.1 to your environment. h5utils is a set of utilities for visualization and conversion of scientific data in HDF5 format. hammock/1.0.5 Loads the dependencies for Hammock 1.0.5 to your environment and makes a quick-install alias, do-hammock-install. Run as java -Xmx2g -jar $HAMMOCKPATH/Hammock.jar mode param1 param2 -d outputpath. Will use Scratch for temporary files. hhsuite/3.0-beta.1/gnu-4.9.2 Adds hhsuite 3.0-beta.1 to your environment. hmmer/3.1b2 Adds HMMER 3.1b2 to your environment. hoomd-blue/2.4.2 Adds HOOMD-blue to your environment. hopspack/2.0.2/gnu-4.9.2 Adds HOPSPACK 2.0.2 to your environment hopspack/2.0.2/intel-2017 Adds HOPSPACK 2.0.2 to your environment icommands/4.1.7 [icommands/4.1.7] The iRODS iCommands are the command-line clients to an iRODS system. idl/8.4.1 Adds IDL 8.4.1 to your environment. idl/8.7.3 Adds IDL 8.7.3 to your environment. illustrate/20190807 adds Illustrate to your environment variables impute2/2.3.2 adds Impute2 V2.3.2 to your environment. inetutils/1.9.4 GNU inetutils is a package of utilities for performing a range of network tasks including FTP and telnet clients. intltool/0.51.0 Adds intltool 0.51.0 to your environment. intltool is a set of tools to centralize translation of many different file formats using GNU gettext-compatible PO files. iva/0.11.6 Adds IVA 0.11.6 to your environment. iva/1.0.0 Adds IVA 1.0.0 to your environment. jags/3.4.0/gnu.4.9.2-atlas Adds JAGS 3.4.0 to your environment. jags/3.4.0/gnu.4.9.2-openblas Adds JAGS 3.4.0 to your environment. jags/4.2.0/gnu.4.9.2-openblas Adds JAGS 4.2.0 to your environment. jq/1.5/gnu-4.9.2 adds jq for GCC 4.9.2 to your environment. jq/1.6-bindist jq is a lightweight and flexible command-line JSON processor. kallisto/v0.42.5 Adds Kallisto v0.42.5 to your environment. kallisto/v0.46.1 Adds Kallisto v0.46.1 to your environment. keras/2.2.4 Adds Keras to your environment. kmc/2.1.1/gnu-4.9.2 Adds KMC 2.1.1 to your environment. KMC is a disk-based program for counting k-mers from FASTQ/FASTA files. knitro/12.0.0/gnu-4.9.2 Adds Knitro solver 12.0.0 to your environment. knitro/12.4.0/gnu-4.9.2 Adds Knitro solver 12.4.0 to your environment. lammps/3Mar20/plumed-colvars/intel-2018 Adds LAMMPS 3Mar20 to your environment. LAMMPS is a GPL molecular dynamics code which shows exceptional scaling on a wide variety of machines. Binary is lmp_mpi or lmp_default. This version was built with packages kspace, manybody, molecule, rigid, lib-linalg, user-colvars and user-plumed. lammps/7Aug19/basic/intel-2018 Adds LAMMPS 7Aug19 to your environment. Binary is lmp_default. lammps/7Aug19/gpu/intel-2018 Adds LAMMPS 7Aug19 to your environment. Binary is lmp_default. lammps/7Aug19/userintel/intel-2018 Adds LAMMPS 7Aug19 to your environment. Binary is lmp_default. lammps/8Dec15/intel-2015-update2 Adds LAMMPS 8Dec15 to your environment. Binary is lmp_default. lammps/10Feb15/intel-2015-update2 Adds LAMMPS 10Feb15 to your environment. Binary is lmp_default. lammps/13Apr17/intel-2017 Adds LAMMPS 13Apr17 to your environment. Binary is lmp_default. lammps/16Mar18/basic/intel-2018 Adds LAMMPS 16Mar18 to your environment. Binary is lmp_default. lammps/16Mar18/gpu/intel-2018 Adds LAMMPS 16Mar18 to your environment. Binary is lmp_default. lammps/16Mar18/intel-2017 Adds LAMMPS 16Mar18 to your environment. Binary is lmp_default. lammps/16Mar18/userintel/intel-2018 Adds LAMMPS 16Mar18 to your environment. Binary is lmp_default. lynx/2.8.9 Adds Lynx Version 2.8.9 to your environment. mathematica/10.1.0 Adds Mathematica 10.1.0 to your environment. mathematica/10.2.0 Adds Mathematica 10.2.0 to your environment. mathematica/10.4.0 Adds Mathematica 10.4.0 to your environment. mathematica/11.0.1 Adds Mathematica 11.0.1 to your environment. mathematica/11.2.0 Adds Mathematica 11.2 to your environment. mathematica/11.3.0 Adds Mathematica 11.3 to your environment. mathematica/12.2.0 Adds Mathematica 12.2 to your environment. mathematica/13.1.0 Adds Mathematica 13.1 to your environment. matlab/full/r2015a/8.5 Adds Matlab R2015a for SPM to your environment. matlab/full/r2015b/8.6 Adds Matlab R2015b to your environment. matlab/full/r2016b/9.1 Adds Matlab R2016b to your environment. matlab/full/r2017a/9.2 Adds Matlab R2017a to your environment. matlab/full/r2018a/9.4 Adds Matlab R2018a to your environment. matlab/full/r2018b/9.5 Adds Matlab R2018b to your environment. matlab/full/r2019b/9.7 Adds Matlab R2019b to your environment. matlab/full/r2021a/9.10 Adds Matlab R2021a to your environment. mcl/14-137 Adds MCL 14-137 your environment. meep/1.3-ompi/gnu-4.9.2 Adds meep 1.3-ompi to your environment. meep/1.3/gnu-4.9.2 Adds meep 1.3 to your environment. meep/1.11.0-ompi/gnu-4.9.2 Adds meep 1.11.0-ompi to your environment. MEEP is a package for electromagnetics simulation via the finite-diffe rence time-domain (FDTD) method. meme/4.10.1_4 Adds MEME Suite 4.10.1_4 to your environment. The MEME Suite: Motif-based sequence analysis tools. This install is for the command-line tools and connects to their website for further analysis. Web: http://meme-suite.org mgltools/1.5.6 Adds MGLTools 1.5.6 to your environment. Applications for visualization and analysis of molecular structures. Contains AutoDockTools (ADT), Python Molecular Viewer (PMV) and Vision. mirdeep/2.0.0.7 Adds mirdeep 2.0.0.7 to your environment. molden/5.2.2 Adds Molden 5.2.2 to your environment. molpro/2012.1.25/gnu-4.9.2 Adds Molpro to your environment molpro/2015.1.3 Adds Molpro 2015.1.3 binary (no Infiniband support) to your environment. molpro/2015.1.5/intel-2015-update2 Adds Molpro 2015.1.5 built from source with MPI to your environment. molpro/2020.1/openmp Adds Molpro 2020.1 mpi binary to your environment. mosek/9.1.12 Adds Mosek 9.1.12 to your environment. mothur/1.41.3-bindist Mothur is an expandable, multi-purpose bioinformatics tool aimed at microbial ecology. mpb/1.5-ompi/gnu-4.9.2 Adds mpb 1.5 to your environment. mpb/1.5/gnu-4.9.2 Adds mpb 1.5 to your environment. mpb/1.9.0-hdf5-ompi/gnu-4.9.2 Adds serial mpb 1.9.0 to your environment. Built with HDF5-ompi for use by parallel MEEP. mrbayes/3.2.5/mpi/intel-2015-update2 Adds MrBayes 3.2.5 to your environment mrbayes/3.2.5/serial/intel-2015-update2 Adds MrBayes 3.2.5 to your environment mrtrix/0.3.12/nogui Adds MRtrix3 0.3.12 to your environment. MRtrix3 provides a set of tools to perform analysis of diffusion MRI data, based around the concept of spherical deconvolution and probabilistic tractography. Note: mrview and shview cannot be run over a remote X11 connection so are not usable. mrtrix/0.3.16/gnu-4.9.2/nogui MRtrix provides a set of tools to perform various advanced diffusion MRI analyses, including constrained spherical deconvolution (CSD), probabilistic tractography, track-density imaging, and apparent fibre density. mrtrix/3.0rc3/gnu-4.9.2/nogui Adds MRtrix 3.0RC3 to your environment. mstor/2013/gnu-4.9.2 MSTor is a program for calculating partition functions, free energies, enthalpies, entropies, and heat capacities of complex molecules including torsional anharmonicity. mumax/3.9.3 Adds Mumax 3.9.3 to your environment. mumax/3.10-bindist mumax3 is a GPU-accelerated micromagnetic simulation program. mummer/3.23/gnu-4.9.2 Adds MUMmer 3.23 to your environment. MUMmer is a system for rapidly aligning entire genomes, whether in complete or draft form. muscle/3.8.31 Adds MUSCLE 3.8.31 to your environment. mutect/1.1.7 Adds MuTect 1.1.7 to your environment. MuTect is a GATK-based variant caller specialized for somatic/cancer variants. namd/2.10/intel-2015-update2 Adds NAMD 2.10 to your environment namd/2.11/intel-2015-update2 Adds NAMD 2.11 to your environment namd/2.12/intel-2015-update2 Adds NAMD 2.12 to your environment namd/2.12/intel-2017-update1 Adds NAMD 2.12 to your environment namd/2.12/intel-2018-update3 Adds NAMD 2.12 to your environment namd/2.13/intel-2018-update3 Adds NAMD 2.13 to your environment namd/2.13/plumed/intel-2018-update3 Adds NAMD 2.13 to your environment namd/2.14/multicore-gpu NAMD is a parallel molecular dynamics code designed for high-performance simulation of large biomolecular systems. This is NAMD's Linux-x86_64-multicore-CUDA binary. namd/2.14/ofi-smp-gpu/intel-2019 Adds NAMD 2.14 OFI-SMP-GPU version to your environment. This version should be run using charmrun. namd/2.14/ofi-smp/intel-2019 Adds NAMD 2.14 OFI-SMP version to your environment. This version should be run using charmrun. namd/2.14/ofi/intel-2019 Adds NAMD 2.14 OFI version to your environment. This version should be run using charmrun. nco/4.5.0 Adds nco to your environment. nektar++/4.3.5-impi/intel-2017-update1 Adds Nektar++ Version 4.3.5 to your environment nektar++/4.3.5-ompi/gnu-4.9.2 Adds Nektar++ Version 4.3.5 to your environment ngsutils/0.5.9 Adds a set of python scripts for handling various NGS tasks to your environment. nighres/1.1.0b Adds Nighres to your environment. nonmem/7.3.0/gnu-4.9.2 Adds NONMEM 7.3.0 using GCC Fortran 4.9.2 to your environment. nonmem/7.3.0/intel-2015-update2 Adds NONMEM 7.3.0 using Intel Fortran 2015 to your environment. novocraft/3.04.06 Adds novocraft 3.04.06 to your environment. Novocraft is a set of tools for bioinformatics, including Novoalign for short-read mapping. nwchem/6.5-r26243/atlas/intel-2015-update2 Adds NWChem 6.5 revision 26243 to your PATH, creates symlink to global .nwchemrc. You may need to alter/remove any old ~/.nwchemrc. Built with Python 2.7 interface and ATLAS. Global .nwchemrc: /shared/ucl/apps/nwchem/6.5-r26243-atlas/intel-2015-update2.nwchemrc nwchem/6.5-r26243/intel-2015-update2 Adds NWChem 6.5 revision 26243 to your PATH, creates symlink to global .nwchemrc. You may need to alter/remove any old ~/.nwchemrc. Built with Python 2.7 interface and MKL with ScaLAPACK. Global .nwchemrc: /shared/ucl/apps/nwchem/6.5-r26243/intel-2015-update2/.nwchemrc nwchem/6.6-r27746/intel-2015-update2 Adds NWChem 6.6 revision 27746 patched 2016-01-20 to your PATH, creates symlink to global .nwchemrc. You may need to alter/remove any old ~/.nwchemrc. Built with Python 2.7 interface and MKL with ScaLAPACK. Global .nwchemrc: /shared/ucl/apps/nwchem/6.6-r27746/intel-2015-update2/.nwchemrc nwchem/6.6-r27746/intel-2017 Adds NWChem 6.6 revision 27746 patched 2016-01-20 to your PATH, creates symlink to global .nwchemrc. You may need to alter/remove any old ~/.nwchemrc. Built with Python 2.7 interface and MKL with ScaLAPACK. Global .nwchemrc: /shared/ucl/apps/nwchem/6.6-r27746/intel-2017/.nwchemrc nwchem/6.8-47-gdf6c956/intel-2017 Adds NWChem 6.8 47-gdf6c956 to your PATH, creates symlink to global .nwchemrc. You may need to alter/remove any old ~/.nwchemrc. Built with Python 2.7 interface and MKL with ScaLAPACK. Global .nwchemrc: /shared/ucl/apps/nwchem/6.8-47-gdf6c956/intel-2017/.nwchemrc oasislmf/1.2.4 Oasis LMF 1.2.4 oasislmf/ktools/3.0.3/gnu-4.9.2 OasisLMF ktools package built with the GNU compilers oasislmf/ktools/f92a41f/gnu-4.9.2 OasisLMF ktools package built with the GNU compilers octave/4.4.1 Octave is an open source competitor to Matlab which is mostly compatible with Matlab. octopus/4.1.2-impi/intel-2015-update2 Adds octopus 4.1.2 to your environment. octopus/4.1.2/intel-2015-update2 Adds octopus 4.1.2 to your environment. octopus/5.0.1-ompi/gnu-4.9.2 Adds octopus 5.0.1 to your environment. octopus/5.0.1/gnu-4.9.2 Adds octopus 5.0.1 to your environment. octopus/6.0-ompi/gnu-4.9.2 Adds octopus 6.0 to your environment. octopus/6.0/gnu-4.9.2 Adds octopus 6.0 to your environment. openbabel/2.4.1/gnu-4.9.2 OpenBabel is a library and command-line tool for manipulating and converting between various chemistry file formats. opencv/2.4.13/gnu-4.9.2 Adds OpenCV 2.4.13 to your environment. Open Source Computer Vision Library. opencv/3.4.1/gnu-4.9.2 Adds OpenCV 3.4.1 to your environment. Open Source Computer Vision Library. openfoam/2.3.1/intel-2015-update2 Adds OpenFOAM 2.3.1 to your environment openfoam/2.4.0/intel-2017-update1 Adds OpenFOAM 2.4.0 to your environment openfoam/7.20200120/gnu-7.3.0 Adds OpenFOAM 7 to your environment openfoamplus/v1706/gnu-4.9.2 Adds OpenFOAMplus v1706 to your environment openfoamplus/v1906/gnu-7.3.0 Adds OpenFOAMplus v1906 to your environment openfoamplus/v1906/gnu-7.3.0-64 Adds OpenFOAMplus v1906 with 64 bit labels to your environment openfoamplus/v2112/gnu-7.3.0-64 Adds OpenFOAMplus v2112 with 64 bit labels to your environment openmm/7.3.1/cuda-10 Adds OpenMM to your environment. openmm/7.3.1/gnu-4.9.2 Adds OpenMM to your environment. openmx/3.8.3 Adds OpenMX 3.8.3 to your environment. optimet/1.0.1/gnu-4.9.2 Adds Optimet to your environment. orca/4.2.1-bindist/gnu-4.9.2 ORCA is an ab initio, DFT, and semiempirical SCF-MO package. p7zip/15.09/gnu-4.9.2 Adds p7zip 15.09 to your environment. To expand 7z files: 7za x archive.7z p7zip/16.02/gnu-4.9.2 p7zip is a port of the command-line version of the 7-zip file compression tool to UNIX-like systems. pandoc/1.19.2.1 Adds pandoc Version 1.19.2.1 to your environment. parallel/20181122 GNU parallel is a shell tool for executing jobs in parallel using one or more computers. paraview/5.3.0 This module adds the ParaView 5.3.0 binaries to your environment. ParaView is an open-source, multi-platform data analysis and visualization application. paraview/5.10.1 This module adds the ParaView 5.10.1 binaries to your environment. ParaView is an open-source, multi-platform data analysis and visualization application. parmed/3.2.0 Adds ParmEd to your environment. petsc/3.12.1/gnu-4.9.2 Adds Petsc 3.12.1 to your environment phon/1.39/gnu-4.9.2 Adds Phon 1.3.9 with addons to your PATH. phon/1.43/gnu-4.9.2 Adds Phon 1.43 with addons to your PATH. picard-tools/1.136 Adds Picard Tools 1.136 to your environment. If using the java -jar command, you should pass TMP_DIR=$TMPDIR to Picard. picard-tools/2.18.9 Adds Picard Tools to your environment. If using the java -jar command, you should pass TMP_DIR=$TMPDIR to Picard. platypus/3e72641 Adds Platypus to your environment. plink/1.07 Adds Plink 1.07 with addons to your PATH. plink/1.90b3.40 Adds PLINK 1.90b3.40 to your environment. A comprehensive update to the PLINK association analysis toolset. plink/2.0alpha-git Adds PLINK 2.0 alpha to your environment. A comprehensive update to the PLINK association analysis toolset. plumed/2.1.2/intel-2015-update2 Adds PLUMED 2.1.2 to your environment, built using OpenBLAS plumed/2.2.3/intel-2015-update2 Adds PLUMED 2.2.3 to your environment, built using OpenBLAS and libmatheval plumed/2.2/intel-2015-update2 Adds PLUMED 2.2 to your environment, built using OpenBLAS plumed/2.3.1/intel-2017-update1 Adds PLUMED 2.3.1 to your environment, built using OpenBLAS and libmatheval plumed/2.4.1/gnu-4.9.2 Adds PLUMED 2.4.1 to your environment, built using OpenBLAS and libmatheval plumed/2.4.1/intel-2017-update4 Adds PLUMED 2.4.1 to your environment, built using OpenBLAS and libmatheval plumed/2.4.3/intel-2018 Adds PLUMED 2.4.3 to your environment, built using MKL and libmatheval plumed/2.5.2/intel-2018 Adds PLUMED 2.5.2 to your environment, built using MKL and libmatheval plumed/2.6.0/intel-2018 Adds PLUMED 2.6.0 to your environment, built using MKL and libmatheval plumed/2.7.2/gnu-10.2.0 Adds PLUMED 2.7.2 to your environment, built using GCC, OpenBLAS and libmatheval. PLUMED is a plugin that works with a large number of molecular dynamics codes. plumed/2.7.2/intel-2020 Adds PLUMED 2.7.2 to your environment, built using MKL and libmatheval. PLUMED is a plugin that works with a large number of molecular dynamics codes. postgres+postgis/9.5.3+2.2.2/gnu-4.9.2 Adds postgres+postgis 9.5.3+2.2.2 to your environment. PostgreSQL is a relational database, and PostGIS is a geographical information enhancement for PostgreSQL. postgresql/9.5.3/gnu-4.9.2 Adds postgresql 9.5.3 to your environment. PostgreSQL is a relational database. primer3/2.3.6 This module adds the primer3 package to your environment. probabel/0.4.5/gnu-4.9.2 Adds ProbABEL to your environment. proj.4/4.9.1 Adds the PROJ.4 Cartographic Projections library to your environment. proj.4/5.2.0 Adds the PROJ.4 Cartographic Projections library to your environment. proj.4/6.0.0 Adds the PROJ.4 Cartographic Projections library to your environment. proj.4/6.1.0 Adds the PROJ.4 Cartographic Projections library to your environment. proovread/2.13.11-8Jan2016-f6a856a Adds proovread 2.13.11-8Jan2016-f6a856a to your environment. f6a856a is the commit for this version. pymol/1.7.7.2 Adds PyMol to your environment. pymol/1.8.2.1 Adds PyMol to your environment. pyrosetta/release-73 Adds PyRosetta to your environment. pytorch/1.2.0/cpu Adds PyTorch 1.2.0 to your environment. pytorch/1.2.0/gpu Adds PyTorch 1.2.0 to your environment. pytorch/1.11.0/cpu Adds PyTorch 1.11.0 to your environment. pytorch/1.11.0/gpu Adds PyTorch 1.11.0 to your environment. qctool/2/beta/ba5eaa44a62f This module adds qctool v2 beta to your environment. quantum-espresso/5.2.0-impi/intel-2015-update2 Adds quantum-espresso 5.2.0 to your environment. quantum-espresso/6.1-impi/intel2017 Adds quantum-espresso 6.1 to your environment. quantum-espresso/6.3-impi/thermo_pw-1.0.9/intel-2018 Adds quantum-espresso 6.3 + thermo_pw 1.0.9 to your environment. quantum-espresso/6.4.1-impi/intel-2018 Adds quantum-espresso 6.4.1 to your environment. quantum-espresso/6.5-impi/intel-2018 Adds quantum-espresso 6.5 to your environment. quantum-espresso/6.5-impi/thermo_pw-1.2.1/intel-2018 Adds quantum-espresso 6.5 + thermo_pw 1.2.1 to your environment. quantum-espresso/7.0-impi/intel-2018 Adds quantum-espresso 7.0 to your environment. r/3.2.0-atlas/gnu-4.9.2 Adds R 3.2.0 and Bioconductor 3.2 to your environment. r/3.2.2-openblas/gnu-4.9.2 Adds R 3.2.2 and Bioconductor 3.2 to your environment. r/3.3.0-openblas/gnu-4.9.2 Adds R 3.3.0 and Bioconductor 3.3 to your environment. r/3.3.2-openblas/gnu-4.9.2 Adds R 3.3.2 and Bioconductor 3.4 to your environment. r/3.4.0-openblas/gnu-4.9.2 Adds R 3.4.0 and Bioconductor 3.5 to your environment. r/3.4.2-openblas/gnu-4.9.2 Adds R 3.4.2 and Bioconductor 3.6 to your environment. r/3.5.0-openblas/gnu-4.9.2 Adds R 3.5.0 and Bioconductor 3.7 to your environment. r/3.5.1-openblas/gnu-4.9.2 Adds R 3.5.1 and Bioconductor 3.7 to your environment. r/3.5.3-openblas/gnu-4.9.2 Adds R 3.5.3 and Bioconductor 3.8 to your environment. r/3.6.0-openblas/gnu-4.9.2 Adds R 3.6.0 and Bioconductor 3.9 to your environment. r/4.2.0-openblas/gnu-10.2.0 Adds R 4.2.0 and Bioconductor 3.15 to your environment. randfold/2.0/gnu-4.9.2 Adds randfold 2.0 to your environment. rclone/1.51.0 RClone is a command-line program intended to download and upload files from and to various storage services and providers. repast-hpc/2.1/gnu-4.9.2 Adds Repast HPC 2.1 compiled with GCC 4.9.2 and OpenMPI to your environment. root/5.34.30/gnu-4.9.2 Adds ROOT 5.34.30 to your environment. root/5.34.30/gnu-4.9.2-fftw-3.3.6 Adds ROOT 5.34.30 to your environment. root/5.34.36/gnu-4.9.2-fftw-3.3.6 Adds ROOT 5.34.36 to your environment. root/5.34.36/gnu-4.9.2-fftw-3.3.6-gsl-2.4 Adds ROOT 5.34.36 to your environment. root/6.04.00/gnu-4.9.2 Adds ROOT 6.04.00 to your environment. rosetta/2015.31.58019 Adds Rosetta 2015.31.58019 to your environment. rosetta/2015.31.58019-mpi Adds Rosetta 2015.31.58019 with MPI to your environment. rosetta/2018.48.60516 Adds Rosetta 2018.48.60516 serial version to your environment. rosetta/2018.48.60516-mpi Adds Rosetta 2018.48.60516 MPI version to your environment. rsem/1.2.31 Adds RSEM 1.2.31 to your environment. rvtests/2.1.0 Rvtests: Rare variant test software for next generation sequencing data sac/101.6a Adds SAC 101.6a to your environment. sac/102.0 Adds SAC 102.0 to your environment. salmon/1.9.0 Adds Salmon 1.9.0 to your environment. sambamba/0.6.7-bindist A tool for extracting information from SAM/BAM files. samblaster/0.1.24/gnu-4.9.2 samblaster is a program for marking duplicates in read-id grouped paired-end SAM files. samsrf/5.84/matlab.r2019b Adds the SamSrf Matlab toolbox to your environment samtools/0.1.19 This module adds the Samtools 0.1.19 package to your environment. samtools/1.2/gnu-4.9.2 Adds SAMtools 1.2 to your environment. Reading/writing/editing/indexing/viewing SAM/BAM/CRAM format. samtools/1.3.1/gnu-4.9.2 Adds SAMtools 1.3.1 to your environment. Reading/writing/editing/indexing/viewing SAM/BAM/CRAM format. samtools/1.9/gnu-4.9.2 Adds SAMtools 1.9 to your environment. Reading/writing/editing/indexing/viewing SAM/BAM/CRAM format. samtools/1.11/gnu-4.9.2 Tools for reading/writing/editing/indexing/viewing SAM/BAM/CRAM formatted data. sas/9.4-M6/64 Adds SAS 9.4 (9.04.01M6) 64 bit to your environment sas/9.4-m7/64 Adds SAS 9.4 (9.04.01M7) 64 bit to your environment sas/9.4/64 Adds SAS 9.4 64 bit to your environment sc/7.16 Adds sc 7.16 to your environment. siesta/4.0.1/intel-2017 Adds SIESTA 4.0.1 to your environment. skewer/0.2.2 Adds skewer 0.2.2 to your environment. smalt/0.7.6/gnu-4.9.2 Adds SMALT 0.7.6 to your environment. SMALT aligns DNA sequencing reads with a reference genome. Compiled with bambamc support for SAM/BAM input and BAM output. snpAD/0.3.4-bindist snpAD is an ancient DNA aware genotype caller. snptest/2.5.4-beta3 Adds SNPtest 2.5.4-beta3 to your environment. sod/3.2.7 Adds SOD 3.2.7 to your environment. SOD is a program that automates tedious data selection, downloading, and routine processing tasks in seismology. sod/3.2.10 Adds SOD 3.2.10 to your environment. SOD is a program that automates tedious data selection, downloading, and routine processing tasks in seismology. spaceranger/1.2.2 Adds Space Ranger 1.2.2 to your environment. Space Ranger is a set of analysis pipelines that process Visium spatial RNA-seq output and brightfield and fluorescence microscope images. spm/8/r6313/matlab.r2015a Adds SPM8 to your environment spm/12/jan2020/matlab.r2019b Adds SPM12 to your environment spm/12/r6470/matlab.r2015a Adds SPM12 to your environment spss/25 Adds SPSS 25 to your environment spss/26 Adds SPSS 26 to your environment sqlite/3.31.1/gnu-9.2.0 Adds SQLite Version 3.31.1 to your environment. stacks/2.54/gnu-4.9.2 Stacks is a software pipeline for building loci from short-read sequences, such as those generated on the Illumina platform. Stacks was developed to work with restriction enzyme-based data, such as RAD-seq, for the purpose of building genetic maps and conducting population genomics and phylogeography. star-ccm+/9.06.011 Adds STAR-CCM+ and STAR-View to your environment. star-ccm+/11.04.010-R8 Adds STAR-CCM+ and STAR-View to your environment. star-ccm+/12.04.010 Adds STAR-CCM+ and STAR-View to your environment. star-ccm+/13.02.011 Adds STAR-CCM+ and STAR-View to your environment. star-ccm+/13.06.012 Adds STAR-CCM+ and STAR-View to your environment. star-ccm+/14.06.013 Adds STAR-CCM+ and STAR-View to your environment. star-cd/4.22.058 Adds STAR-CD 4.22.058 to your environment. star-cd/4.26.011 Adds STAR-CD 4.26.011 using Intel 2016 compiler suite to your environment. STAR-CD is a code for performing CFD simulations. It is designed for modelling fluid flow, heat transfer, mass transfer and chemical reactions. star-cd/4.26.022 Adds STAR-CD 4.26.022 using Intel 2016 compiler suite to your environment. STAR-CD is a code for performing CFD simulations. It is designed for modelling fluid flow, heat transfer, mass transfer and chemical reactions. star-cd/4.28.050 Adds STAR-CD 4.28.050 using Intel 2016 compiler suite to your environment. STAR-CD is a code for performing CFD simulations. It is designed for modelling fluid flow, heat transfer, mass transfer and chemical reactions. star/2.5.2a Adds STAR 2.5.2a to your environment. star/2.7.3a Adds STAR 2.7.3a to your environment. stata/14 Adds Stata/MP 14 to your environment. stata/15 Adds Stata/MP 15 to your environment. supermagic/1.2/intel-2017 Adds supermagic 1.2 to your environment. Supermagic is a simple MPI sanity test. taup/2.1.2 adds TauP 2.1.2 to your environment variables tensorflow/1.4.1/cpu Adds Tensorflow 1.4.1 to your environment. tensorflow/1.4.1/gpu Adds Tensorflow 1.4.1 to your environment. tensorflow/1.4.1/mkl Adds Tensorflow 1.4.1 to your environment. tensorflow/1.8.0/cpu Adds Tensorflow 1.8.0 to your environment. tensorflow/1.8.0/gpu Adds Tensorflow 1.8.0 to your environment. tensorflow/1.8.0/mkl Adds Tensorflow 1.8.0 to your environment. tensorflow/1.12.0/cpu Adds Tensorflow 1.12.0 to your environment. tensorflow/1.12.0/gpu Adds Tensorflow 1.12.0 to your environment. tensorflow/1.12.0/mkl Adds Tensorflow 1.12.0 to your environment. tensorflow/1.13.1/cpu Adds Tensorflow 1.13.1 to your environment. tensorflow/1.13.1/gpu Adds Tensorflow 1.13.1 to your environment. tensorflow/1.13.1/mkl Adds Tensorflow 1.13.1 to your environment. tensorflow/1.14.0/cpu Adds Tensorflow 1.14.0 to your environment. tensorflow/1.14.0/gpu Adds Tensorflow 1.14.0 to your environment. tensorflow/1.14.0/mkl Adds Tensorflow 1.14.0 to your environment. tensorflow/2.0.0/gpu-py37 Adds Tensorflow 2.0.0 to your environment. tensorflow/2.0.0/gpu-py37-cudnn75 Adds Tensorflow 2.0.0 to your environment. tensorflow/2.0.0/mkl-py37 Adds Tensorflow 2.0.0 to your environment. tensorflow/2.8.0/python-3.8.6 Adds Tensorflow 2.8.0 to your environment. tephra2/2.0/gnu-4.9.2 Adds Tephra2 version 2.0 to your environment. tephra2/normal/r149 Adds Tephra2 version r149 to your environment. tesseract/3.05.01 Adds Tesseract 3.05.01 to your environment. texinfo/5.2/gnu-4.9.2 Adds GNU texinfo 5.2 to your environment. texinfo/6.6/gnu-4.9.2 Adds GNU texinfo 6.6 to your environment. texlive/2014 Adds TeX Live 2014 to your environment. texlive/2015 Adds TeX Live 2015 to your environment. texlive/2019 Adds TeX Live 2019 to your environment. textract/1.5.0 Adds textract 1.5.0 to your environment. textract extracts text from a wide range of document types. tmux/2.2 This module adds the tmux 2.2 package to your environment. tmux/3.2a This module adds the tmux 3.2a package to your environment. tophat/2.1.0 Adds Tophat 2.1.0 to your environment. tracer/1.6 Adds Tracer 1.6. tractor/3.2.5 Adds TractoR 3.2.5 to your environment. tree/1.7.0 Adds tree 1.7.0 to your environment. This shows your directory structure as a tree. trim_galore/0.4.1 Adds Trim Galore 0.4.1 to your environment. A wrapper tool around Cutadapt and FastQC to consistently apply quality and adapter trimming to FastQ files. trimmomatic/0.33 Adds Trimmomatic 0.33 to your environment. A flexible read trimming tool for Illumina NGS data. turbomole/6.4/mpi Adds turbomole 6.4 (using MPI) to your environment. turbomole/6.4/serial Adds turbomole 6.4 (serial) to your environment. turbomole/6.4/smp Adds turbomole 6.4 (using SMP) to your environment. turbomole/6.5/mpi Adds turbomole 6.5 (using MPI) to your environment. turbomole/6.5/serial Adds turbomole 6.5 (serial) to your environment. turbomole/6.5/smp Adds turbomole 6.5 (using SMP) to your environment. turbomole/6.6/mpi Adds turbomole 6.6 (using MPI) to your environment. turbomole/6.6/serial Adds turbomole 6.6 (serial) to your environment. turbomole/6.6/smp Adds turbomole 6.6 (using SMP) to your environment. ubpred/1-bin32dist UbPred is a random forest-based predictor of potential ubiquitination sites in proteins. udunits/2.2.19 Adds udunits to your environment. udunits/2.2.20/gnu-4.9.2 adds the UDUNITS-2 package to your environment. udunits/2.2.26/gnu-4.9.2 adds the UDUNITS-2 package to your environment. varscan/2.3.9 Adds VarScan v2.3.9 to your environment. VarScan is a platform-independent mutation caller for targeted, exome, and whole-genome resequencing data generated on Illumina, SOLiD, Life/PGM, Roche/454, and similar instruments. vasp/5.4.1-05feb16-p2/intel-2015-update2 The VASP Quantum Chemistry package, version 5.4.1-05feb16 with patches 1 and 2. vasp/5.4.1-24jun15-p2-vtst-r160/intel-2015-update2 Adds VASP 5.4.1 built with VTST r160 to your environment. vasp/5.4.1-24jun15-p08072015/intel-2015-update2 The VASP Quantum Chemistry package, version 5.4.1-24jun15 with patch 08072015. vasp/5.4.4-18apr2017-libbeef/intel-2017-update1 Adds VASP 5.4.4 with BEEF-vdW functionals to your environment. vasp/5.4.4-18apr2017-vtst-r178/intel-2017-update1 Adds VASP 5.4.4 built with VTST r178 to your environment. vasp/5.4.4-18apr2017/intel-2017-update1 Adds VASP 5.4.4 to your environment. vasp/5.4.4-18apr2017/intel-2019 Adds VASP 5.4.4 to your environment. Built with Intel 2019. vasp/6.1.2-01dec2020/intel-2019-update5 Adds VASP 6.1.2 to your environment. vasp/6.2.1-19Jan2022/intel-2019-update5 Adds VASP 6.2.1 to your environment. vasp/6.2.1-19Jan2022/nvidia-22.1-gpu Adds VASP 6.2.1 FOR GPUS ONLY to your environment. vasp/6.3.0-24Jan2022/intel-2019-update5 Adds VASP 6.3.0 to your environment. vasp/6.3.0-24Jan2022/nvidia-22.1-gpu Adds VASP 6.3.0 FOR GPUS ONLY to your environment. vcftools/0.1.15/gnu-4.9.2 Adds VCFtools version 0.1.15 to your environment. Tools for working with VCF files. velvet/1.2.10 Adds Velvet 1.2.10 to your environment. vep/95.0 Adds VEP 95.0 to your environment. vesta/3.4.6-bindist VESTA is a 3D visualization program for structural models, volumetric data such as electron/nuclear densities, and crystal morphologies. vg/1.11.0 This is a module with no description string. viennarna/2.1.9/gnu-4.9.2 Adds viennarna 2.1.9 to your environment. vinalc/1.1.2/gnu-4.9.2 Adds VinaLC to your environment. visit/2.9.2 This package adds VisIt 2.9.2 to your environment. VisIt is a distributed, parallel visualization and graphical analysis tool for data defined on two- and three-dimensional (2D and 3D) meshes. Visit will create a ~/.visit directory and a ~/Scratch/visit directory. Jobfiles created by the GUI will go in the latter. Legion hostfile: /shared/ucl/apps/visit/2.9.2/gnu-4.9.2/host_legion.xml Web: https://wci.llnl.gov/simulation/computer-codes/visit/ vmd/1.9.3/GL+CUDA VMD is a molecular visualization program for displaying, animating, and analyzing large biomolecular systems using 3-D graphics and built-in scripting. vmd/1.9.3/text-only The binary, text only version of VMD 1.9.3 vmd/1.9.4/a55-gl+cuda Adds VMD 1.9.4 Development Version a55 to your environment. vt/2018-08-01/gnu-4.9.2 [ref:f6d2b5dab73c] A tool set for short variant discovery in genetic sequence data. xmds/2.2.2 Adds XMDS 2.2.2 (GNU/ATLAS/Intel MPI/FFTW toolchain) to your environment. xmds/3.0.0 Adds XMDS 3.0.0 (GNU/ATLAS/Intel MPI/FFTW toolchain) to your environment. xtalopt/r12.1/gnu-4.9.2 Adds XtalOpt r12.1 to your environment. xulrunner/3.6.28/gnu-4.9.2 Adds XULRunner 3.6.28 to your environment. XULRunner is a Mozilla runtime package that can be used to bootstrap XUL+XPCOM applications. This version was built including javaxpcom. xulrunner/10.0.2 Adds the XULRunner 3.6.28 64-bit runtime binaries to your environment. XULRunner is a Mozilla runtime package that can be used to bootstrap XUL+XPCOM applications. yambo/4.1.4/intel-2017 This is a module with no description string. Libraries \u00a7 Modules in this section set up your environment to use specific C, C++, or Fortran libraries. This can include being able to use them with other languages, like Python. Module Description apr-util/1.5.4 adds APR-util 1.5.4 to your environment variables apr-util/1.6.1 adds APR-util 1.6.1 to your environment variables apr/1.5.2 adds APR 1.5.2 to your environment variables apr/1.7.0 adds APR 1.7.0 to your environment variables argtable/2.13 Adds argtable 2.13 to your environment. armadillo/7.400.3/intel-2015-update2 Adds armadillo 7.400.3 to your environment. Armadillo is a linear alebra library for C++, aiming to balance speed and ease of use. arpack-ng/3.4.0/intel-2015-update2 Adds arpack-ng 3.4.0 to your environment. ARPACK-NG is a collection of Fortran77 subroutines designed to solve large scale eigenvalue problems. arpack-ng/3.5.0/gnu-4.9.2-serial Adds arpack-ng 3.5.0 to your environment. ARPACK-NG is a collection of Fortran77 subroutines designed to solve large scale eigenvalue problems. arpack-ng/3.5.0/gnu-4.9.2-threaded Adds arpack-ng 3.5.0 to your environment. ARPACK-NG is a collection of Fortran77 subroutines designed to solve large scale eigenvalue problems. arpack-ng/3.5.0/intel-2017 Adds arpack-ng 3.5.0 to your environment. ARPACK-NG is a collection of Fortran77 subroutines designed to solve large scale eigenvalue problems. atlas/3.10.2/gnu-4.9.2 adds ATLAS 3.10.2 for GCC 4.9.2 compilers to your environment variables atlas/3.10.2/intel-2015-update2 adds ATLAS 3.10.2 for Intel 15 compilers to your environment variables bambamc/0.0.50/gnu-4.9.2 Adds bambamc 0.0.50 to your environment. bambamc is a lightweight C implementation of the read name collation code from the larger libmaus/biobambam C++ project. boost/1.75.0/gnu-4.9.2 Boost is a collection of miscellaneous C++ libraries. This build does not include Python bindings or MPI support, and is multi-threaded. boost/1_54_0/gnu-4.9.2 Adds Boost 1.54.0 with Python libraries to your environment. boost/1_54_0/mpi/gnu-4.9.2 Adds Boost 1.54.0 with Python and MPI libraries to your environment. boost/1_54_0/mpi/gnu-4.9.2-ompi-1.10.1 Adds Boost 1.54.0 with Python and MPI libraries to your environment. boost/1_54_0/mpi/intel-2015-update2 Adds Boost 1.54.0 with Python and MPI libraries to your environment. boost/1_63_0/gnu-4.9.2 Adds Boost 1.63.0 with Python libraries to your environment. boost/1_63_0/mpi/gnu-4.9.2 Adds Boost 1.63.0 with Python and MPI libraries to your environment. boost/1_63_0/mpi/intel-2017-update1 Adds Boost 1.63.0 with Python and Intel MPI libraries to your environment. cernlib/2006-35 Adds the CERN Program library to your environment. 2006-35 EL6 RPM binaries. cernlib/2006/gnu-4.9.2 Adds the CERN Program library to your environment cfitsio/3370/gnu-4.9.2 Adds cfitsio 3370 to your environment. cfitsio/3370/intel-2015-update2 Adds cfitsio 3370 to your environment. cgal/4.9/gnu-4.9.2 Adds CGAL 4.9 with Qt5 to your environment. The Computational Geometry Algorithms Library. clusteringsuite/2.6.6/bindist Adds clusteringsuite 2.6.6 to your environment. Clustering Suite is a set of tools to automatically expose the main performance trends in applications' computation structure. cppunit/1.15.1/gnu-4.9.2 Adds CppUnit 1.15.1 to your environment. CppUnit is a package for writing and running unit tests in C++. cppunit/1.15.1/gnu-10.2.0 Adds CppUnit 1.15.1 built wuth GNU 10.2.0 to your environment. CppUnit is a package for writing and running unit tests in C++. cunit/2.1-3/gnu-4.9.2 Adds cunit 2.1-3 to your environment. CUnit is a package for writing and running unit tests in C. cvmfs/2.2.1/gnu-4.9.2 Adds libcvmfs 2.2.1 to your environment. dyninst/9.3.2/gnu-4.9.2 Adds dyninst 9.3.2 to your environment. DynInst is a library for performing dynamic instrumentation of executables. eigen/3.2.5/gnu-4.9.2 adds Eigen for GCC 4.9.2 compilers to your environment variables eigen/3.3.9/gnu-4.9.2 Adds Eigen 3.3.9 to your environment. Eigen is a C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms. elfutils/0.170/gnu-4.9.2 Adds elfutils 0.170 to your environment. Elfutils provides utilities for manipulating binary ELF files, and is one possible provider of libelf. fftw/2.1.5/gnu-4.9.2 adds FFTW 2.1.5 for GCC 4.9.2 compilers to your environment variables fftw/2.1.5/intel-2015-update2 adds FFTW 2.1.5 for Intel compilers to your environment variables fftw/3.3.4-impi/gnu-4.9.2 Adds fftw 3.3.4 (built with Intel MPI) to your environment. fftw/3.3.4-impi/intel-2017-update1 Adds fftw 3.3.4 (built with Intel MPI) to your environment. fftw/3.3.4-ompi-1.10.1/gnu-4.9.2 Adds fftw 3.3.4 (built with OpenMPI) to your environment. fftw/3.3.4-ompi/gnu-4.9.2 Adds fftw 3.3.4 (built with OpenMPI) to your environment. fftw/3.3.4-threads/gnu-4.9.2 adds FFTW 3.3.4 for GCC 4.9.2 compilers to your environment variables fftw/3.3.4/gnu-4.9.2 adds FFTW 3.3.4 for GCC 4.9.2 compilers to your environment variables fftw/3.3.4/intel-2015-update2 adds FFTW 3.3.4 for Intel compilers to your environment variables fftw/3.3.6-pl2/gnu-4.9.2 Adds FFTW 3.3.6 pl2 for GCC 4.9.2 compilers to your environment variables. Includes single and double precision only on Legion, plus long-double and quad on Grace/Thomas. Includes OpenMP and POSIX threads libraries. fftw/3.3.6-pl2/intel-2017 Adds FFTW 3.3.6 pl2 for Intel compilers to your environment variables. Includes single and double precision versions on Legion, plus long-double on Grace/Thomas. Includes OpenMP and POSIX threads libraries. fftw/3.3.8-impi/intel-2018 Adds fftw fftw (built with Intel MPI) to your environment. fftw/3.3.8-ompi/gnu-4.9.2 Adds fftw 3.3.8 (built with OpenMPI) to your environment. fftw/3.3.10/nvidia-22.1 Adds fftw 3.3.10 to your environment. forge/1.0.0/gnu-4.9.2 Adds forge 1.0.0 to your environment. freeimage/3.17.0/gnu-4.9.2 Adds FreeImage 3.17.0 to your environment. freetype/2.8.1/gnu-4.9.2 Adds freetype 2.8.1 to your environment. FreeType is a freely available software library to render fonts. ga/5.7-8BInts/intel-2018 Global Arrays (GA) is a library that provides a Partitioned Global Address Space (PGAS) programming model. This version has been compiled with 8-byte integers in the Fortran code. ga/5.7/intel-2018 Global Arrays (GA) is a library that provides a Partitioned Global Address Space (PGAS) programming model. gcc-libs/4.9.2 adds GCC 4.9.2 runtime to your evironment. geos/3.5.0/gnu-4.9.2 Adds geos 3.5.0 to your environment. GEOS (Geometry Engine, Open Source) is a library for performing various spatial operations, especially for boolean operations on GIS data. Note this version does not include the SWIG, Python, Ruby, or PHP bindings. gflags/2.2.1 Adds Google gflags 2.2.1 to your environment. giflib/5.1.1 Adds giflib 5.1.1 to your environment. A library and utilities for processing gifs. glbinding/2.1.2/gnu-4.9.2 Adds glbinding 2.1.2 to your environment. glew/1.13.0/gnu-4.9.2 Adds GLEW The OpenGL Extension Wrangler Library 1.11.0 to your environment. glew/2.1.0/gnu-4.9.2 Adds GLEW -- The OpenGL Extension Wrangler Library -- 2.1.0 to your environment. glfw/3.2.1/gnu-4.9.2 Adds GLFW 3.2.1 to your environment. glog/0.3.5 Adds Google glog 0.3.5 to your environment. glpk/4.60/gnu-4.9.2 Adds the GNU Linear Programming Kit Version 4.60 for GCC 4.9.2 to your environment. gsl/1.16/gnu-4.9.2 adds GSL 1.16 for GCC 4.9.2 to your environment. gsl/1.16/intel-2015-update2 Adds gsl 1.16 to your environment. gsl/2.4/gnu-4.9.2 adds GSL 2.4 for GCC 4.9.2 to your environment. gsl/2.4/intel-2017 adds GSL 2.4 for Intel 2017 to your environment. gstreamer/1.12.0 GStreamer is a library for constructing graphs of media-handling components, including codecs for various audio and video formats. gulp/4.5/libgulp/intel-2018 Adds GULP 4.5 library version to your environment. Built libgulp only, without FoX, for programs such as ChemShell to link. GULP is a materials simulation code. h5py/2.10.0-ompi/gnu-4.9.2 Adds h5py 2.10.0-ompi for Python 3.7 to your environment. harminv/1.4.1/gnu-4.9.2 Adds harminv 1.4.1 to your environment. harminv/1.4/gnu-4.9.2 Adds harminv 1.4 to your environment. hdf/5-1.8.15-p1-impi/intel-2015-update2 Adds hdf5 1.8.5-p1 (built with Fortran and IntelMPI options) to your environment. hdf/5-1.8.15-p1-ompi/gnu-4.9.2 Adds hdf5 1.8.5-p1 (built with Fortran and OpenMPI options) to your environment. hdf/5-1.8.15/gnu-4.9.2 adds HDF5 1.8.15 (Serial) for GCC 4.9.2 to your environment. hdf/5-1.8.15/intel-2015-update2 adds HDF5 1.8.15 (Serial) for Intel 2015 to your environment. hdf/5-1.10.2-impi/intel-2018 adds HDF5 1.10.2 (Parallel) for Intel 2018 to your environment. hdf/5-1.10.2/intel-2018 adds HDF5 1.10.2 (Serial) for Intel 2018 to your environment. hdf/5-1.10.5-ompi/gnu-4.9.2 Adds hdf 5-1.10.5-ompi to your environment. Built with OpenMPI and GNU. hdf/5-1.10.5/gnu-4.9.2 Adds hdf 5-1.10.5 to your environment. Serial version built with GNU. htslib/1.2.1 This module adds the HTSlib 1.2.1 package to your environment. HTSlib is an implementation of a unified C library for accessing common file formats, such as SAM, CRAM and VCF, used for high-throughput sequencing data. htslib/1.3.1 This module adds the HTSlib 1.3.1 package to your environment. HTSlib is an implementation of a unified C library for accessing common file formats, such as SAM, CRAM and VCF, used for high-throughput sequencing data. htslib/1.7 This module adds the HTSlib 1.7 package to your environment. HTSlib is an implementation of a unified C library for accessing common file formats, such as SAM, CRAM and VCF, used for high-throughput sequencing data. htslib/1.11/gnu-4.9.2 A C library for reading/writing high-throughput sequencing data. hwloc/1.11.12 The Portable Hardware Locality (hwloc) software package provides a portable abstraction (across OS, versions, architectures, ...) of the hierarchical topology of modern architectures, including NUMA memory nodes, sockets, shared caches, cores and simultaneous multithreading. This installation includes the optional libnuma dependency. hypre/2.11.2/openmpi-3.0.0/intel-2017 Adds HYPRE 2.11.2 to your environment. hypre/2.11.2/openmpi-3.1.1/intel-2018 Adds HYPRE 2.11.2 to your environment. ipopt/3.14.2/intel-2018 Ipopt (Interior Point OPTimizer, pronounced eye-pea-Opt) is a software package for large-scale nonlinear optimization. jansson/2.11 This is a module with no description string. json-c/0.12/gnu-4.9.2 Adds json-c 0.12 to your environment. JSON-C is a library for converting between JSON-formatted strings and C representations of the equivalent objects. lapack/3.8.0/gnu-4.9.2 LAPACK is a reference library of routines for Linear Algebra. It is not recommended for use, as its ABI is replicated in the much higher-performance libraries OpenBLAS, MKL, or ATLAS instead. leptonica/1.74.4 Adds Leptonica 1.74.4 to your environment. leveldb/1.20 Adds Google leveldb 1.20 to your environment. libbdwgc/7.4.2/gnu-4.9.2 Adds libbdwgc (a garbage-collector library) to your environment. libbeef/0.1.3/intel-2018 Library for Bayesian error estimation functionals for use in density functional theory codes: libbeef 0.1.3 commit 2822afe libctl/3.2.2/gnu.4.9.2 Adds libctl (built using Intel compilers) to your environment. libctl/4.3.0/gnu-4.9.2 Adds libctl 4.3.0 to your environment. libdwarf/20170709/gnu-4.9.2 Adds libdwarf 20170709 to your environment. libdwarf is a library for interacting with debugging info in the DWARF 2, 3, and 5 formats. libelf/0.8.13/gnu-4.9.2 Adds libelf 0.8.13 to your environment. libetsfio/1.0.4/gnu-4.9.2 Adds libetsfio 1.0.4 to your environment. libetsfio/1.0.4/intel-2015-update2 Adds libetsfio 1.0.4 to your environment. libflac/1.3.1/gnu-4.9.2 Adds libflac 1.3.1 to your environment. libFLAC is the Xiph library for handling their lossless audio codec. libgd/2.1.1/gnu-4.9.2 Adds libgd 2.1.1 to your environment. libgd/2.1.1/intel-2015-update2 Adds libgd 2.1.1 to your environment. libgdsii/0.21/gnu-4.9.2 Adds libgdsii 0.21 to your environment. C++ library and command-line utility for reading GDSII geometry files. libint/1.1.4/gnu-4.9.2 Adds libint 1.1.4 to your environment. Libint is required for CP2K. libmatheval/1.1.11 Adds libmatheval 1.1.11 to your environment. GNU libmatheval is a library (callable from C and Fortran) to parse and evaluate symbolic expressions input as text. libsodium/1.0.6/gnu-4.9.2 Adds libsodium 1.0.6 to your environment. libsodium is a crypto library primarily used by ZeroMQ. libsox/14.4.2/gnu-4.9.2 Adds libsox 14.4.2 to your environment. SoX is a library for reading, writing, and converting a variety of sound file formats. If you require support for a file format that is not installed, contact rc-support and the library can be rebuilt. libuuid/1.0.3/gnu-4.9.2 Adds a static libuuid 1.0.3 to your environment. libxc/2.1.2/intel-2015-update2 Adds libxc 2.1.2 to your environment. libxc/2.2.2/gnu-4.9.2 Adds libxc 2.2.2 to your environment. libxc/2.2.2/intel-2015-update2 Adds libxc 2.2.2 to your environment. libxc/3.0.0/gnu-4.9.2 Adds libxc 3.0.0 to your environment. libxc/3.0.0/intel-2015-update2 Adds libxc 3.0.0 to your environment. libxc/4.2.3/intel-2018 libxc is a library of routines implementing a range of exchange-correlation functionals for density-functional theory calculations. libxml2/2.9.4/gnu-4.9.2 Adds libxml2 2.9.4 to your environment. Libxml2 is an XML C parser and toolkit. Includes Python (2.7.9) bindings. llvm/3.3 This module adds the LLVM 3.3 package to your environment. The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for many popular CPUs. llvm/3.9.1 This module adds the LLVM 3.9.1 package to your environment. The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for many popular CPUs. llvm/6.0.1 This module adds the LLVM 6.0.1 package to your environment. The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for many popular CPUs. llvm/8.0.0/gnu-4.9.2 The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. This installation includes clang, a C compiler based on LLVM. lmdb/0.9.22 Adds LMDB 0.9.22 to your environment. lz4/1.8.3 This is a module with no description string. magma/2.4.0 This is a module with no description string. med/4.0.0/gnu-4.9.2 Adds med 4.0.0 to your environment. Allows reading and writing of MED format files. mesa/6.5/gnu-4.9.2 Adds mesa 6.5 to your environment. Mesa is an open-source implementation of the OpenGL specification - a system for rendering interactive 3D graphics. This is an old version installed to satisfy a particular dependency: please do not use for new builds. mesa/10.6.3 Adds Mesa 10.6.3 to your environment. Mesa is an open-source implementation of the OpenGL specification. (Built for offscreen rendering: OSMesa, Xlib GLX, no Gallium, no EGL, no llvm, no DRI). mesa/10.6.9/gnu-4.9.2 Adds Mesa 10.6.9 to your environment. Mesa is an open-source implementation of the OpenGL specification. (Built for offscreen rendering: OSMesa, Xlib GLX, no Gallium, no EGL, no llvm, no DRI). mesa/13.0.6/gnu-4.9.2 Adds Mesa 13.0.6 to your environment. Mesa is an open-source implementation of the OpenGL specification. (Built options: Gallium, LLVM, no EGL, no DRI, no GLX). The default driver is llvmpipe. You can use \"export GALLIUM_DRIVER\" to explicitly choose llvmpipe, softpipe, or swr metis/5.1.0/gnu-4.9.2 Adds metis 5.1.0 to your environment. METIS is a set of serial programs for partitioning graphs, partitioning finite element meshes, and producing fill reducing orderings for sparse matrices. metis/5.1.0/intel-2015-update2 Adds metis 5.1.0 to your environment. METIS is a set of serial programs for partitioning graphs, partitioning finite element meshes, and producing fill reducing orderings for sparse matrices. metis/5.1.0/intel-2018 Adds metis 5.1.0 to your environment. METIS is a set of serial programs for partitioning graphs, partitioning finite element meshes, and producing fill reducing orderings for sparse matrices. mpi/intel/2013/update1/intel adds Intel MPI 4.1.3.048 to your environment variables mpi/intel/2015/update3/gnu-4.9.2 adds Intel MPI to your environment variables mpi/intel/2015/update3/intel adds Intel MPI to your environment variables mpi/intel/2017/update1/gnu-4.9.2 adds Intel MPI to your environment variables mpi/intel/2017/update1/intel adds Intel MPI to your environment variables mpi/intel/2017/update2/gnu-4.9.2 adds Intel MPI to your environment variables configured to use GCC 4.9.2 mpi/intel/2017/update2/intel adds Intel MPI to your environment variables mpi/intel/2017/update3/gnu-4.9.2 [Intel MPI/2017.3.196] This is Intel's MPI implementation, version 2017.3.196, which is bundled with compiler package version 2017.Update4. This module sets up the compiler wrappers to use GCC 4.9.2 underneath. mpi/intel/2017/update3/intel [Intel MPI/2017.3.196] This is Intel's MPI implementation, version 2017.3.196, which is bundled with compiler package version 2017.Update4. mpi/intel/2018/update3/intel [Intel MPI/2018.3.222] This is Intel's MPI implementation, version 2018.3.222, which is bundled with compiler package version 2018.Update3. mpi/intel/2019/update4/intel [Intel MPI/2019.4.243] This is Intel's MPI implementation, version 2019.4.243, which is bundled with compiler package version 2019.Update4. mpi/intel/2019/update5/intel [Intel MPI/2019.5.281] This is Intel's MPI implementation, version 2019.5.281, which is bundled with compiler package version 2019.Update5. mpi/intel/2019/update6/intel [Intel MPI/2019.6.166] This is Intel's MPI implementation, version 2019.6.166, which is bundled with compiler package version 2020. mpi/intel/2021.6.0/intel [Intel MPI/2021.6.0] This is Intel's MPI implementation, version 2021.6.0, which is bundled with compiler package version 2022.2. mpi/openmpi/1.8.4/gnu-4.9.2 adds OpenMPI 1.8.4 for GCC 4.9.2 compilers to your environment variables mpi/openmpi/1.8.4/intel-2015-update2 adds OpenMPI 1.8.4 for Intel 2015 update 2 compilers to your environment variables mpi/openmpi/1.10.1/gnu-4.9.2 adds OpenMPI 1.10.1 for GCC 4.9.2 compilers to your environment variables mpi/openmpi/1.10.1/intel-2015-update2 adds OpenMPI 1.10.1 for Intel 2015 update 2 compilers to your environment variables mpi/openmpi/2.0.2/gnu-4.9.2 Adds openmpi 2.0.2 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/2.0.2/intel-2017 Adds openmpi 2.0.2 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/2.1.2/gnu-4.9.2 Adds openmpi 2.1.2 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/2.1.2/intel-2017 Adds openmpi 2.1.2 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.0.0/gnu-4.9.2 Adds openmpi 3.0.0 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.0.0/intel-2017 Adds openmpi 3.0.0 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.1/gnu-4.9.2 Adds openmpi 3.1.1 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.1/intel-2018 Adds openmpi 3.1.1 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.4/gnu-4.9.2 Adds openmpi 3.1.4 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.4/intel-2018 Adds openmpi 3.1.4 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.6/gnu-4.9.2 Adds openmpi 3.1.6 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/4.0.3/gnu-4.9.2 Adds openmpi 4.0.3 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/4.1.1/gnu-4.9.2 Adds openmpi 4.1.1 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi4py/2.0.0/python2 Adds Python2 mpi4py 2.0.0 to your environment. MPI for Python. mpi4py/2.0.0/python3 Adds Python3 mpi4py 2.0.0 to your environment. MPI for Python. mpi4py/3.0.0/python3 Adds Python3 mpi4py 3.0.0 to your environment. MPI for Python. mpi4py/3.0.2/gnu-4.9.2 Adds mpi4py 3.0.2 for Python 3.7 to your environment. multinest/3.10b/gnu-4.9.2 Adds MultiNest 3.10b to your environment. mumps-thirdparty/3.0.0/intel-2018 The COIN-OR Tools project ThirdParty-Mumps can be used to download the MUMPS code and build a MUMPS library that is recognized by Ipopt. This version of ThirdParty-Mumps retrieves and builds MUMPS 5.4.0. mumps/5.2.1/intel-2018 Adds mumps 5.2.1 to your environment. Sequential version built with Intel and METIS. mysql-connector-python/2.0.4/python-3.5.2 Adds mysql-connector-python 2.0.4 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/2.0.4/python-3.6.3 Adds mysql-connector-python 2.0.4 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/2.0.4/python-3.7.4 Adds mysql-connector-python 2.0.4 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/2.0.4/python-3.8.0 Adds mysql-connector-python 2.0.4 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/8.0.22/python-3.8.6 Adds mysql-connector-python 8.0.22 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/8.0.22/python-3.9.0 Adds mysql-connector-python 8.0.22 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/8.0.22/python-3.9.6 Adds mysql-connector-python 8.0.22 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/8.0.28/python-3.9.10 Adds mysql-connector-python 8.0.28 to your environment. This is Oracle's python-only MySQL connector for Python3 nag/fortran/mark22/gnu-4.9.2 Adds NAG Fortran Library Mark 22 for GCC to your environment. nag/fortran/mark24/gnu-4.9.2 Adds NAG Fortran Library Mark 24 for GCC to your environment. nag/fortran/mark24/nag-6.0.1044 Adds NAG Fortran Library Mark 24 for NAG Fortran to your environment. nag/fortran/mark25/intel-2015-update2 Adds NAG Fortran Library Mark 25 for Intel 2015 to your environment. nag/fortran/mark26/gnu-4.9.2 Adds NAG Fortran Library Mark 26 for GCC to your environment. nag/fortran/mark26/intel-2017 Adds NAG Fortran Library Mark 26 for Intel 2017 to your environment. nag/fortran/mark26/nag-6.1.6106 Adds NAG Fortran Library Mark 26 for NAG Fortran to your environment. nag/fortran/mark26/nag-6.2.6223 Adds NAG Fortran Library Mark 26 for NAG Fortran to your environment. nag/mark27/intel-2019 Adds NAG Library Mark 27 for Intel 2019 to your environment. netcdf-c++/4.2/gnu-4.9.2 adds NetCDF C++ 4.2 for GCC to your environment. netcdf-c++/4.2/intel-2015-update2 adds NetCDF C++ 4.2 for Intel 2015 to your environment. netcdf-c++4/4.2/gnu-4.9.2 adds NetCDF C++ 4.2 for GCC to your environment. netcdf-c++4/4.2/intel-2015-update2 adds NetCDF C++ 4.2 for Intel 2015 to your environment. netcdf-fortran/4.4.1/gnu-4.9.2 adds NetCDF 4.4.1 for GCC to your environment. netcdf-fortran/4.4.1/intel-2015-update2 adds NetCDF 4.4.1 for Intel 2015 to your environment. netcdf-fortran/4.5.4/intel-2018-update3 adds NetCDF Fortran 4.5.4 for Intel 2018 to your environment. netcdf/4.3.3.1/gnu-4.9.2 adds NetCDF 4.3.3.1 for GCC 4.9.2 to your environment. netcdf/4.3.3.1/intel-2015-update2 adds NetCDF 4.3.3.1 for Intel 2015 to your environment. netcdf/4.9.0/intel-2018-update3 adds NetCDF 4.9.0 for Intel 2018 to your environment. numactl/2.0.12 numactl provides NUMA policy support, as well as tools and a library to display NUMA allocation statistics and debugging information. openblas/0.2.14-threads/gnu-4.9.2 adds OpenBLAS 0.2.14 for GCC 4.9.2 compilers to your environment variables openblas/0.2.14/gnu-4.9.2 adds OpenBLAS 0.2.14 for GCC 4.9.2 compilers to your environment variables openblas/0.2.14/intel-2015-update2 adds OpenBLAS 0.2.14 for Intel 2015 update 2compilers to your environment variables openblas/0.3.2-native-threads/gnu-4.9.2 This is a module with no description string. openblas/0.3.2-openmp/gnu-4.9.2 This is a module with no description string. openblas/0.3.2-serial/gnu-4.9.2 This is a module with no description string. openblas/0.3.7-native-threads/gnu-4.9.2 This is a module with no description string. openblas/0.3.7-openmp/gnu-4.9.2 This is a module with no description string. openblas/0.3.7-serial/gnu-4.9.2 This is a module with no description string. openjpeg/2.4.0/gnu-4.9.2 OpenJPEG is an open-source JPEG 2000 codec written in C language. openslide/3.4.1/gnu-4.9.2 adds OpenSlide library 3.4.1 to your environment variables papi/5.5.1/gnu-4.9.2 Adds PAPI 5.5.1 to your environment. PAPI is a library for working with performance counters, often used in profiling applications. parmetis/4.0.3/intel-2015-update2 Adds parmetis 4.0.3 to your environment. ParMETIS is an MPI-based parallel library that implements a variety of algorithms for partitioning unstructured graphs, meshes, and for computing fill-reducing orderings of sparse matrices. pcre2/10.21/gnu-4.9.2 Adds pcre2 10.21 to your environment. PCRE (Perl-compatible regular expressions) is a C library implementing regular expression pattern-matching using the same semantics as Perl 5. pgplot/5.2.2/intel-2017 Adds PGPlot 5.2.2 to your environment. pgplot/5.2.2/intel-2018 Adds PGPlot 5.2.2 to your environment. pillow-simd/6.0.0.post0/python-3.7.4 Adds Pillow-SIMD to your environment. protobuf/3.5.1/gnu-4.9.2 adds Google Protocol Buffers for GCC 4.9.2 to your environment. protobuf/12-2017/gnu-4.9.2 adds Google Protocol Buffers for GCC 4.9.2 to your environment. psm2/11.2.185/gnu-4.9.2 Adds psm2 11.2.185 to your environment. The PSM2 messaging API, libpsm2. A low-level user-level communications interface for the Intel(R) OPA. family of products. pstreams/1.0.1/gnu-4.9.2 Adds pstreams 1.0.1 to your environment. PStreams is a C++ wrapper for process control and streaming using popen and pclose. pygsl/2.1.1-python3.6/gnu-4.9.2 Adds pygsl 2.1.1 to your environment. PyGSL provides Python bindings for the GNU Scientific Library. pyngl/1.4.0 Adds PyNGL to your environment. pynio/1.4.1 Adds PyNIO to your environment. quip/18c5440-threads/gnu-4.9.2 Adds QUIP to your environment. QUIP is required for CP2K. quip/18c5440/gnu-4.9.2 Adds QUIP to your environment. QUIP is required for CP2K. qutip/4.1.0/python-2.7.12 Adds qutip to your environment. scalapack/2.0.2/gnu-4.9.2/openblas Adds ScaLAPACK 2.0.2 to your environment, built with GCC, OpenBLAS and OpenMPI. Static and shared libraries. scalapack/2.0.2/gnu-4.9.2/openblas-0.3.2 Adds ScaLAPACK 2.0.2 to your environment, built with GCC, OpenBLAS and OpenMPI. Static and shared libraries. scalapack/2.0.2/gnu-4.9.2/openblas-0.3.7 Adds ScaLAPACK 2.0.2 to your environment, built with GCC, OpenBLAS and OpenMPI. Static and shared libraries. snappy/1.1.7 Adds Google snappy 1.1.7 to your environment. spark/3.1.1-bin-hadoop2.7 Apache Spark is an analytics engine for data processing. sparskit2/2009.11.18/gnu-4.9.2 Adds sparskit2 2009.11.18 to your environment. sparskit2/2009.11.18/intel-2015-update2 Adds sparskit2 2009.11.18 to your environment. spectral/3.4.0/bindist Adds spectral 3.4.0 to your environment. Spectral is a set of tools for performing spectral analysis on traces produced by the BSC profiling toolkit. spglib/1.7.4/gnu-4.9.2 Adds spglib 1.7.4 to your environment. Spglib is a library for finding and handling crystal symmetries written in C. squid/1.9g/gnu-4.9.2 Adds squid 1.9g to your environment. suitesparse/4.5.5/gnu-4.9.2-serial Adds suitesparse 4.5.5 to your environment. SuiteSparse is a suite of sparse matrix algorithms. suitesparse/4.5.5/gnu-4.9.2-threaded Adds suitesparse 4.5.5 to your environment. SuiteSparse is a suite of sparse matrix algorithms. suitesparse/4.5.5/intel-2017-update1 Adds suitesparse 4.5.5 to your environment. SuiteSparse is a suite of sparse matrix algorithms. superlu-dist/5.1.0/intel-2015-update2 Adds superlu-dist 5.1.0 to your environment. SuperLU_DIST is the distributed-memory parallel version of SuperLU, a general purpose library for the direct solution of large, sparse, nonsymmetric systems of linear equations. superlu/5.2.1/intel-2015-update2 Adds superlu 5.2.1 to your environment. SuperLU is a general purpose library for the direct solution of large, sparse, nonsymmetric systems of linear equations. szip/2.1 Adds szip to your environment. ucx/1.8.0/gnu-4.9.2 Adds ucx 1.8.0 to your environment. Unified Communication X (UCX) provides an optimized communication layer for Message Passing (MPI), PGAS/OpenSHMEM libraries and RPC/data-centric applications. ucx/1.9.0/gnu-4.9.2 Adds ucx 1.9.0 to your environment. Unified Communication X (UCX) provides an optimized communication layer for Message Passing (MPI), PGAS/OpenSHMEM libraries and RPC/data-centric applications. unixodbc/2.3.7 Unix ODBC driver vtk/5.10.1/gnu-4.9.2 adds VTK 5.10.1 for GCC 4.9.2 to your environment. vtk/6.2.0/gnu-4.9.2 adds VTK 6.2.0 for GCC 4.9.2 to your environment. wavpack/5.1.0/gnu-4.9.2 WavPack is a completely open audio compression format providing lossless, high-quality lossy, and a unique hybrid compression mode. webkitgtk/2.2.4-1 Adds the webkitgtk-1 with webkitgtk-devel library to your environment. 2.2.4-1 EL7 RPM binaries. webkitgtk/2.4.9-1 Adds the webkitgtk with webkitgtk-devel library to your environment. 2.4.9-1 EL7 RPM binaries. zeromq/4.1.4/gnu-4.9.2 Adds zeromq 4.1.4 to your environment. ZeroMQ is a distributed messaging library that supports many message-passing patterns and methods. Development Tools \u00a7 This section is for modules for programs that are used in software development, profiling, or troubleshooting. It also contains language interpreters, like Python, Ruby, and Java. Module Description armforge/20.1.2 ArmForge is a collection of parallel profiling and debugging tools for x86_64 and ARM processors. autoconf/2.69 Adds GNU Autoconf Version 2.69 to your environment. autogen/5.18.12/gnu-4.9.2 AutoGen is a tool designed to simplify the creation and maintenance of programs that contain large amounts of repetitious text. automake/1.16.1 Adds GNU Automake Version 1.16.1 to your environment. bazel/0.7.0 Adds bazek to your environment. bazel/0.14.1/gnu-4.9.2 Adds bazek to your environment. bazel/0.21.0/gnu-4.9.2 Adds bazek to your environment. bazel/0.24.0/gnu-4.9.2 Adds bazek to your environment. bazel/0.24.1/gnu-4.9.2 Adds bazek to your environment. bazel/0.26.1/gnu-4.9.2 Adds bazek to your environment. bazel/0.27.1/gnu-4.9.2 Adds bazek to your environment. binutils/2.29.1/gnu-4.9.2 Adds binutils 2.29.1 to your environment. The GNU binutils are a collection of tools for working with binary files and assembling and disassembling machine instructions. bison/3.0.4/gnu-4.9.2 Adds Bison 3.0.4 to your environment. Bison is a general-purpose parser generator. chicken/4.13.0 adds Chicken 4.13.0 to your environment variables clojure/1.10.0.411 This is a module with no description string. clojure/1.10.3.1069 This is a module with no description string. cmake/3.2.1 adds Cmake 3.2.1 compilers to your environment variables cmake/3.7.2 adds Cmake 3.7.2 compilers to your environment variables cmake/3.13.3 adds Cmake 3.13.3 compilers to your environment variables cmake/3.19.1 adds Cmake 3.19.1 to your environment variables cmake/3.21.1 adds Cmake 3.21.1 to your environment variables cmdstan/2.24.1/gnu-4.9.2 Adds CmdStan 2.24.1 to your environment. cuda/7.5.18/gnu-4.9.2 Adds cuda 7.5.18 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/8.0.61-patch2/gnu-4.9.2 Adds cuda 8.0.61 patch2 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/9.0.176-patch4/gnu-4.9.2 Adds cuda 9.0.176 patch4 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/10.0.130/gnu-4.9.2 Adds cuda 10.0.130 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/10.1.243/gnu-4.9.2 Adds cuda 10.1.243 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cudnn/5.1/cuda-7.5 Adds cuDNN to your environment. cudnn/5.1/cuda-8.0 Adds cuDNN to your environment. cudnn/6.0/cuda-7.5 Adds cuDNN to your environment. cudnn/6.0/cuda-8.0 Adds cuDNN to your environment. cudnn/7.0.4/cuda-8.0 Adds cuDNN to your environment. cudnn/7.1.4/cuda-9.0 Adds cuDNN to your environment. cudnn/7.4.2.24/cuda-9.0 Adds cuDNN to your environment. cudnn/7.4.2.24/cuda-10.0 Adds cuDNN to your environment. cudnn/7.5.0.56/cuda-10.0 Adds cuDNN to your environment. cudnn/7.5.0.56/cuda-10.1 Adds cuDNN to your environment. cudnn/7.6.5.32/cuda-10.0 Adds cuDNN to your environment. cudnn/7.6.5.32/cuda-10.1 Adds cuDNN to your environment. ddt/6.0.4 This module adds DDT 6.0.4 with MIC support to your environment. depot_tools/788d9e0d adds depot_tools to your environment variables depot_tools/c03a9cf adds depot_tools to your environment variables dimemas/5.3.3/bindist Adds dimemas 5.3.3 to your environment. Dimemas is an abstracted network simulator for message-passing programs. doxygen/1.8.14 This is a module with no description string. emacs/24.5 Adds Emacs 24.5 to your environment. An extensible text editor. emacs/26.3 Adds Emacs 26.3 to your environment. An extensible text editor. emacs/28.1 Adds Emacs 28.1 to your environment. An extensible text editor. extrae/3.5.2/intel-2017 Adds extrae 3.5.2 to your environment. Extrae is an instrumentation framework to generate execution traces of the most used parallel runtimes. f2c/2013-09-26/gnu-4.9.2 Adds f2c 2013-09-26 to your environment. f2c is a source-to-source translator from Fortran 77 to C. It is not standards-compliant and is not recommended for use under any circumstances. flex/2.5.39 adds Flex 2.4.39 to your environment variables git/2.3.5 adds Git 2.3.5 to your environment variables git/2.10.2 adds Git 2.10.2 to your environment variables git/2.19.1 adds Git 2.19.1 to your environment variables git/2.32.0 adds Git 2.32.0 to your environment variables gperf/3.0.4/gnu-4.9.2 Adds gperf 3.0.4 to your environment. GNU gperf is a perfect hash function generator. guile/2.0.11/gnu-4.9.2 Adds guile 2.0.11 to your environment. haskellplatform/2014.2.0.0 adds Haskell Platform to your environment variables htop/1.0.3/gnu-4.9.2 Adds htop 1.0.3 to your environment. java/1.8.0_45 adds Oracle JDK 1.8.0_45 compilers to your environment variables java/1.8.0_92 adds Oracle JDK 1.8.0_92 compilers to your environment variables java/openjdk-8/8u212/hotspot adds Oracle JDK 8 compilers to your environment variables java/openjdk-8/8u212/openj9 adds Oracle JDK 8 compilers to your environment variables java/openjdk-11/11.0.1 adds Oracle JDK 11.0.1 compilers to your environment variables java/openjdk-11/11.0.3u7/hotspot adds Oracle JDK 11.0.3 compilers to your environment variables java/openjdk-11/11.0.3u7/openj9 adds Oracle JDK 11.0.3 compilers to your environment variables java/semeru-8/8u322-b06 adds IBM Semeru 8u322-b06 compilers to your environment variables java/semeru-11/11.0.14.1+1 adds IBM Semeru 11.0.14.1+1 compilers to your environment variables java/semeru-17/17.0.2+8 adds IBM Semeru 17.0.2+8 compilers to your environment variables java/temurin-8/8u322-b06 adds Adoptium Temurin 8u322-b06 compilers to your environment variables java/temurin-11/11.0.14+9 adds Adoptium Temurin 11.0.14+9 compilers to your environment variables java/temurin-11/11.0.14.1+1 adds Adoptium Temurin 11.0.14.1+1 compilers to your environment variables java/temurin-17/17.0.2+8 adds Adoptium Temurin 17.0.2+8 compilers to your environment variables julia/0.3.10 adds Julia 0.3.10 to your environment variables julia/0.4.0 adds Julia 0.4.0 to your environment variables julia/0.4.7 adds Julia 0.4.7 to your environment variables julia/0.5.0 adds Julia 0.5.0 to your environment variables julia/0.6.0 adds Julia 0.6.0 to your environment variables julia/0.7.0 adds Julia 0.7.0 to your environment variables julia/1.0.0 adds Julia 1.0.0 to your environment variables julia/1.1.0 adds Julia 1.1.0 to your environment variables julia/1.2.0 adds Julia 1.2.0 to your environment variables julia/1.3.1 adds Julia 1.3.1 to your environment variables julia/1.5.0 adds Julia 1.5.0 to your environment variables julia/1.6.0 adds Julia 1.6.0 to your environment variables julia/1.6.2 adds Julia 1.6.2 to your environment variables julia/1.7.0 adds Julia 1.7.0 to your environment variables julia/1.7.1 adds Julia 1.7.1 to your environment variables libtool/2.4.6 Adds libtool 2.4.6 to your environment. GNU libtool is a generic library support script. Libtool hides the complexity of using shared libraries behind a consistent, portable interface. ltrace/0.7.3/gnu-4.9.2 Adds ltrace 0.7.3 to your environment. lua/5.3.1 This module adds the Lua 5.3.1 package to your environment. Lua is a powerful, fast, lightweight, embeddable scripting language. mc/4.8.14 This module adds Midnight Commander 4.8.14 to your environment. mono/3.12.1 adds Mono 3.12.1 compilers to your environment variables mono/5.20.1.27/gnu-4.9.2 This is a module with no description string. nano/2.4.2 Adds nano 2.4.2 to your environment. A simple text editor. nano/4.9 The nano text editor. nano/6.1 The nano text editor. nasm/2.13.01 The Netwide Assembler, NASM, is an 80x86 and x86-64 assembler. ncl/6.0.0 adds NCL 6.0.0 to your environment variables ncl/6.3.0 adds NCL 6.3.0 to your environment variables nedit/5.6-aug15 Adds the NEdit GUI text editor to your environment. netlogo/6.1.0 adds NetLogo tooklit compilers to your environment variables paraver/4.6.4.rc1/bindist Adds paraver 4.6.4.rc1 to your environment. Paraver is a trace visualizer for post-mortem trace analysis. perl/5.16.0 This module adds adds Perl 5.16.0 to your environment. perl/5.22.0 This module adds adds Perl 5.22.0 to your environment. perlbrew/0.73 This module adds the Perlbrew 0.73 package to your environment. Use Perlbrew to manage your own Perls and Perl modules pigz/2.4 pigz is a fully functional replacement for gzip that exploits multiple processors and multiple cores when compressing data. pycuda/2017.1/python2 Adds Python2 PyCuda to your environment. MPI for Python. pycuda/2017.1/python3 Adds Python3 PyCuda to your environment. MPI for Python. pypy3/6.0.0/gnu-4.9.2 Pypy is a JIT-ing interpreter for the Python language. This is the version intended to be compatible with CPython 3.5. python/2.7.9 adds Python 2.7.9 with pip and virtualenv to your environment variables python/2.7.12 adds Python 2.7.12 with pip and virtualenv to your environment variables python/3.4.3 adds Python 3.4.3 with pip and virtualenv to your environment variables python/3.5.2 adds Python 3.5.2 with pip and virtualenv to your environment variables python/3.6.1/gnu-4.9.2 Adds Python 3.6.1 with pip and virtualenv to your environment variables. python/3.6.3 Adds Python 3.6.3 with pip and virtualenv to your environment variables. python/3.7.0 Adds Python 3.7.0 with pip and virtualenv to your environment variables. python/3.7.2 Adds Python 3.7.2 with pip and virtualenv to your environment variables. python/3.7.4 Adds Python 3.7.4 with pip and virtualenv to your environment variables. python/3.8.0 Adds Python 3.8.0 with pip and virtualenv to your environment variables. python/3.8.6 Adds Python 3.8.6 with pip and virtualenv to your environment variables. python/3.9.0 Adds Python 3.9.0 with pip and virtualenv to your environment variables. python/3.9.1 Adds Python 3.9.1 with pip and virtualenv to your environment variables. python/3.9.6 Adds Python 3.9.6 with pip and virtualenv to your environment variables. python/3.9.10 Adds Python 3.9.10 with pip and virtualenv to your environment variables. python/idp3/2019/3.6.8 Adds Intel Distribution for Python to your environment variables. python/miniconda3/4.5.11 Adds Miniconda 4.5.11 to your environment variables. python/miniconda3/4.10.3 Adds Miniconda 4.10.3 to your environment variables. qt/4.8.6/gnu-4.9.2 Adds Qt 4.8.6 to your environment. Qt is a cross-platform development tool. qt/5.4.2/gnu-4.9.2 Adds Qt 5.4.2 to your environment. Qt is a cross-platform development tool. qt/5.12.1/gnu-4.9.2 Adds Qt 5.12.1 to your environment. Qt is a cross-platform development tool. qwt/6.1.4/gnu-4.9.2 Adds Qwt 6.1.4 to your environment. racket/6.8 Adds Racket 6.8 to your enviroment. rappture/20130903 Adds the Rappture toolkit to your environment. rstudio-ide/1.4.1717 RStudio is an integrated development environment (IDE) for R ruby/2.2.2 Ruby 2.2.2 with RubyGems 2.4.8 and libffi 3.2.1 ruse/1.0.1 A command-line utility to periodically measure the memory use of a process and its subprocesses. ruse/2.0 Ruse is a command-line utility that periodically measures the resource use of a process and its subprocesses. sbcl/1.3.19 Adds Steelbank Common LISP 1.3.19 to your environment. sbcl/2.1.6 Adds Steelbank Common LISP 2.1.6 to your environment. sbt/1.6.1 This is a module with no description string. scala/2.13.8 This is a module with no description string. scala/3.1.1 This is a module with no description string. scons/2.3.4 adds scons 2.3.4 to your environment variables strace/4.12 Adds strace 4.12 to your environment. Trace system calls and signals. subversion/1.8.13 adds Subversion 1.8.13 to your environment variables subversion/1.14.1 adds Subversion 1.14.1 to your environment variables swig/3.0.5/gnu-4.9.2 This module adds the SWIG 3.0.5 package to your environment. SWIG is an interface compiler that connects programs written in C and C++ with scripting languages such as Perl, Python, Ruby, and Tcl. swig/3.0.7/gnu-4.9.2 This module adds the SWIG 3.0.7 package to your environment. SWIG is an interface compiler that connects programs written in C and C++ with scripting languages such as Perl, Python, Ruby, and Tcl. tcl/8.6.8 This is a modulefile for Tcl/Tk 8.6.8 v8/3.15 adds v8 to your environment variables v8/5.6 adds v8 to your environment variables valgrind/3.11.0/gnu-4.9.2 Adds valgrind 3.11.0 to your environment. Valgrind is a framework for building dynamic analysis tools. It includes the memgrind and cachegrind tools. xbae/4.60.4 Adds the Xbae Matrix Widget to your environment. xorg-utils/X11R7.7 Adds xorg-utils from X11R7.7 to your environment. Includes util-macros-1.17, makedepend-1.0.5 libXdmcp-1.1.1 and libXScrnSaver-1.2.2 and imake-1.0.7. Core Modules \u00a7 These modules refer to groups of system tools, rather than applications. They're intended to help you use the system, and some are loaded by default. Module Description gerun adds gerun wrapper to your environment variables lm-utils/1.0 adds utilities to check license manager status to your environment. mrxvt/0.5.4 Adds Mrxvt a multi-tabbed xterm replacement to your environment. ops-tools/1.0.0 Tools for Ops work ops-tools/1.1.0 Tools for Ops work ops-tools/2.0.0 Tools for Ops work pipe-gifts/1.0.0 A tool for transferring files between users on the same node: 'pipe-give' and 'pipe-receive'. pv/1.6.6 Pipe Viewer (pv) is a tool for monitoring the progress of data through a pipeline. rcps-core/1.0.0 adds a core set of applications and libraries to your environment. rlwrap/0.43 adds rlwrap 0.43 to your environment variables screen/4.2.1 adds Screen 4.2.1 to your environment variables screen/4.8.0-ucl1 adds Screen 4.8.0 to your environment variables singularity-env/1.0.0 Sets up the environment and cache directories for the Singularity container runtime. userscripts/1.0.0 Adds userscripts dir to your path. Provides jobhist among other utilities. userscripts/1.1.0 Adds userscripts dir to your path. Provides jobhist among other utilities. userscripts/1.2.0 Adds userscripts dir to your path. Provides jobhist among other utilities. userscripts/1.3.0 Adds userscripts dir to your path. Provides jobhist among other utilities. userscripts/1.4.0 Adds userscripts dir to your path. Provides jobhist among other utilities. GATK Some GATK tools require conda and associated libraries. Beta Modules \u00a7 This section is for modules we're still trying out. They may or may not work with applications from other sections. Module Description amber/20/mpi/gnu-10.2.0 Adds AMBER 20 and AmberTools 21 to your environment amber/20/openmp/gnu-10.2.0 Adds AMBER 20 and AmberTools 21 to your environment. OpenMP threaded version. amber/20/serial/gnu-10.2.0 Adds AMBER 20 and AmberTools 21 to your environment armadillo/10.4.0/gnu-10.2.0 Adds Armadillo Version 10.4.0 C++ library to your environment. arpack-ng/3.8.0-threaded/gnu-10.2.0 Adds arpack-ng 3.8.0 to your environment. ARPACK-NG is a collection of Fortran77 subroutines designed to solve large scale eigenvalue problems. atlas-adna/0.9_2021-04-16/gnu-10.2.0 Adds ATLAS Ancient DNA Analysis package to your environment. atlas-adna/0.9_2021-08-13/gnu-10.2.0 Adds ATLAS Ancient DNA Analysis package to your environment. bedtools/2.30.0/gnu-10.2.0 Adds bedtools 2.30.0 to your environment. The bedtools utilities are a swiss-army knife of tools for a wide-range of genomics analysis tasks. binutils/2.36.1/gnu-10.2.0 Adds binutils 2.36.1 to your environment. The GNU binutils are a collection of tools for working with binary files and assembling and disassembling machine instructions. compilers/chapel/1.26.0 Chapel 1.26.0 for GCC compilers/gnu/7.3.0 The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). compilers/gnu/8.3.0 The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). compilers/gnu/9.2.0 The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). compilers/gnu/10.2.0 The GNU Compiler Collection includes front ends for C, C++, Objective-C, and Fortran, as well as libraries for these languages (libstdc++,...). cp2k/8.2/ompi/gnu-10.2.0 Adds CP2K to your environment. cuda/10.1.243/gnu-7.3.0 Adds cuda 10.1.243 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/11.2.0/gnu-10.2.0 Adds cuda 11.2.0 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/11.3.1/gnu-10.2.0 Adds cuda 11.3.1 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cudnn/8.2.1.32/cuda-11.3 Adds cuDNN 8.2.1 to your environment. fftw/3.3.8/gnu-7.3.0 Adds FFTW 3.3.8 for GCC 7.3.0 compilers to your environment variables. Includes single and double precision, plus long-double and quad. Includes OpenMP and POSIX threads libraries. fftw/3.3.8/gnu-9.2.0 Adds FFTW 3.3.8 for GCC 9.2.0 compilers to your environment variables. Includes single and double precision, plus long-double and quad. Includes OpenMP and POSIX threads libraries. fftw/3.3.9/gnu-10.2.0 Adds FFTW 3.3.9 for GCC 10.2.0 compilers to your environment variables. Includes single and double precision, plus long-double and quad. Includes OpenMP and POSIX threads libraries. gcc-libs/7.3.0 Base module for gcc 7.3.0 -- does not set the standard compiler environment variables. The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). gcc-libs/8.3.0 Base module for gcc 8.3.0 -- does not set the standard compiler environment variables. The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). gcc-libs/9.2.0 Base module for gcc 9.2.0 -- does not set the standard compiler environment variables. The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). gcc-libs/10.2.0 Base module for gcc 10.2.0 -- does not set the standard compiler environment variables. The GNU Compiler Collection includes front ends for C, C++, Objective-C, and Fortran, as well as libraries for these languages (libstdc++,...). Patch 95889 for __has_include applied. gdal/3.0.4/gnu-9.2.0 adds GDAL 3.0.4 with PROJ.4 7.0.0 to your environment variables. gdal/3.1.3/gnu-9.2.0 adds GDAL 3.1.3 with PROJ.4 7.0.0 to your environment variables. gdal/3.3.2/gnu-10.2.0 adds GDAL 3.3.2 with PROJ.4 8.1.1 to your environment variables. geos/3.8.1/gnu-9.2.0 Adds geos 3.8.1 to your environment. GEOS (Geometry Engine, Open Source) is a library for performing various spatial operations, especially for boolean operations on GIS data. Note this version does not include the SWIG, Python, Ruby, or PHP bindings. geos/3.9.1/gnu-10.2.0 Adds geos 3.9.1 to your environment. GEOS (Geometry Engine, Open Source) is a library for performing various spatial operations, especially for boolean operations on GIS data. Note this version does not include the SWIG, Python, Ruby, or PHP bindings. gmt/6.0.0/gnu-9.2.0 adds GMT 6.0.0 to your environment variables gmt/6.2.0/gnu-10.2.0 adds GMT 6.2.0 to your environment variables grass/8.0-dev/gnu-10.2.0 Adds GRASS GIS 8.0 Development Version to your environment. grass/8.0dev adds UCL set of modules for GRASS GIS 8.0 Dev to your environment gromacs/2020.1/cuda-10.1 Adds gromacs 2020.1 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2020.1/intel-2020 Adds gromacs 2020.1 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2020.4/cuda-10.1 Adds gromacs 2020.4 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2020.4/intel-2020 Adds gromacs 2020.4 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2021.2/gnu-7.3.0 Adds gromacs 2021.2 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2021.5/cuda-11.3 Adds gromacs 2021.5 built with CUDA 11.3 to your environment. ThreadMPI and OpenMPI versions included. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gsl/2.6/gnu-9.2.0 adds GSL 2.6 for GCC 9.2.0 to your environment. gsl/2.7/gnu-10.2.0 adds GSL 2.7 for GCC 10.2.0 to your environment. hdf/5-1.10.5/gnu-9.2.0 Adds hdf 5-1.10.5 to your environment. Serial version built with GNU. hdf/5-1.10.6/gnu-10.2.0 Adds hdf 5-1.10.6 to your environment. Serial version built with GNU 10.2.0. jags/4.3.0/gnu-10.2.0-openblas Adds JAGS 4.3.0 to your environment. lammps/29sep21up2/basic-fftw/gnu-10.2.0 Adds LAMMPS 29Sep2021 Update 2 to your environment. Binary is lmp_mpi. lammps/29sep21up2/basic/gnu-10.2.0 Adds LAMMPS 29Sep2021 Update 2 to your environment. Binary is lmp. lammps/29sep21up2/basic/gnu-10.2.0-aristotle Adds LAMMPS 29Sep2021 Update 2 to your environment. Binary is lmp_aristotle. lammps/29sep21up2/basic/intel-2020 Adds LAMMPS 29Sep2021 Update 2 to your environment. Binary is lmp_mpi or lmp_default. lammps/29sep21up2/gpu/gnu-10.2.0 Adds LAMMPS 29Sep2021 Update 2 to your environment. Binary is lmp. lammps/29sep21up2/gpu/intel-2020 Adds LAMMPS 29Sep2021 Update 2 with gpu package to your environment. Binary is lmp_gpu or lmp_default. lammps/29sep21up2/userintel/intel-2020 Adds LAMMPS 29Sep2021 Update 2 with INTEL package to your environment. Binary is lmp_mpi or lmp_default. libpng/1.6.37/gnu-9.2.0 Adds libpng 1.6.37 to your environment. matlab/full/r2018a/9.4-prefdir-fix Adds Matlab R2018a to your environment. med/4.0.0/gnu-9.2.0 Adds med 4.0.0 to your environment. Allows reading and writing of MED format files. mpi/openmpi/3.1.4/gnu-7.3.0 Adds openmpi 3.1.4 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.5/gnu-9.2.0 Adds openmpi 3.1.5 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/4.0.5/gnu-10.2.0 Adds openmpi 4.0.5 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mumps/5.2.1/gnu-9.2.0 Adds mumps 5.2.1 to your environment. Sequential (threaded) version built with GNU, OpenBLAS and METIS. namd/2.13/intel-2018-update3/testing Adds NAMD 2.13 to your environment namd/2.13/plumed/intel-2018-update3/testing Adds NAMD 2.13 to your environment netcdf/4.7.4/gnu-9.2.0 adds NetCDF 4.7.4 for GCC 9.2.0 to your environment. netcdf/4.8.1/gnu-10.2.0 adds NetCDF 4.8.1 for GCC 10.2.0 to your environment. openblas/0.3.7-native-threads/gnu-9.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. openblas/0.3.7-openmp/gnu-9.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. openblas/0.3.7-serial/gnu-9.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. openblas/0.3.13-native-threads/gnu-10.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. openblas/0.3.13-openmp/gnu-10.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. openblas/0.3.13-serial/gnu-10.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. pcre2/10.35/gnu-9.2.0 Adds pcre2 10.35 to your environment. PCRE (Perl-compatible regular expressions) is a C library implementing regular expression pattern-matching using the same semantics as Perl 5. pcre2/10.37/gnu-10.2.0 Adds pcre2 10.37 to your environment. PCRE (Perl-compatible regular expressions) is a C library implementing regular expression pattern-matching using the same semantics as Perl 5. proj.4/7.0.0/gnu-9.2.0 Adds the PROJ.4 Cartographic Projections library to your environment. proj.4/8.1.1/gnu-10.2.0 Adds the PROJ.4 Cartographic Projections library to your environment. protobuf/3.14.0/gnu-9.2.0 adds Google Protocol Buffers for GCC 9.2.0 to your environment. protobuf/3.17.3/gnu-10.2.0 adds Google Protocol Buffers for GCC 10.2.0 to your environment. prsice/2.3.3/gnu-9.2.0 PRSice (pronounced 'precise') is a software package for calculating, applying, evaluating and plotting the results of polygenic risk scores (PRS). python/3.9.6-gnu-10.2.0 Adds Python 3.9.6 compiled with GNU 10.2.0 with pip and virtualenv to your environment variables. python3/3.9-gnu-10.2.0 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list quip/c6359e1/gnu-10.2.0 Adds QUIP to your environment built with GNU 10.2.0 for recent versions of LAMMPS r/3.6.3-openblas/gnu-9.2.0 Adds R 3.6.3 and Bioconductor 3.10 to your environment. r/4.0.2-openblas/gnu-9.2.0 Adds R 4.0.2 and Bioconductor 3.11 to your environment. r/4.1.1-openblas/gnu-10.2.0 Adds R 4.1.1 and Bioconductor 3.13 to your environment. r/r-3.6.3_bc-3.10 adds UCL recommended set of R packages to your environment variables r/r-4.0.2_bc-3.11 adds UCL recommended set of R packages for R 4.0.2 to your environment variables r/r-4.1.1_bc-3.13 adds UCL recommended set of R packages for R 4.1.1 to your environment variables r/r-4.2.0_bc-3.15 adds UCL recommended set of R packages for R 4.2.0 to your environment variables rcps-core-beta/gnu-7.3.0 adds a core set of applications and libraries to your environment. rcps-core-beta/gnu-8.3.0 adds a core set of applications and libraries to your environment. rcps-core-beta/gnu-9.2.0 adds a core set of applications and libraries to your environment. rcps-core-beta/gnu-10.2.0 adds a core set of applications and libraries to your environment. sac/102.0-test/gnu-10.2.0 Adds SAC 102.0 to your environment. scalapack/2.1.0/gnu-9.2.0/openblas-0.3.7 ScaLAPACK is a library of high-performance linear algebra routines for parallel distributed memory machines. ScaLAPACK solves dense and banded linear systems, least squares problems, eigenvalue problems, and singular value problems. sqlite/3.36.0/gnu-10.2.0 Adds SQLite Version 3.36.0 to your environment. stata/16 Adds Stata/MP 16 to your environment. superlu/5.2.1/gnu-10.2.0 Adds superlu 5.2.1 to your environment. SuperLU is a general purpose library for the direct solution of large, sparse, nonsymmetric systems of linear equations. ucx/1.9.0/gnu-10.2.0 Adds ucx 1.9.0 to your environment. Unified Communication X (UCX) provides an optimized communication layer for Message Passing (MPI), PGAS/OpenSHMEM libraries and RPC/data-centric applications. udunits/2.2.26/gnu-9.2.0 adds the UDUNITS-2 package to your environment. udunits/2.2.28/gnu-10.2.0 adds the UDUNITS-2 package to your environment. Workaround Modules \u00a7 Sometimes we'll find a problem that can't be fixed properly, but can be worked-around by doing something that can be loaded as a module. That kind of module goes in this section. Module Description bazel-compiler-helpers/intel-2018 Adds bazel compiler wrappers to your environment. getcwd-autoretry This module uses LD_PRELOAD to shadow the getcwd function with a version that retries on failure, and is intended to workaround a bug in the Lustre filesystem.","title":"General Software Lists"},{"location":"Installed_Software_Lists/module-packages/#general-software-lists","text":"Our clusters have a wide range of software installed, available by using the modules system. The module files are organised by name, version, variant (where applicable) and, if relevant, the compiler version used to build the software. If no compiler version is given, either no compiler was required, or only the base system compiler ( /usr/bin/gcc ) and libraries were used. When we install applications, we try to install them on all of our clusters, but sometimes licence restrictions prevent it. If something seems to be missing, it may be because we are not able to provide it. Please contact us for more information if this is hindering your work. The lists below were last updated at 12:35:21 (+0100) on 10 Oct 2022, and are generated from the software installed on the Myriad cluster.","title":"General Software Lists"},{"location":"Installed_Software_Lists/module-packages/#bundles","text":"Some applications or tools depend on a lot of other modules, or have some awkward requirements. For these, we sometimes make a \"bundle\" module in this section, that loads all the dependencies. For Python and R in particular, we also have recommended bundles that load the module for a recent version of Python or R, along with a collection of packages for it that have been requested by users, and the modules those packages require. The lists of Python and R packages installed for those bundles are on separate pages: Python packages R packages We'll sometimes include /new and /old versions of these bundles, if we've recently made a version switch or are intending to make one soon. We send out emails to the user lists about version changes, so if you use these bundles, you should look out for those. Module Description beta-modules This module adds the beta module space to your environment. bioperl/recommended Loads all the modules needed to use BioPerl. blic-modules Adds Cancer Biology supported modules to your environment. brunel-modules Adds Brunel licensed software module space to module avail. cancerit/20190218 adds UCL set of cancerit packages to your environment variables cancerit/recommended adds UCL recommended set of cancerit packages to your environment variables chemistry-modules Adds Chemistry Department supported modules to your environment. climate-tools/recommended Adds set of default applications to the environment for climate science users. deep_earth Sets up VASP, Gnuplot etc for Earth Sciences default-modules-aristotle Adds default Aristotle modules to your environment. default-modules/2015 Adds default modules to your environment. default-modules/2017 Adds default modules to your environment. default-modules/2018 Adds default modules to your environment. economics-modules Adds Economics Department modules to your environment. farr-modules Adds FARR supported modules to your environment. farr/recommended Adds set of default applications to the environment for FARR users. gmt/new Adds set of default modules to the environment for GMT users. gmt/old Adds set of default modules to the environment for gmt users. gmt/recommended Adds set of default modules to the environment for gmt users. imperial-modules Adds Imperial College licensed software module space to module avail. naglib/mark27-intel-2019 adds the NAG Library Mark 27 and required modules to your environment. octave/recommended Octave is an open source competitor to Matlab. personal-modules Adds personal modules to your environment. physics-modules Adds Pysics Department supported modules to your environment. pypy3/3.5-compat Adds UCL recommended set of Pypy3 python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/pypy-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/pypy-3.list python2/recommended Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-2.list python3/3.4 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/3.5 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/3.6 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/3.7 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/3.8 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/3.9 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list python3/recommended Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list r/new adds UCL recommended set of R packages for R 4.2.0 to your environment variables r/old adds UCL recommended set of R packages to your environment for R 3.6.0 r/r-3.5.1_bc-3.7 adds UCL recommended set of R packages to your environment variables r/r-3.6.0_bc-3.9 adds UCL recommended set of R packages to your environment variables r/recommended adds UCL recommended set of R packages for R 4.2.0 to your environment variables rsd-modules Adds Research Software Development supported modules to your environment. thermo-modules Adds modules for Molecular Thermodynamics to your environment. torch-deps Loads the dependencies for Torch and makes a quick-install alias. workaround-modules This module adds the workarounds module space to your environment.","title":"Bundles"},{"location":"Installed_Software_Lists/module-packages/#applications","text":"Module Description abaqus/2017 Adds Abaqus 2017 to your environment. abaqus/2017-intelmpi Adds Abaqus 2017 to your environment. abinit/9.6.2/intel-2018-update3 adds ABINIT Version 9.6.2 compiled using Intel 2018 to your environment. adf/2014.10 Adds ADF 2014.10 to your environment. afni/22.2.05 Adds AFNI to your environment. afni/20151030 Adds AFNI to your environment. afni/20181011 Adds AFNI to your environment. amber/14/mpi/intel-2015-update2 Adds AMBER 14 to your environment amber/14/openmp/intel-2015-update2 Adds AMBER 14 to your environment amber/14/serial/intel-2015-update2 Adds AMBER 14 to your environment amber/16/mpi/gnu-4.9.2 Adds AMBER 16 to your environment amber/16/mpi/intel-2015-update2 Adds AMBER 16 to your environment amber/16/openmp/gnu-4.9.2 Adds AMBER 16 to your environment amber/16/openmp/intel-2015-update2 Adds AMBER 16 to your environment amber/16/serial/gnu-4.9.2 Adds AMBER 16 to your environment amber/16/serial/intel-2015-update2 Adds AMBER 16 to your environment ansys/17.2 Adds Ansys CFX/Fluent etc to your environment ansys/18.0 Adds Ansys CFX/Fluent etc to your environment ansys/19.1 Adds Ansys CFX/Fluent, EM etc to your environment ansys/2019.r3 Adds Ansys CFX/Fluent, EM etc to your environment ansys/2021.r2 Adds Ansys CFX/Fluent, EM etc to your environment ants/2.1.0 Adds ANTs 2.1.0 (Advanced Normalization Tools) to your environment. ANTs is popularly considered a state-of-the-art medical image registration and segmentation toolkit. approxwf/gnu-4.9.2 Adds ApproxWF to your environment. arrayfire/3.5.0/gnu-4.9.2 Adds ArrayFire 3.5.0 to your environment. asp/2.6.2 Adds NASA Ames Stereo Pipeline (ASP) 6.2.2 to your environment. autodock/4.2.6 Adds AutoDock and AutoGrid 4.2.6 to your environment. AutoDock is a suite of automated docking tools. It is designed to predict how small molecules, such as substrates or drug candidates, bind to a receptor of known 3D structure. bamtools/2.4.0/gnu-4.9.2 Adds BamTools 2.4.0 to your environment. BamTools provides both a programmer's API and an end-user's toolkit for handling BAM files. bcftools/1.2/gnu-4.9.2 Adds BCFtools 1.2 to your environment. Reading/writing BCF2/VCF/gVCF files and calling/filtering/summarising SNP and short indel sequence variants bcftools/1.3.1/gnu-4.9.2 Adds BCFtools 1.3.1 to your environment. Reading/writing BCF2/VCF/gVCF files and calling/filtering/summarising SNP and short indel sequence variants bcftools/1.11/gnu-4.9.2 Tools for reading/writing BCF2/VCF/gVCF files and calling/filtering/summarising SNP and short indel sequence variants. bcftools/2.1/gnu-4.9.2 Adds BCFtools 1.2 to your environment. Reading/writing BCF2/VCF/gVCF files and calling/filtering/summarising SNP and short indel sequence variants bcl2fastq/1.8.4 Adds bcl2fastq 1.8.4 to your environment. bcl2fastq2/2.19.1 Adds bcl2fastq2 2.19.1 to your environment. bcl2fastq2/2.20.0-rpm Adds bcl2fastq2 2.20.0.422 from rpm to your environment. beast/2.3.0 Adds BEAST 2.3.0 with addons to your PATH. bedtools/2.25.0 Adds bedtools 2.25.0 to your environment. The bedtools utilities are a swiss-army knife of tools for a wide-range of genomics analysis tasks. bgen/1.1.4 Adds BGen 1.1.4 to your environment. blast+/2.2.30/intel-2015-update2 This module adds the BLAST+ 2.2.30 package to your environment. blast+/2.13.0/gnu-7.3.0 This module adds the BLAST+ 2.13.0 package to your environment. blast/2.2.26 Adds Blast 2.2.26 to your environment. blender/2.79 Adds Blender Version 2.79 to your environment. boltztrap/1.2.5/intel-2018 Adds boltztrap 1.2.5 to your environment. bowtie/1.1.2 Adds Bowtie 1.1.2 to your environment. bowtie2/2.2.5 Adds Bowtie2 2.2.5 to your environment. bwa/0.6.2/gnu-4.9.2 Adds BWA 0.7.12 to your environment. BWA is a software package for mapping DNA sequences against a large reference genome, such as the human genome. bwa/0.7.12/gnu-4.9.2 Adds BWA 0.7.12 to your environment. BWA is a software package for mapping DNA sequences against a large reference genome, such as the human genome. caffe/1.0/cpu Adds Caffe 1.0 for CPU to your environment. caffe/1.0/cudnn Adds Caffe 1.0 for CUDA+CudNN to your environment. caffe/1.0/gpu Adds Caffe 1.0 for CUDA to your environment. cancerit/20190218-python-2.7.12/gnu-4.9.2 Adds CancerIT program versions as of 20190218 to your environment. The CancerIT Suite is a collection of linked bioinformatics tools. cancerit/gnu-4.9.2 Adds the cancer it suite to your environment. castep/17.2/intel-2017 Adds castep 17.2 to your environment. CASTEP is a program that uses density functional theory to calculate the properties of materials from first principles. castep/17.21/intel-2017 Adds castep 17.21 to your environment. CASTEP is a program that uses density functional theory to calculate the properties of materials from first principles. castep/19.1.1/intel-2019 CASTEP is a program that uses density functional theory to calculate the properties of materials from first principles. cctools/5.4.1/gnu-4.9.2 Adds cctools 5.4.1 to your environment. cctools/7.0.11/gnu-4.9.2 Adds cctools 7.0.11 to your environment. cdo/2.0.6/gnu-10.2.0 This module adds the CDO 2.0.6 package to your environment. cellranger/5.0.1 Adds Cell Ranger 5.0.1 to your environment. Cell Ranger is a set of analysis pipelines that process Chromium single-cell RNA-seq output to align reads, generate feature-barcode matrices and perform clustering and gene expression analysis. cellranger/6.0.1 Adds Cell Ranger 6.0.1 to your environment. Cell Ranger is a set of analysis pipelines that process Chromium single-cell RNA-seq output to align reads, generate feature-barcode matrices and perform clustering and gene expression analysis. cesm/1.0.6/intel-2015-update2 Adds CESM 1.0.6 to your environment. cesm/1.2.2/intel-2015-update2 Adds CESM 1.2.2 to your environment. cfd-ace/2014.1 Adds CFD-ACE+ to your execution path. Only on Kathleen and Myriad. cfd-ace/2018.0 Adds CFD-ACE+ to your execution path. Only on Kathleen and Myriad. chemshell/3.7.1/mpi/gulp4.5 This is a modulefile for ChemShell 3.7.1, MPI+GULP version. Can be used to run other packages if you load a module for those. chemshell/3.7.1/standalone This is a modulefile for ChemShell 3.7.1, standalone serial version. Can be used to run GULP and other packages if you load a module for those. clustal-omega/1.2.1 Adds Clustal Omega 1.2.1 to your environment. clustal-w/2.1 Adds Clustal W 2.1 to your environment. cmg/2017.101 Adds CMG Reservoir Simulation Software Version 2017.101 to your environment. cmg/2018.101 Adds CMG Reservoir Simulation Software Version 2018.101 to your environment. cmg/2019.101 Adds CMG Reservoir Simulation Software Version 2019.101 to your environment. collectl/4.0.2 [collectl/4.0.2] collectl is a tool for tracking and monitoring various node usage statistics. compucell3d/3.7.4 Adds CompuCell3D to your environment comsol/6.0 COMSOL is a general-purpose macroscopic physics simulation package. comsol/52 Adds the COMSOL 52 binaries to your environment. COMSOL Multiphysics\u00ae is a general-purpose software platform, based on advanced numerical methods, for modeling and simulating physics-based problems. Module must be loaded once from a login node prior to running jobs. comsol/52a Adds the COMSOL 52a binaries to your environment. COMSOL Multiphysics\u00ae is a general-purpose software platform, based on advanced numerical methods, for modeling and simulating physics-based problems. Module must be loaded once from a login node prior to running jobs. comsol/53a Adds COMSOL Multiphysics Version 53a to your environment. comsol/56 Adds COMSOL Multiphysics Version 56 to your environment. cosi-corr/oct14 Adds COSI-Corr Version Oct14 for use with ENVI 5.5.2/5.5.3 to your environment. covid-19-spatial-sim/0.8.0/intel-2020 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.9.0/gnu-4.9.2 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.13.0/gnu-4.9.2 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.14.0/gnu-4.9.2 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.14.0/intel-2020 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.15.0/gnu-4.9.2 SpatialSim COVID-19 pandemic modelling tool from Imperial College. covid-19-spatial-sim/0.15.0/intel-2020 SpatialSim COVID-19 pandemic modelling tool from Imperial College. cp2k/4.1/ompi/gnu-4.9.2 Adds CP2K to your environment. cp2k/5.1/ompi-plumed/gnu-4.9.2 Adds CP2K to your environment. cp2k/5.1/ompi/gnu-4.9.2 Adds CP2K to your environment. cp2k/6.1/ompi/gnu-4.9.2 Adds CP2K to your environment. cp2k/7.1/ompi/gnu-4.9.2 Adds CP2K to your environment. cpmd/4.1/intel-2017 Adds CPMD 4.1 to your environment. crystal14/v1.0.3 Adds Crystal14 v1.0.3 to your environment. crystal14/v1.0.4 Adds Crystal14 v1.0.4 to your environment. crystal14/v1.0.4_2017 Adds Crystal14 v1.0.4 to your environment. crystal17/v1.0.1 Adds Crystal17 v1.0.1 to your environment. crystal17/v1.0.2/intel-2017 The CRYSTAL program computes the electronic structure of periodic systems within Hartree Fock, density functional or various hybrid approximations. cuba/4.2/gnu-4.9.2 adds Cuba Numerical Integration Package Version 4.2 to your environment. cufflinks/2.2.1 Adds Cufflinks 2.2.1 to your environment. curl/7.47.1/gnu-4.9.2 Adds curl 7.47.1 to your environment. dakota/6.12.0-bindist Dakota is a package for performing parametric analysis with other software packages. datamash/1.4 This is a module with no description string. deeptools/3.0.2 Adds deeptools to your environment. delly/0.7.8-bindist Delly is an integrated structural variant (SV) prediction method that can discover, genotype and visualize deletions, tandem duplications, inversions and translocations at single-nucleotide resolution in short-read massively parallel sequencing data. dftbplus/17.1/intel-2017 DFTB+ is a quantum mechanical simulation software package, based on the Density Functional Tight Binding (DFTB) method. dftbplus/18.2/intel-2018 DFTB+ is a software package for carrying out fast quantum mechanical atomistic calculations based on the Density Functional Tight Binding method. dftbplus/19.1/intel-2018 DFTB+ is a software package for carrying out fast quantum mechanical atomistic calculations based on the Density Functional Tight Binding method. dftbplus/dev/d07f92e/intel-2017 DFTB+ is a quantum mechanical simulation software package, based on the Density Functional Tight Binding (DFTB) method. dl_monte/2.07/intel-2018 DL_MONTE is an open-source program for applying Monte Carlo molecular simulation to a wide range of systems. dl_poly/4.07/intel-2015-update2 Adds DL_POLY 4.07 to your environment dl_poly/4.08-plumed-2.3.1/intel-2017 Adds dl_poly 4.08 to your environment. DL_POLY is a general purpose classical molecular dynamics (MD) simulation software developed at Daresbury Laboratory. This version has been linked against the PLUMED metadynamics library. dl_poly/4.08/intel-2015-update2 Adds DL_POLY 4.08 to your environment. dl_poly/4.09/intel-2018 Adds DL_POLY 4.09 to your environment. dl_poly/4.10.0/intel-2018 Adds DL_POLY 4.10.0 to your environment. DL_POLY is a general purpose classical molecular dynamics (MD) simulation software. dl_poly/5.0.0/intel-2018 DL_POLY is a general-purpose classical molecular dynamics (MD) simulation software package. dl_poly/classic/1.9/intel-2015-update2 Adds DL_POLY Classic 1.9 to your environment dock/6.9-impi/intel-2018 The DOCK suite of programs is designed to find favorable orientations of a ligand in a receptor. This is the Intel MPI build, intended for high-performance parallel runs. dock/6.9-reference/gnu-4.9.2 The DOCK suite of programs is designed to find favorable orientations of a ligand in a receptor. This is a reference build intended to be close to the version of the software the developers test with: a serial build using the GNU compilers. dos2unix/7.3 Adds dos2unix 7.3 to your environment. Text format converters dos2unix, unix2dos, mac2unix, unix2mac. dssp/3.0.0/gnu-4.9.2 Adds dssp 3.0.0 to your environment. DSSP calculates DSSP entries from Protein Databank (PDB) entries. dymola/2020.1-1 Dymola is a commercial modeling and simulation environment based on the open Modelica modeling language. ea-utils/822 Adds ea-utils to your environment. easylausanne/55c7bf0 Adds Easy Lausanne to your environment. eigensoft/6.1.1/gnu-4.9.2 Adds EIGENSOFT 6.1.1 to your environment. Population genetics methods and EIGENSTRAT stratification correction method. elk/4.0.15/intel-2018 Adds Elk 4.0.15 to your environment. Binary is elk. elk/4.0.15/intel-2018+wa Adds Elk 4.0.15 to your environment. Binary is elk. elk/4.3.6/intel-2017 Adds Elk 4.3.6 to your environment. Binary is elk. elk/4.3.6/intel-2017+wa Adds Elk 4.3.6 to your environment. Binary is elk. elk/5.2.14/intel-2018 Elk is an all-electron full-potential linearised augmented-planewave (FP-LAPW) code. elk/6.8.4/intel-2018 An all-electron full-potential linearised augmented-planewave (FP-LAPW) code. energyplus/8.9.0-bindist EnergyPlus\u2122 is a whole building energy simulation program that engineers, architects, and researchers use to model both energy consumption\u2014for heating, cooling, ventilation, lighting and plug and process loads\u2014and water use in buildings. energyplus/9.1.0-bindist EnergyPlus\u2122 is a whole building energy simulation program that engineers, architects, and researchers use to model both energy consumption\u2014for heating, cooling, ventilation, lighting and plug and process loads\u2014and water use in buildings. envi/5.5.2 Adds ENVI 5.5.2 with IDL 8.7.2 to your environment. envi/5.5.3 Adds ENVI 5.5.3 with IDL 8.7.3 to your environment. epacts/3.3.0/gnu-4.9.2 Adds EPACTS 3.3.0 to your environment. examl/8dcf2cc/gnu-4.9.2 Adds ExaML to your environment. exonerate/2.2.0 Adds Exonerate to your environment. fasta/36.3.8d/gnu-4.9.2 Adds the cancer it suite to your environment. fastqc/0.11.5 Adds FastQC 0.11.5 to your environment. A quality control application for high throughput sequence data. fastqc/0.11.8 Adds FastQC 0.11.8 to your environment. A quality control application for high throughput sequence data. ffmpeg/4.1/gnu-4.9.2 FFmpeg is a framework for encoding, decoding, muxing, demuxing, encoding, transcoding, streaming, filtering, and playing many types of audio and video media. fgbio/0.5.1 Adds fgbio to your environment. fgbio is a command line toolkit for working with genomic and particularly next generation sequencing data. fgbio/0.6.1 Adds fgbio to your environment. fgbio is a command line toolkit for working with genomic and particularly next generation sequencing data. figtree/1.4.2 Adds Figtree 1.4.2. foldx/4 Adds FoldX Suite 4.0 to your environment. foldx/5 Adds FoldX Suite 5.0 to your environment. freesurfer/5.3.0 Adds FreeSurfer 5.3.0 to your environment. FreeSurfer is a set of automated tools for reconstruction of the brain's cortical surface from structural MRI data, and overlay of functional MRI data onto the reconstructed surface. freesurfer/6.0.0 Adds FreeSurfer 6.0.0 to your environment. FreeSurfer is a set of automated tools for reconstruction of the brain's cortical surface from structural MRI data, and overlay of functional MRI data onto the reconstructed surface. freesurfer/7.2.0 Adds FreeSurfer 7.2.0 to your environment. FreeSurfer is a set of automated tools for reconstruction of the brain's cortical surface from structural MRI data, and overlay of functional MRI data onto the reconstructed surface. fsl/5.0.9 Adds FSL 5.0.9 (FMRIB Software Library) to your environment. FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data. fsl/5.0.10 Adds FSL 5.0.10 (FMRIB Software Library) to your environment. FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data. fsl/6.0.0 Adds FSL 6.0.0 (FMRIB Software Library) to your environment. FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data. fsl/6.0.0_cuda Adds FSL 6.0.0 CUDA (FMRIB Software Library) to your environment. FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data. fsl/6.0.4 Adds FSL 6.0.4 CUDA (FMRIB Software Library) to your environment. FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data. gamess/5Dec2014_R1/intel-2015-update2 Adds GAMESS 5Dec2014_R1 to your environment, built for Intel MPI. Uses ~/Scratch/gamess for USERSCR. You can override by exporting GAMESS_USERSCR as another path. gatk/3.4.46 Adds GATK 3.4.46 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gatk/3.8.0 Adds GATK 3.8.0 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gatk/4.0.3.0 Adds GATK 4.0.3.0 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gatk/4.0.8.0 Adds GATK 4.0.8.0 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gatk/4.2.1.0 Adds GATK 4.2.1.0 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gatk/4.2.5.0 Adds GATK 4.2.1.0 to your environment. The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Website: https://www.broadinstitute.org/gatk/index.php gaussian/g09-c01_linda/pgi-2013.9 Adds Gaussian 09 Revision C01 and GaussView 5 to your environment. gaussian/g09-d01/pgi-2015.4 Adds Gaussian G09-D01 to your environment and also includes Linda and Gaussview 5. gaussian/g09-d01/pgi-2015.7 Adds Gaussian G09-D01 to your environment and also includes Linda and Gaussview 5 gaussian/g16-a03/pgi-2016.5 Adds Gaussian G16-A03 to your environment and also includes Linda and Gaussview 6. gaussian/g16-c01/pgi-2018.10 Adds Gaussian G16-C01 to your environment and also includes Linda and Gaussview 6. gcta/1.93.2beta GCTA: a tool for Genome-wide Complex Trait Analysis. gdal/2.0.0 Adds GDAL 2.0.0 to your environment variables. Works with Python 2. gdal/2.1.1 adds GDAL 2.1.1 with PROJ.4 4.9.1 to your environment variables. Works with Python 2. gdal/2.1.4 adds GDAL 2.1.4 with PROJ.4 6.1.0 to your environment variables. Works with Python 2. gdal/3.0.4/gnu-4.9.2 adds GDAL 3.0.4 with PROJ.4 6.1.0 to your environment variables. Works with Python 2. gephi/0.9.1 Adds Gephi Version 0.9.1 to your environment. ghostscript/9.16/gnu-4.9.2 Adds Ghostscript 9.16 to your environment. ghostscript/9.19/gnu-4.9.2 Adds Ghostscript 9.19 to your environment. gmsh/2.12.0-bindist Adds gmsh 2.12.0 to your environment. Gmsh is a free 3D finite element grid generator with a build-in CAD engine and post-processor. gmt/5.1.2 adds GMT 5.1.2 to your environment variables gmt/5.3.1 adds GMT 5.3.1 to your environment variables gmt/5.4.5 adds GMT 5.4.5 to your environment variables gnuplot/5.0.1 Adds gnuplot 5.0.1 to your environment. Gnuplot is a portable command-line driven graphing utility. grace/5.1.25 Adds Grace 5.1.25 to your environment. Grace is a 2D plotting tool. graphicsmagick/1.3.21 adds GraphicsMagick 1.3.21 to your environment variables graphviz/2.38.0/gnu-4.9.2 This module adds the Graphviz 2.38.0 package to your environment. Graphviz is open source graph visualization software. graphviz/2.40.1/gnu-4.9.2 This module adds the Graphviz 2.40.1 package to your environment. Graphviz is open source graph visualization software. groff/1.22.3/gnu-4.9.2 Adds GNU groff Version 1.22.3 to your environment. gromacs/5.0.4/intel-2015-update2 Adds GROMACS 5.0.4 to your environment, built using MKL gromacs/5.0.4/plumed/intel-2015-update2 Adds GROMACS 5.0.4 with Plumed 2.1.2 to your environment. Note: Plumed will always run in double precision even if GROMACS is single-precision, so only use that combination if you need it and are aware of the effects. gromacs/5.1.1/intel-2015-update2 Adds GROMACS 5.1.1 to your environment, built using MKL gromacs/5.1.1/plumed/intel-2015-update2 Adds GROMACS 5.1.1 with Plumed 2.2 to your environment. Note: Plumed will always run in double precision even if GROMACS is single-precision, so only use that combination if you need it and are aware of the effects. gromacs/5.1.3/plumed/intel-2015-update2 GROMACS 5.1.3 molecular dynamics package, built with Intel 2015u2 compilers, PLUMED 2.2.3 patches (including libmatheval), and OpenBLAS 0.2.14. gromacs/2016.3/intel-2017-update1 Adds GROMACS 2016.3 to your environment, built using MKL gromacs/2016.3/plumed/intel-2017-update1 GROMACS 2016.3 molecular dynamics package, built with Intel 2017u1 compilers, PLUMED 2.3.1 patches (including libmatheval), and OpenBLAS 0.2.14. gromacs/2016.4/plumed/intel-2017 GROMACS 2016.4 molecular dynamics package, built with Intel 2017u4 compilers, PLUMED 2.4.1 patches (including libmatheval) with hrex, and OpenBLAS 0.2.14. gromacs/2018.2/intel-2018 Adds gromacs 2018 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2018.3/intel-2018 Adds gromacs 2018 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2018.3/plumed/intel-2018 GROMACS 2018.3 molecular dynamics package, built with Intel 2018u3 compilers, PLUMED 2.4.3 patches (including libmatheval). gromacs/2018/intel-2017 Adds gromacs 2018 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2019.3/cuda-10 Adds gromacs 2019 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2019.3/intel-2018 Adds gromacs 2019 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2019.3/plumed/intel-2018 GROMACS 2019.3 molecular dynamics package, built with Intel 2018u3 compilers, PLUMED 2.5.2 patches (including libmatheval). gromacs/2021.3/plumed/gnu-10.2.0 GROMACS 2021.3 molecular dynamics package, built with GNU 10.2.0 compilers, PLUMED 2.7.2 patches (including libmatheval). gulp/4.5/intel-2018 Adds GULP 4.5 to your environment. Built with FoX and without plumed. GULP is a materials simulation code. gulp/5.1.1/intel-2018 Adds GULP 5.1.1 to your environment. Built with FoX and without plumed. GULP is a materials simulation code. gurobi/7.5.1 Adds Gurobi 7.5.1 to your environment. gurobi/8.1.1 Adds Gurobi 8.1.1 to your environment. gurobi/9.1.2 Adds Gurobi 9.1.2 to your environment. h5utils/1.12.1 Adds h5utils 1.12.1 to your environment. h5utils is a set of utilities for visualization and conversion of scientific data in HDF5 format. hammock/1.0.5 Loads the dependencies for Hammock 1.0.5 to your environment and makes a quick-install alias, do-hammock-install. Run as java -Xmx2g -jar $HAMMOCKPATH/Hammock.jar mode param1 param2 -d outputpath. Will use Scratch for temporary files. hhsuite/3.0-beta.1/gnu-4.9.2 Adds hhsuite 3.0-beta.1 to your environment. hmmer/3.1b2 Adds HMMER 3.1b2 to your environment. hoomd-blue/2.4.2 Adds HOOMD-blue to your environment. hopspack/2.0.2/gnu-4.9.2 Adds HOPSPACK 2.0.2 to your environment hopspack/2.0.2/intel-2017 Adds HOPSPACK 2.0.2 to your environment icommands/4.1.7 [icommands/4.1.7] The iRODS iCommands are the command-line clients to an iRODS system. idl/8.4.1 Adds IDL 8.4.1 to your environment. idl/8.7.3 Adds IDL 8.7.3 to your environment. illustrate/20190807 adds Illustrate to your environment variables impute2/2.3.2 adds Impute2 V2.3.2 to your environment. inetutils/1.9.4 GNU inetutils is a package of utilities for performing a range of network tasks including FTP and telnet clients. intltool/0.51.0 Adds intltool 0.51.0 to your environment. intltool is a set of tools to centralize translation of many different file formats using GNU gettext-compatible PO files. iva/0.11.6 Adds IVA 0.11.6 to your environment. iva/1.0.0 Adds IVA 1.0.0 to your environment. jags/3.4.0/gnu.4.9.2-atlas Adds JAGS 3.4.0 to your environment. jags/3.4.0/gnu.4.9.2-openblas Adds JAGS 3.4.0 to your environment. jags/4.2.0/gnu.4.9.2-openblas Adds JAGS 4.2.0 to your environment. jq/1.5/gnu-4.9.2 adds jq for GCC 4.9.2 to your environment. jq/1.6-bindist jq is a lightweight and flexible command-line JSON processor. kallisto/v0.42.5 Adds Kallisto v0.42.5 to your environment. kallisto/v0.46.1 Adds Kallisto v0.46.1 to your environment. keras/2.2.4 Adds Keras to your environment. kmc/2.1.1/gnu-4.9.2 Adds KMC 2.1.1 to your environment. KMC is a disk-based program for counting k-mers from FASTQ/FASTA files. knitro/12.0.0/gnu-4.9.2 Adds Knitro solver 12.0.0 to your environment. knitro/12.4.0/gnu-4.9.2 Adds Knitro solver 12.4.0 to your environment. lammps/3Mar20/plumed-colvars/intel-2018 Adds LAMMPS 3Mar20 to your environment. LAMMPS is a GPL molecular dynamics code which shows exceptional scaling on a wide variety of machines. Binary is lmp_mpi or lmp_default. This version was built with packages kspace, manybody, molecule, rigid, lib-linalg, user-colvars and user-plumed. lammps/7Aug19/basic/intel-2018 Adds LAMMPS 7Aug19 to your environment. Binary is lmp_default. lammps/7Aug19/gpu/intel-2018 Adds LAMMPS 7Aug19 to your environment. Binary is lmp_default. lammps/7Aug19/userintel/intel-2018 Adds LAMMPS 7Aug19 to your environment. Binary is lmp_default. lammps/8Dec15/intel-2015-update2 Adds LAMMPS 8Dec15 to your environment. Binary is lmp_default. lammps/10Feb15/intel-2015-update2 Adds LAMMPS 10Feb15 to your environment. Binary is lmp_default. lammps/13Apr17/intel-2017 Adds LAMMPS 13Apr17 to your environment. Binary is lmp_default. lammps/16Mar18/basic/intel-2018 Adds LAMMPS 16Mar18 to your environment. Binary is lmp_default. lammps/16Mar18/gpu/intel-2018 Adds LAMMPS 16Mar18 to your environment. Binary is lmp_default. lammps/16Mar18/intel-2017 Adds LAMMPS 16Mar18 to your environment. Binary is lmp_default. lammps/16Mar18/userintel/intel-2018 Adds LAMMPS 16Mar18 to your environment. Binary is lmp_default. lynx/2.8.9 Adds Lynx Version 2.8.9 to your environment. mathematica/10.1.0 Adds Mathematica 10.1.0 to your environment. mathematica/10.2.0 Adds Mathematica 10.2.0 to your environment. mathematica/10.4.0 Adds Mathematica 10.4.0 to your environment. mathematica/11.0.1 Adds Mathematica 11.0.1 to your environment. mathematica/11.2.0 Adds Mathematica 11.2 to your environment. mathematica/11.3.0 Adds Mathematica 11.3 to your environment. mathematica/12.2.0 Adds Mathematica 12.2 to your environment. mathematica/13.1.0 Adds Mathematica 13.1 to your environment. matlab/full/r2015a/8.5 Adds Matlab R2015a for SPM to your environment. matlab/full/r2015b/8.6 Adds Matlab R2015b to your environment. matlab/full/r2016b/9.1 Adds Matlab R2016b to your environment. matlab/full/r2017a/9.2 Adds Matlab R2017a to your environment. matlab/full/r2018a/9.4 Adds Matlab R2018a to your environment. matlab/full/r2018b/9.5 Adds Matlab R2018b to your environment. matlab/full/r2019b/9.7 Adds Matlab R2019b to your environment. matlab/full/r2021a/9.10 Adds Matlab R2021a to your environment. mcl/14-137 Adds MCL 14-137 your environment. meep/1.3-ompi/gnu-4.9.2 Adds meep 1.3-ompi to your environment. meep/1.3/gnu-4.9.2 Adds meep 1.3 to your environment. meep/1.11.0-ompi/gnu-4.9.2 Adds meep 1.11.0-ompi to your environment. MEEP is a package for electromagnetics simulation via the finite-diffe rence time-domain (FDTD) method. meme/4.10.1_4 Adds MEME Suite 4.10.1_4 to your environment. The MEME Suite: Motif-based sequence analysis tools. This install is for the command-line tools and connects to their website for further analysis. Web: http://meme-suite.org mgltools/1.5.6 Adds MGLTools 1.5.6 to your environment. Applications for visualization and analysis of molecular structures. Contains AutoDockTools (ADT), Python Molecular Viewer (PMV) and Vision. mirdeep/2.0.0.7 Adds mirdeep 2.0.0.7 to your environment. molden/5.2.2 Adds Molden 5.2.2 to your environment. molpro/2012.1.25/gnu-4.9.2 Adds Molpro to your environment molpro/2015.1.3 Adds Molpro 2015.1.3 binary (no Infiniband support) to your environment. molpro/2015.1.5/intel-2015-update2 Adds Molpro 2015.1.5 built from source with MPI to your environment. molpro/2020.1/openmp Adds Molpro 2020.1 mpi binary to your environment. mosek/9.1.12 Adds Mosek 9.1.12 to your environment. mothur/1.41.3-bindist Mothur is an expandable, multi-purpose bioinformatics tool aimed at microbial ecology. mpb/1.5-ompi/gnu-4.9.2 Adds mpb 1.5 to your environment. mpb/1.5/gnu-4.9.2 Adds mpb 1.5 to your environment. mpb/1.9.0-hdf5-ompi/gnu-4.9.2 Adds serial mpb 1.9.0 to your environment. Built with HDF5-ompi for use by parallel MEEP. mrbayes/3.2.5/mpi/intel-2015-update2 Adds MrBayes 3.2.5 to your environment mrbayes/3.2.5/serial/intel-2015-update2 Adds MrBayes 3.2.5 to your environment mrtrix/0.3.12/nogui Adds MRtrix3 0.3.12 to your environment. MRtrix3 provides a set of tools to perform analysis of diffusion MRI data, based around the concept of spherical deconvolution and probabilistic tractography. Note: mrview and shview cannot be run over a remote X11 connection so are not usable. mrtrix/0.3.16/gnu-4.9.2/nogui MRtrix provides a set of tools to perform various advanced diffusion MRI analyses, including constrained spherical deconvolution (CSD), probabilistic tractography, track-density imaging, and apparent fibre density. mrtrix/3.0rc3/gnu-4.9.2/nogui Adds MRtrix 3.0RC3 to your environment. mstor/2013/gnu-4.9.2 MSTor is a program for calculating partition functions, free energies, enthalpies, entropies, and heat capacities of complex molecules including torsional anharmonicity. mumax/3.9.3 Adds Mumax 3.9.3 to your environment. mumax/3.10-bindist mumax3 is a GPU-accelerated micromagnetic simulation program. mummer/3.23/gnu-4.9.2 Adds MUMmer 3.23 to your environment. MUMmer is a system for rapidly aligning entire genomes, whether in complete or draft form. muscle/3.8.31 Adds MUSCLE 3.8.31 to your environment. mutect/1.1.7 Adds MuTect 1.1.7 to your environment. MuTect is a GATK-based variant caller specialized for somatic/cancer variants. namd/2.10/intel-2015-update2 Adds NAMD 2.10 to your environment namd/2.11/intel-2015-update2 Adds NAMD 2.11 to your environment namd/2.12/intel-2015-update2 Adds NAMD 2.12 to your environment namd/2.12/intel-2017-update1 Adds NAMD 2.12 to your environment namd/2.12/intel-2018-update3 Adds NAMD 2.12 to your environment namd/2.13/intel-2018-update3 Adds NAMD 2.13 to your environment namd/2.13/plumed/intel-2018-update3 Adds NAMD 2.13 to your environment namd/2.14/multicore-gpu NAMD is a parallel molecular dynamics code designed for high-performance simulation of large biomolecular systems. This is NAMD's Linux-x86_64-multicore-CUDA binary. namd/2.14/ofi-smp-gpu/intel-2019 Adds NAMD 2.14 OFI-SMP-GPU version to your environment. This version should be run using charmrun. namd/2.14/ofi-smp/intel-2019 Adds NAMD 2.14 OFI-SMP version to your environment. This version should be run using charmrun. namd/2.14/ofi/intel-2019 Adds NAMD 2.14 OFI version to your environment. This version should be run using charmrun. nco/4.5.0 Adds nco to your environment. nektar++/4.3.5-impi/intel-2017-update1 Adds Nektar++ Version 4.3.5 to your environment nektar++/4.3.5-ompi/gnu-4.9.2 Adds Nektar++ Version 4.3.5 to your environment ngsutils/0.5.9 Adds a set of python scripts for handling various NGS tasks to your environment. nighres/1.1.0b Adds Nighres to your environment. nonmem/7.3.0/gnu-4.9.2 Adds NONMEM 7.3.0 using GCC Fortran 4.9.2 to your environment. nonmem/7.3.0/intel-2015-update2 Adds NONMEM 7.3.0 using Intel Fortran 2015 to your environment. novocraft/3.04.06 Adds novocraft 3.04.06 to your environment. Novocraft is a set of tools for bioinformatics, including Novoalign for short-read mapping. nwchem/6.5-r26243/atlas/intel-2015-update2 Adds NWChem 6.5 revision 26243 to your PATH, creates symlink to global .nwchemrc. You may need to alter/remove any old ~/.nwchemrc. Built with Python 2.7 interface and ATLAS. Global .nwchemrc: /shared/ucl/apps/nwchem/6.5-r26243-atlas/intel-2015-update2.nwchemrc nwchem/6.5-r26243/intel-2015-update2 Adds NWChem 6.5 revision 26243 to your PATH, creates symlink to global .nwchemrc. You may need to alter/remove any old ~/.nwchemrc. Built with Python 2.7 interface and MKL with ScaLAPACK. Global .nwchemrc: /shared/ucl/apps/nwchem/6.5-r26243/intel-2015-update2/.nwchemrc nwchem/6.6-r27746/intel-2015-update2 Adds NWChem 6.6 revision 27746 patched 2016-01-20 to your PATH, creates symlink to global .nwchemrc. You may need to alter/remove any old ~/.nwchemrc. Built with Python 2.7 interface and MKL with ScaLAPACK. Global .nwchemrc: /shared/ucl/apps/nwchem/6.6-r27746/intel-2015-update2/.nwchemrc nwchem/6.6-r27746/intel-2017 Adds NWChem 6.6 revision 27746 patched 2016-01-20 to your PATH, creates symlink to global .nwchemrc. You may need to alter/remove any old ~/.nwchemrc. Built with Python 2.7 interface and MKL with ScaLAPACK. Global .nwchemrc: /shared/ucl/apps/nwchem/6.6-r27746/intel-2017/.nwchemrc nwchem/6.8-47-gdf6c956/intel-2017 Adds NWChem 6.8 47-gdf6c956 to your PATH, creates symlink to global .nwchemrc. You may need to alter/remove any old ~/.nwchemrc. Built with Python 2.7 interface and MKL with ScaLAPACK. Global .nwchemrc: /shared/ucl/apps/nwchem/6.8-47-gdf6c956/intel-2017/.nwchemrc oasislmf/1.2.4 Oasis LMF 1.2.4 oasislmf/ktools/3.0.3/gnu-4.9.2 OasisLMF ktools package built with the GNU compilers oasislmf/ktools/f92a41f/gnu-4.9.2 OasisLMF ktools package built with the GNU compilers octave/4.4.1 Octave is an open source competitor to Matlab which is mostly compatible with Matlab. octopus/4.1.2-impi/intel-2015-update2 Adds octopus 4.1.2 to your environment. octopus/4.1.2/intel-2015-update2 Adds octopus 4.1.2 to your environment. octopus/5.0.1-ompi/gnu-4.9.2 Adds octopus 5.0.1 to your environment. octopus/5.0.1/gnu-4.9.2 Adds octopus 5.0.1 to your environment. octopus/6.0-ompi/gnu-4.9.2 Adds octopus 6.0 to your environment. octopus/6.0/gnu-4.9.2 Adds octopus 6.0 to your environment. openbabel/2.4.1/gnu-4.9.2 OpenBabel is a library and command-line tool for manipulating and converting between various chemistry file formats. opencv/2.4.13/gnu-4.9.2 Adds OpenCV 2.4.13 to your environment. Open Source Computer Vision Library. opencv/3.4.1/gnu-4.9.2 Adds OpenCV 3.4.1 to your environment. Open Source Computer Vision Library. openfoam/2.3.1/intel-2015-update2 Adds OpenFOAM 2.3.1 to your environment openfoam/2.4.0/intel-2017-update1 Adds OpenFOAM 2.4.0 to your environment openfoam/7.20200120/gnu-7.3.0 Adds OpenFOAM 7 to your environment openfoamplus/v1706/gnu-4.9.2 Adds OpenFOAMplus v1706 to your environment openfoamplus/v1906/gnu-7.3.0 Adds OpenFOAMplus v1906 to your environment openfoamplus/v1906/gnu-7.3.0-64 Adds OpenFOAMplus v1906 with 64 bit labels to your environment openfoamplus/v2112/gnu-7.3.0-64 Adds OpenFOAMplus v2112 with 64 bit labels to your environment openmm/7.3.1/cuda-10 Adds OpenMM to your environment. openmm/7.3.1/gnu-4.9.2 Adds OpenMM to your environment. openmx/3.8.3 Adds OpenMX 3.8.3 to your environment. optimet/1.0.1/gnu-4.9.2 Adds Optimet to your environment. orca/4.2.1-bindist/gnu-4.9.2 ORCA is an ab initio, DFT, and semiempirical SCF-MO package. p7zip/15.09/gnu-4.9.2 Adds p7zip 15.09 to your environment. To expand 7z files: 7za x archive.7z p7zip/16.02/gnu-4.9.2 p7zip is a port of the command-line version of the 7-zip file compression tool to UNIX-like systems. pandoc/1.19.2.1 Adds pandoc Version 1.19.2.1 to your environment. parallel/20181122 GNU parallel is a shell tool for executing jobs in parallel using one or more computers. paraview/5.3.0 This module adds the ParaView 5.3.0 binaries to your environment. ParaView is an open-source, multi-platform data analysis and visualization application. paraview/5.10.1 This module adds the ParaView 5.10.1 binaries to your environment. ParaView is an open-source, multi-platform data analysis and visualization application. parmed/3.2.0 Adds ParmEd to your environment. petsc/3.12.1/gnu-4.9.2 Adds Petsc 3.12.1 to your environment phon/1.39/gnu-4.9.2 Adds Phon 1.3.9 with addons to your PATH. phon/1.43/gnu-4.9.2 Adds Phon 1.43 with addons to your PATH. picard-tools/1.136 Adds Picard Tools 1.136 to your environment. If using the java -jar command, you should pass TMP_DIR=$TMPDIR to Picard. picard-tools/2.18.9 Adds Picard Tools to your environment. If using the java -jar command, you should pass TMP_DIR=$TMPDIR to Picard. platypus/3e72641 Adds Platypus to your environment. plink/1.07 Adds Plink 1.07 with addons to your PATH. plink/1.90b3.40 Adds PLINK 1.90b3.40 to your environment. A comprehensive update to the PLINK association analysis toolset. plink/2.0alpha-git Adds PLINK 2.0 alpha to your environment. A comprehensive update to the PLINK association analysis toolset. plumed/2.1.2/intel-2015-update2 Adds PLUMED 2.1.2 to your environment, built using OpenBLAS plumed/2.2.3/intel-2015-update2 Adds PLUMED 2.2.3 to your environment, built using OpenBLAS and libmatheval plumed/2.2/intel-2015-update2 Adds PLUMED 2.2 to your environment, built using OpenBLAS plumed/2.3.1/intel-2017-update1 Adds PLUMED 2.3.1 to your environment, built using OpenBLAS and libmatheval plumed/2.4.1/gnu-4.9.2 Adds PLUMED 2.4.1 to your environment, built using OpenBLAS and libmatheval plumed/2.4.1/intel-2017-update4 Adds PLUMED 2.4.1 to your environment, built using OpenBLAS and libmatheval plumed/2.4.3/intel-2018 Adds PLUMED 2.4.3 to your environment, built using MKL and libmatheval plumed/2.5.2/intel-2018 Adds PLUMED 2.5.2 to your environment, built using MKL and libmatheval plumed/2.6.0/intel-2018 Adds PLUMED 2.6.0 to your environment, built using MKL and libmatheval plumed/2.7.2/gnu-10.2.0 Adds PLUMED 2.7.2 to your environment, built using GCC, OpenBLAS and libmatheval. PLUMED is a plugin that works with a large number of molecular dynamics codes. plumed/2.7.2/intel-2020 Adds PLUMED 2.7.2 to your environment, built using MKL and libmatheval. PLUMED is a plugin that works with a large number of molecular dynamics codes. postgres+postgis/9.5.3+2.2.2/gnu-4.9.2 Adds postgres+postgis 9.5.3+2.2.2 to your environment. PostgreSQL is a relational database, and PostGIS is a geographical information enhancement for PostgreSQL. postgresql/9.5.3/gnu-4.9.2 Adds postgresql 9.5.3 to your environment. PostgreSQL is a relational database. primer3/2.3.6 This module adds the primer3 package to your environment. probabel/0.4.5/gnu-4.9.2 Adds ProbABEL to your environment. proj.4/4.9.1 Adds the PROJ.4 Cartographic Projections library to your environment. proj.4/5.2.0 Adds the PROJ.4 Cartographic Projections library to your environment. proj.4/6.0.0 Adds the PROJ.4 Cartographic Projections library to your environment. proj.4/6.1.0 Adds the PROJ.4 Cartographic Projections library to your environment. proovread/2.13.11-8Jan2016-f6a856a Adds proovread 2.13.11-8Jan2016-f6a856a to your environment. f6a856a is the commit for this version. pymol/1.7.7.2 Adds PyMol to your environment. pymol/1.8.2.1 Adds PyMol to your environment. pyrosetta/release-73 Adds PyRosetta to your environment. pytorch/1.2.0/cpu Adds PyTorch 1.2.0 to your environment. pytorch/1.2.0/gpu Adds PyTorch 1.2.0 to your environment. pytorch/1.11.0/cpu Adds PyTorch 1.11.0 to your environment. pytorch/1.11.0/gpu Adds PyTorch 1.11.0 to your environment. qctool/2/beta/ba5eaa44a62f This module adds qctool v2 beta to your environment. quantum-espresso/5.2.0-impi/intel-2015-update2 Adds quantum-espresso 5.2.0 to your environment. quantum-espresso/6.1-impi/intel2017 Adds quantum-espresso 6.1 to your environment. quantum-espresso/6.3-impi/thermo_pw-1.0.9/intel-2018 Adds quantum-espresso 6.3 + thermo_pw 1.0.9 to your environment. quantum-espresso/6.4.1-impi/intel-2018 Adds quantum-espresso 6.4.1 to your environment. quantum-espresso/6.5-impi/intel-2018 Adds quantum-espresso 6.5 to your environment. quantum-espresso/6.5-impi/thermo_pw-1.2.1/intel-2018 Adds quantum-espresso 6.5 + thermo_pw 1.2.1 to your environment. quantum-espresso/7.0-impi/intel-2018 Adds quantum-espresso 7.0 to your environment. r/3.2.0-atlas/gnu-4.9.2 Adds R 3.2.0 and Bioconductor 3.2 to your environment. r/3.2.2-openblas/gnu-4.9.2 Adds R 3.2.2 and Bioconductor 3.2 to your environment. r/3.3.0-openblas/gnu-4.9.2 Adds R 3.3.0 and Bioconductor 3.3 to your environment. r/3.3.2-openblas/gnu-4.9.2 Adds R 3.3.2 and Bioconductor 3.4 to your environment. r/3.4.0-openblas/gnu-4.9.2 Adds R 3.4.0 and Bioconductor 3.5 to your environment. r/3.4.2-openblas/gnu-4.9.2 Adds R 3.4.2 and Bioconductor 3.6 to your environment. r/3.5.0-openblas/gnu-4.9.2 Adds R 3.5.0 and Bioconductor 3.7 to your environment. r/3.5.1-openblas/gnu-4.9.2 Adds R 3.5.1 and Bioconductor 3.7 to your environment. r/3.5.3-openblas/gnu-4.9.2 Adds R 3.5.3 and Bioconductor 3.8 to your environment. r/3.6.0-openblas/gnu-4.9.2 Adds R 3.6.0 and Bioconductor 3.9 to your environment. r/4.2.0-openblas/gnu-10.2.0 Adds R 4.2.0 and Bioconductor 3.15 to your environment. randfold/2.0/gnu-4.9.2 Adds randfold 2.0 to your environment. rclone/1.51.0 RClone is a command-line program intended to download and upload files from and to various storage services and providers. repast-hpc/2.1/gnu-4.9.2 Adds Repast HPC 2.1 compiled with GCC 4.9.2 and OpenMPI to your environment. root/5.34.30/gnu-4.9.2 Adds ROOT 5.34.30 to your environment. root/5.34.30/gnu-4.9.2-fftw-3.3.6 Adds ROOT 5.34.30 to your environment. root/5.34.36/gnu-4.9.2-fftw-3.3.6 Adds ROOT 5.34.36 to your environment. root/5.34.36/gnu-4.9.2-fftw-3.3.6-gsl-2.4 Adds ROOT 5.34.36 to your environment. root/6.04.00/gnu-4.9.2 Adds ROOT 6.04.00 to your environment. rosetta/2015.31.58019 Adds Rosetta 2015.31.58019 to your environment. rosetta/2015.31.58019-mpi Adds Rosetta 2015.31.58019 with MPI to your environment. rosetta/2018.48.60516 Adds Rosetta 2018.48.60516 serial version to your environment. rosetta/2018.48.60516-mpi Adds Rosetta 2018.48.60516 MPI version to your environment. rsem/1.2.31 Adds RSEM 1.2.31 to your environment. rvtests/2.1.0 Rvtests: Rare variant test software for next generation sequencing data sac/101.6a Adds SAC 101.6a to your environment. sac/102.0 Adds SAC 102.0 to your environment. salmon/1.9.0 Adds Salmon 1.9.0 to your environment. sambamba/0.6.7-bindist A tool for extracting information from SAM/BAM files. samblaster/0.1.24/gnu-4.9.2 samblaster is a program for marking duplicates in read-id grouped paired-end SAM files. samsrf/5.84/matlab.r2019b Adds the SamSrf Matlab toolbox to your environment samtools/0.1.19 This module adds the Samtools 0.1.19 package to your environment. samtools/1.2/gnu-4.9.2 Adds SAMtools 1.2 to your environment. Reading/writing/editing/indexing/viewing SAM/BAM/CRAM format. samtools/1.3.1/gnu-4.9.2 Adds SAMtools 1.3.1 to your environment. Reading/writing/editing/indexing/viewing SAM/BAM/CRAM format. samtools/1.9/gnu-4.9.2 Adds SAMtools 1.9 to your environment. Reading/writing/editing/indexing/viewing SAM/BAM/CRAM format. samtools/1.11/gnu-4.9.2 Tools for reading/writing/editing/indexing/viewing SAM/BAM/CRAM formatted data. sas/9.4-M6/64 Adds SAS 9.4 (9.04.01M6) 64 bit to your environment sas/9.4-m7/64 Adds SAS 9.4 (9.04.01M7) 64 bit to your environment sas/9.4/64 Adds SAS 9.4 64 bit to your environment sc/7.16 Adds sc 7.16 to your environment. siesta/4.0.1/intel-2017 Adds SIESTA 4.0.1 to your environment. skewer/0.2.2 Adds skewer 0.2.2 to your environment. smalt/0.7.6/gnu-4.9.2 Adds SMALT 0.7.6 to your environment. SMALT aligns DNA sequencing reads with a reference genome. Compiled with bambamc support for SAM/BAM input and BAM output. snpAD/0.3.4-bindist snpAD is an ancient DNA aware genotype caller. snptest/2.5.4-beta3 Adds SNPtest 2.5.4-beta3 to your environment. sod/3.2.7 Adds SOD 3.2.7 to your environment. SOD is a program that automates tedious data selection, downloading, and routine processing tasks in seismology. sod/3.2.10 Adds SOD 3.2.10 to your environment. SOD is a program that automates tedious data selection, downloading, and routine processing tasks in seismology. spaceranger/1.2.2 Adds Space Ranger 1.2.2 to your environment. Space Ranger is a set of analysis pipelines that process Visium spatial RNA-seq output and brightfield and fluorescence microscope images. spm/8/r6313/matlab.r2015a Adds SPM8 to your environment spm/12/jan2020/matlab.r2019b Adds SPM12 to your environment spm/12/r6470/matlab.r2015a Adds SPM12 to your environment spss/25 Adds SPSS 25 to your environment spss/26 Adds SPSS 26 to your environment sqlite/3.31.1/gnu-9.2.0 Adds SQLite Version 3.31.1 to your environment. stacks/2.54/gnu-4.9.2 Stacks is a software pipeline for building loci from short-read sequences, such as those generated on the Illumina platform. Stacks was developed to work with restriction enzyme-based data, such as RAD-seq, for the purpose of building genetic maps and conducting population genomics and phylogeography. star-ccm+/9.06.011 Adds STAR-CCM+ and STAR-View to your environment. star-ccm+/11.04.010-R8 Adds STAR-CCM+ and STAR-View to your environment. star-ccm+/12.04.010 Adds STAR-CCM+ and STAR-View to your environment. star-ccm+/13.02.011 Adds STAR-CCM+ and STAR-View to your environment. star-ccm+/13.06.012 Adds STAR-CCM+ and STAR-View to your environment. star-ccm+/14.06.013 Adds STAR-CCM+ and STAR-View to your environment. star-cd/4.22.058 Adds STAR-CD 4.22.058 to your environment. star-cd/4.26.011 Adds STAR-CD 4.26.011 using Intel 2016 compiler suite to your environment. STAR-CD is a code for performing CFD simulations. It is designed for modelling fluid flow, heat transfer, mass transfer and chemical reactions. star-cd/4.26.022 Adds STAR-CD 4.26.022 using Intel 2016 compiler suite to your environment. STAR-CD is a code for performing CFD simulations. It is designed for modelling fluid flow, heat transfer, mass transfer and chemical reactions. star-cd/4.28.050 Adds STAR-CD 4.28.050 using Intel 2016 compiler suite to your environment. STAR-CD is a code for performing CFD simulations. It is designed for modelling fluid flow, heat transfer, mass transfer and chemical reactions. star/2.5.2a Adds STAR 2.5.2a to your environment. star/2.7.3a Adds STAR 2.7.3a to your environment. stata/14 Adds Stata/MP 14 to your environment. stata/15 Adds Stata/MP 15 to your environment. supermagic/1.2/intel-2017 Adds supermagic 1.2 to your environment. Supermagic is a simple MPI sanity test. taup/2.1.2 adds TauP 2.1.2 to your environment variables tensorflow/1.4.1/cpu Adds Tensorflow 1.4.1 to your environment. tensorflow/1.4.1/gpu Adds Tensorflow 1.4.1 to your environment. tensorflow/1.4.1/mkl Adds Tensorflow 1.4.1 to your environment. tensorflow/1.8.0/cpu Adds Tensorflow 1.8.0 to your environment. tensorflow/1.8.0/gpu Adds Tensorflow 1.8.0 to your environment. tensorflow/1.8.0/mkl Adds Tensorflow 1.8.0 to your environment. tensorflow/1.12.0/cpu Adds Tensorflow 1.12.0 to your environment. tensorflow/1.12.0/gpu Adds Tensorflow 1.12.0 to your environment. tensorflow/1.12.0/mkl Adds Tensorflow 1.12.0 to your environment. tensorflow/1.13.1/cpu Adds Tensorflow 1.13.1 to your environment. tensorflow/1.13.1/gpu Adds Tensorflow 1.13.1 to your environment. tensorflow/1.13.1/mkl Adds Tensorflow 1.13.1 to your environment. tensorflow/1.14.0/cpu Adds Tensorflow 1.14.0 to your environment. tensorflow/1.14.0/gpu Adds Tensorflow 1.14.0 to your environment. tensorflow/1.14.0/mkl Adds Tensorflow 1.14.0 to your environment. tensorflow/2.0.0/gpu-py37 Adds Tensorflow 2.0.0 to your environment. tensorflow/2.0.0/gpu-py37-cudnn75 Adds Tensorflow 2.0.0 to your environment. tensorflow/2.0.0/mkl-py37 Adds Tensorflow 2.0.0 to your environment. tensorflow/2.8.0/python-3.8.6 Adds Tensorflow 2.8.0 to your environment. tephra2/2.0/gnu-4.9.2 Adds Tephra2 version 2.0 to your environment. tephra2/normal/r149 Adds Tephra2 version r149 to your environment. tesseract/3.05.01 Adds Tesseract 3.05.01 to your environment. texinfo/5.2/gnu-4.9.2 Adds GNU texinfo 5.2 to your environment. texinfo/6.6/gnu-4.9.2 Adds GNU texinfo 6.6 to your environment. texlive/2014 Adds TeX Live 2014 to your environment. texlive/2015 Adds TeX Live 2015 to your environment. texlive/2019 Adds TeX Live 2019 to your environment. textract/1.5.0 Adds textract 1.5.0 to your environment. textract extracts text from a wide range of document types. tmux/2.2 This module adds the tmux 2.2 package to your environment. tmux/3.2a This module adds the tmux 3.2a package to your environment. tophat/2.1.0 Adds Tophat 2.1.0 to your environment. tracer/1.6 Adds Tracer 1.6. tractor/3.2.5 Adds TractoR 3.2.5 to your environment. tree/1.7.0 Adds tree 1.7.0 to your environment. This shows your directory structure as a tree. trim_galore/0.4.1 Adds Trim Galore 0.4.1 to your environment. A wrapper tool around Cutadapt and FastQC to consistently apply quality and adapter trimming to FastQ files. trimmomatic/0.33 Adds Trimmomatic 0.33 to your environment. A flexible read trimming tool for Illumina NGS data. turbomole/6.4/mpi Adds turbomole 6.4 (using MPI) to your environment. turbomole/6.4/serial Adds turbomole 6.4 (serial) to your environment. turbomole/6.4/smp Adds turbomole 6.4 (using SMP) to your environment. turbomole/6.5/mpi Adds turbomole 6.5 (using MPI) to your environment. turbomole/6.5/serial Adds turbomole 6.5 (serial) to your environment. turbomole/6.5/smp Adds turbomole 6.5 (using SMP) to your environment. turbomole/6.6/mpi Adds turbomole 6.6 (using MPI) to your environment. turbomole/6.6/serial Adds turbomole 6.6 (serial) to your environment. turbomole/6.6/smp Adds turbomole 6.6 (using SMP) to your environment. ubpred/1-bin32dist UbPred is a random forest-based predictor of potential ubiquitination sites in proteins. udunits/2.2.19 Adds udunits to your environment. udunits/2.2.20/gnu-4.9.2 adds the UDUNITS-2 package to your environment. udunits/2.2.26/gnu-4.9.2 adds the UDUNITS-2 package to your environment. varscan/2.3.9 Adds VarScan v2.3.9 to your environment. VarScan is a platform-independent mutation caller for targeted, exome, and whole-genome resequencing data generated on Illumina, SOLiD, Life/PGM, Roche/454, and similar instruments. vasp/5.4.1-05feb16-p2/intel-2015-update2 The VASP Quantum Chemistry package, version 5.4.1-05feb16 with patches 1 and 2. vasp/5.4.1-24jun15-p2-vtst-r160/intel-2015-update2 Adds VASP 5.4.1 built with VTST r160 to your environment. vasp/5.4.1-24jun15-p08072015/intel-2015-update2 The VASP Quantum Chemistry package, version 5.4.1-24jun15 with patch 08072015. vasp/5.4.4-18apr2017-libbeef/intel-2017-update1 Adds VASP 5.4.4 with BEEF-vdW functionals to your environment. vasp/5.4.4-18apr2017-vtst-r178/intel-2017-update1 Adds VASP 5.4.4 built with VTST r178 to your environment. vasp/5.4.4-18apr2017/intel-2017-update1 Adds VASP 5.4.4 to your environment. vasp/5.4.4-18apr2017/intel-2019 Adds VASP 5.4.4 to your environment. Built with Intel 2019. vasp/6.1.2-01dec2020/intel-2019-update5 Adds VASP 6.1.2 to your environment. vasp/6.2.1-19Jan2022/intel-2019-update5 Adds VASP 6.2.1 to your environment. vasp/6.2.1-19Jan2022/nvidia-22.1-gpu Adds VASP 6.2.1 FOR GPUS ONLY to your environment. vasp/6.3.0-24Jan2022/intel-2019-update5 Adds VASP 6.3.0 to your environment. vasp/6.3.0-24Jan2022/nvidia-22.1-gpu Adds VASP 6.3.0 FOR GPUS ONLY to your environment. vcftools/0.1.15/gnu-4.9.2 Adds VCFtools version 0.1.15 to your environment. Tools for working with VCF files. velvet/1.2.10 Adds Velvet 1.2.10 to your environment. vep/95.0 Adds VEP 95.0 to your environment. vesta/3.4.6-bindist VESTA is a 3D visualization program for structural models, volumetric data such as electron/nuclear densities, and crystal morphologies. vg/1.11.0 This is a module with no description string. viennarna/2.1.9/gnu-4.9.2 Adds viennarna 2.1.9 to your environment. vinalc/1.1.2/gnu-4.9.2 Adds VinaLC to your environment. visit/2.9.2 This package adds VisIt 2.9.2 to your environment. VisIt is a distributed, parallel visualization and graphical analysis tool for data defined on two- and three-dimensional (2D and 3D) meshes. Visit will create a ~/.visit directory and a ~/Scratch/visit directory. Jobfiles created by the GUI will go in the latter. Legion hostfile: /shared/ucl/apps/visit/2.9.2/gnu-4.9.2/host_legion.xml Web: https://wci.llnl.gov/simulation/computer-codes/visit/ vmd/1.9.3/GL+CUDA VMD is a molecular visualization program for displaying, animating, and analyzing large biomolecular systems using 3-D graphics and built-in scripting. vmd/1.9.3/text-only The binary, text only version of VMD 1.9.3 vmd/1.9.4/a55-gl+cuda Adds VMD 1.9.4 Development Version a55 to your environment. vt/2018-08-01/gnu-4.9.2 [ref:f6d2b5dab73c] A tool set for short variant discovery in genetic sequence data. xmds/2.2.2 Adds XMDS 2.2.2 (GNU/ATLAS/Intel MPI/FFTW toolchain) to your environment. xmds/3.0.0 Adds XMDS 3.0.0 (GNU/ATLAS/Intel MPI/FFTW toolchain) to your environment. xtalopt/r12.1/gnu-4.9.2 Adds XtalOpt r12.1 to your environment. xulrunner/3.6.28/gnu-4.9.2 Adds XULRunner 3.6.28 to your environment. XULRunner is a Mozilla runtime package that can be used to bootstrap XUL+XPCOM applications. This version was built including javaxpcom. xulrunner/10.0.2 Adds the XULRunner 3.6.28 64-bit runtime binaries to your environment. XULRunner is a Mozilla runtime package that can be used to bootstrap XUL+XPCOM applications. yambo/4.1.4/intel-2017 This is a module with no description string.","title":"Applications"},{"location":"Installed_Software_Lists/module-packages/#libraries","text":"Modules in this section set up your environment to use specific C, C++, or Fortran libraries. This can include being able to use them with other languages, like Python. Module Description apr-util/1.5.4 adds APR-util 1.5.4 to your environment variables apr-util/1.6.1 adds APR-util 1.6.1 to your environment variables apr/1.5.2 adds APR 1.5.2 to your environment variables apr/1.7.0 adds APR 1.7.0 to your environment variables argtable/2.13 Adds argtable 2.13 to your environment. armadillo/7.400.3/intel-2015-update2 Adds armadillo 7.400.3 to your environment. Armadillo is a linear alebra library for C++, aiming to balance speed and ease of use. arpack-ng/3.4.0/intel-2015-update2 Adds arpack-ng 3.4.0 to your environment. ARPACK-NG is a collection of Fortran77 subroutines designed to solve large scale eigenvalue problems. arpack-ng/3.5.0/gnu-4.9.2-serial Adds arpack-ng 3.5.0 to your environment. ARPACK-NG is a collection of Fortran77 subroutines designed to solve large scale eigenvalue problems. arpack-ng/3.5.0/gnu-4.9.2-threaded Adds arpack-ng 3.5.0 to your environment. ARPACK-NG is a collection of Fortran77 subroutines designed to solve large scale eigenvalue problems. arpack-ng/3.5.0/intel-2017 Adds arpack-ng 3.5.0 to your environment. ARPACK-NG is a collection of Fortran77 subroutines designed to solve large scale eigenvalue problems. atlas/3.10.2/gnu-4.9.2 adds ATLAS 3.10.2 for GCC 4.9.2 compilers to your environment variables atlas/3.10.2/intel-2015-update2 adds ATLAS 3.10.2 for Intel 15 compilers to your environment variables bambamc/0.0.50/gnu-4.9.2 Adds bambamc 0.0.50 to your environment. bambamc is a lightweight C implementation of the read name collation code from the larger libmaus/biobambam C++ project. boost/1.75.0/gnu-4.9.2 Boost is a collection of miscellaneous C++ libraries. This build does not include Python bindings or MPI support, and is multi-threaded. boost/1_54_0/gnu-4.9.2 Adds Boost 1.54.0 with Python libraries to your environment. boost/1_54_0/mpi/gnu-4.9.2 Adds Boost 1.54.0 with Python and MPI libraries to your environment. boost/1_54_0/mpi/gnu-4.9.2-ompi-1.10.1 Adds Boost 1.54.0 with Python and MPI libraries to your environment. boost/1_54_0/mpi/intel-2015-update2 Adds Boost 1.54.0 with Python and MPI libraries to your environment. boost/1_63_0/gnu-4.9.2 Adds Boost 1.63.0 with Python libraries to your environment. boost/1_63_0/mpi/gnu-4.9.2 Adds Boost 1.63.0 with Python and MPI libraries to your environment. boost/1_63_0/mpi/intel-2017-update1 Adds Boost 1.63.0 with Python and Intel MPI libraries to your environment. cernlib/2006-35 Adds the CERN Program library to your environment. 2006-35 EL6 RPM binaries. cernlib/2006/gnu-4.9.2 Adds the CERN Program library to your environment cfitsio/3370/gnu-4.9.2 Adds cfitsio 3370 to your environment. cfitsio/3370/intel-2015-update2 Adds cfitsio 3370 to your environment. cgal/4.9/gnu-4.9.2 Adds CGAL 4.9 with Qt5 to your environment. The Computational Geometry Algorithms Library. clusteringsuite/2.6.6/bindist Adds clusteringsuite 2.6.6 to your environment. Clustering Suite is a set of tools to automatically expose the main performance trends in applications' computation structure. cppunit/1.15.1/gnu-4.9.2 Adds CppUnit 1.15.1 to your environment. CppUnit is a package for writing and running unit tests in C++. cppunit/1.15.1/gnu-10.2.0 Adds CppUnit 1.15.1 built wuth GNU 10.2.0 to your environment. CppUnit is a package for writing and running unit tests in C++. cunit/2.1-3/gnu-4.9.2 Adds cunit 2.1-3 to your environment. CUnit is a package for writing and running unit tests in C. cvmfs/2.2.1/gnu-4.9.2 Adds libcvmfs 2.2.1 to your environment. dyninst/9.3.2/gnu-4.9.2 Adds dyninst 9.3.2 to your environment. DynInst is a library for performing dynamic instrumentation of executables. eigen/3.2.5/gnu-4.9.2 adds Eigen for GCC 4.9.2 compilers to your environment variables eigen/3.3.9/gnu-4.9.2 Adds Eigen 3.3.9 to your environment. Eigen is a C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms. elfutils/0.170/gnu-4.9.2 Adds elfutils 0.170 to your environment. Elfutils provides utilities for manipulating binary ELF files, and is one possible provider of libelf. fftw/2.1.5/gnu-4.9.2 adds FFTW 2.1.5 for GCC 4.9.2 compilers to your environment variables fftw/2.1.5/intel-2015-update2 adds FFTW 2.1.5 for Intel compilers to your environment variables fftw/3.3.4-impi/gnu-4.9.2 Adds fftw 3.3.4 (built with Intel MPI) to your environment. fftw/3.3.4-impi/intel-2017-update1 Adds fftw 3.3.4 (built with Intel MPI) to your environment. fftw/3.3.4-ompi-1.10.1/gnu-4.9.2 Adds fftw 3.3.4 (built with OpenMPI) to your environment. fftw/3.3.4-ompi/gnu-4.9.2 Adds fftw 3.3.4 (built with OpenMPI) to your environment. fftw/3.3.4-threads/gnu-4.9.2 adds FFTW 3.3.4 for GCC 4.9.2 compilers to your environment variables fftw/3.3.4/gnu-4.9.2 adds FFTW 3.3.4 for GCC 4.9.2 compilers to your environment variables fftw/3.3.4/intel-2015-update2 adds FFTW 3.3.4 for Intel compilers to your environment variables fftw/3.3.6-pl2/gnu-4.9.2 Adds FFTW 3.3.6 pl2 for GCC 4.9.2 compilers to your environment variables. Includes single and double precision only on Legion, plus long-double and quad on Grace/Thomas. Includes OpenMP and POSIX threads libraries. fftw/3.3.6-pl2/intel-2017 Adds FFTW 3.3.6 pl2 for Intel compilers to your environment variables. Includes single and double precision versions on Legion, plus long-double on Grace/Thomas. Includes OpenMP and POSIX threads libraries. fftw/3.3.8-impi/intel-2018 Adds fftw fftw (built with Intel MPI) to your environment. fftw/3.3.8-ompi/gnu-4.9.2 Adds fftw 3.3.8 (built with OpenMPI) to your environment. fftw/3.3.10/nvidia-22.1 Adds fftw 3.3.10 to your environment. forge/1.0.0/gnu-4.9.2 Adds forge 1.0.0 to your environment. freeimage/3.17.0/gnu-4.9.2 Adds FreeImage 3.17.0 to your environment. freetype/2.8.1/gnu-4.9.2 Adds freetype 2.8.1 to your environment. FreeType is a freely available software library to render fonts. ga/5.7-8BInts/intel-2018 Global Arrays (GA) is a library that provides a Partitioned Global Address Space (PGAS) programming model. This version has been compiled with 8-byte integers in the Fortran code. ga/5.7/intel-2018 Global Arrays (GA) is a library that provides a Partitioned Global Address Space (PGAS) programming model. gcc-libs/4.9.2 adds GCC 4.9.2 runtime to your evironment. geos/3.5.0/gnu-4.9.2 Adds geos 3.5.0 to your environment. GEOS (Geometry Engine, Open Source) is a library for performing various spatial operations, especially for boolean operations on GIS data. Note this version does not include the SWIG, Python, Ruby, or PHP bindings. gflags/2.2.1 Adds Google gflags 2.2.1 to your environment. giflib/5.1.1 Adds giflib 5.1.1 to your environment. A library and utilities for processing gifs. glbinding/2.1.2/gnu-4.9.2 Adds glbinding 2.1.2 to your environment. glew/1.13.0/gnu-4.9.2 Adds GLEW The OpenGL Extension Wrangler Library 1.11.0 to your environment. glew/2.1.0/gnu-4.9.2 Adds GLEW -- The OpenGL Extension Wrangler Library -- 2.1.0 to your environment. glfw/3.2.1/gnu-4.9.2 Adds GLFW 3.2.1 to your environment. glog/0.3.5 Adds Google glog 0.3.5 to your environment. glpk/4.60/gnu-4.9.2 Adds the GNU Linear Programming Kit Version 4.60 for GCC 4.9.2 to your environment. gsl/1.16/gnu-4.9.2 adds GSL 1.16 for GCC 4.9.2 to your environment. gsl/1.16/intel-2015-update2 Adds gsl 1.16 to your environment. gsl/2.4/gnu-4.9.2 adds GSL 2.4 for GCC 4.9.2 to your environment. gsl/2.4/intel-2017 adds GSL 2.4 for Intel 2017 to your environment. gstreamer/1.12.0 GStreamer is a library for constructing graphs of media-handling components, including codecs for various audio and video formats. gulp/4.5/libgulp/intel-2018 Adds GULP 4.5 library version to your environment. Built libgulp only, without FoX, for programs such as ChemShell to link. GULP is a materials simulation code. h5py/2.10.0-ompi/gnu-4.9.2 Adds h5py 2.10.0-ompi for Python 3.7 to your environment. harminv/1.4.1/gnu-4.9.2 Adds harminv 1.4.1 to your environment. harminv/1.4/gnu-4.9.2 Adds harminv 1.4 to your environment. hdf/5-1.8.15-p1-impi/intel-2015-update2 Adds hdf5 1.8.5-p1 (built with Fortran and IntelMPI options) to your environment. hdf/5-1.8.15-p1-ompi/gnu-4.9.2 Adds hdf5 1.8.5-p1 (built with Fortran and OpenMPI options) to your environment. hdf/5-1.8.15/gnu-4.9.2 adds HDF5 1.8.15 (Serial) for GCC 4.9.2 to your environment. hdf/5-1.8.15/intel-2015-update2 adds HDF5 1.8.15 (Serial) for Intel 2015 to your environment. hdf/5-1.10.2-impi/intel-2018 adds HDF5 1.10.2 (Parallel) for Intel 2018 to your environment. hdf/5-1.10.2/intel-2018 adds HDF5 1.10.2 (Serial) for Intel 2018 to your environment. hdf/5-1.10.5-ompi/gnu-4.9.2 Adds hdf 5-1.10.5-ompi to your environment. Built with OpenMPI and GNU. hdf/5-1.10.5/gnu-4.9.2 Adds hdf 5-1.10.5 to your environment. Serial version built with GNU. htslib/1.2.1 This module adds the HTSlib 1.2.1 package to your environment. HTSlib is an implementation of a unified C library for accessing common file formats, such as SAM, CRAM and VCF, used for high-throughput sequencing data. htslib/1.3.1 This module adds the HTSlib 1.3.1 package to your environment. HTSlib is an implementation of a unified C library for accessing common file formats, such as SAM, CRAM and VCF, used for high-throughput sequencing data. htslib/1.7 This module adds the HTSlib 1.7 package to your environment. HTSlib is an implementation of a unified C library for accessing common file formats, such as SAM, CRAM and VCF, used for high-throughput sequencing data. htslib/1.11/gnu-4.9.2 A C library for reading/writing high-throughput sequencing data. hwloc/1.11.12 The Portable Hardware Locality (hwloc) software package provides a portable abstraction (across OS, versions, architectures, ...) of the hierarchical topology of modern architectures, including NUMA memory nodes, sockets, shared caches, cores and simultaneous multithreading. This installation includes the optional libnuma dependency. hypre/2.11.2/openmpi-3.0.0/intel-2017 Adds HYPRE 2.11.2 to your environment. hypre/2.11.2/openmpi-3.1.1/intel-2018 Adds HYPRE 2.11.2 to your environment. ipopt/3.14.2/intel-2018 Ipopt (Interior Point OPTimizer, pronounced eye-pea-Opt) is a software package for large-scale nonlinear optimization. jansson/2.11 This is a module with no description string. json-c/0.12/gnu-4.9.2 Adds json-c 0.12 to your environment. JSON-C is a library for converting between JSON-formatted strings and C representations of the equivalent objects. lapack/3.8.0/gnu-4.9.2 LAPACK is a reference library of routines for Linear Algebra. It is not recommended for use, as its ABI is replicated in the much higher-performance libraries OpenBLAS, MKL, or ATLAS instead. leptonica/1.74.4 Adds Leptonica 1.74.4 to your environment. leveldb/1.20 Adds Google leveldb 1.20 to your environment. libbdwgc/7.4.2/gnu-4.9.2 Adds libbdwgc (a garbage-collector library) to your environment. libbeef/0.1.3/intel-2018 Library for Bayesian error estimation functionals for use in density functional theory codes: libbeef 0.1.3 commit 2822afe libctl/3.2.2/gnu.4.9.2 Adds libctl (built using Intel compilers) to your environment. libctl/4.3.0/gnu-4.9.2 Adds libctl 4.3.0 to your environment. libdwarf/20170709/gnu-4.9.2 Adds libdwarf 20170709 to your environment. libdwarf is a library for interacting with debugging info in the DWARF 2, 3, and 5 formats. libelf/0.8.13/gnu-4.9.2 Adds libelf 0.8.13 to your environment. libetsfio/1.0.4/gnu-4.9.2 Adds libetsfio 1.0.4 to your environment. libetsfio/1.0.4/intel-2015-update2 Adds libetsfio 1.0.4 to your environment. libflac/1.3.1/gnu-4.9.2 Adds libflac 1.3.1 to your environment. libFLAC is the Xiph library for handling their lossless audio codec. libgd/2.1.1/gnu-4.9.2 Adds libgd 2.1.1 to your environment. libgd/2.1.1/intel-2015-update2 Adds libgd 2.1.1 to your environment. libgdsii/0.21/gnu-4.9.2 Adds libgdsii 0.21 to your environment. C++ library and command-line utility for reading GDSII geometry files. libint/1.1.4/gnu-4.9.2 Adds libint 1.1.4 to your environment. Libint is required for CP2K. libmatheval/1.1.11 Adds libmatheval 1.1.11 to your environment. GNU libmatheval is a library (callable from C and Fortran) to parse and evaluate symbolic expressions input as text. libsodium/1.0.6/gnu-4.9.2 Adds libsodium 1.0.6 to your environment. libsodium is a crypto library primarily used by ZeroMQ. libsox/14.4.2/gnu-4.9.2 Adds libsox 14.4.2 to your environment. SoX is a library for reading, writing, and converting a variety of sound file formats. If you require support for a file format that is not installed, contact rc-support and the library can be rebuilt. libuuid/1.0.3/gnu-4.9.2 Adds a static libuuid 1.0.3 to your environment. libxc/2.1.2/intel-2015-update2 Adds libxc 2.1.2 to your environment. libxc/2.2.2/gnu-4.9.2 Adds libxc 2.2.2 to your environment. libxc/2.2.2/intel-2015-update2 Adds libxc 2.2.2 to your environment. libxc/3.0.0/gnu-4.9.2 Adds libxc 3.0.0 to your environment. libxc/3.0.0/intel-2015-update2 Adds libxc 3.0.0 to your environment. libxc/4.2.3/intel-2018 libxc is a library of routines implementing a range of exchange-correlation functionals for density-functional theory calculations. libxml2/2.9.4/gnu-4.9.2 Adds libxml2 2.9.4 to your environment. Libxml2 is an XML C parser and toolkit. Includes Python (2.7.9) bindings. llvm/3.3 This module adds the LLVM 3.3 package to your environment. The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for many popular CPUs. llvm/3.9.1 This module adds the LLVM 3.9.1 package to your environment. The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for many popular CPUs. llvm/6.0.1 This module adds the LLVM 6.0.1 package to your environment. The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for many popular CPUs. llvm/8.0.0/gnu-4.9.2 The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. This installation includes clang, a C compiler based on LLVM. lmdb/0.9.22 Adds LMDB 0.9.22 to your environment. lz4/1.8.3 This is a module with no description string. magma/2.4.0 This is a module with no description string. med/4.0.0/gnu-4.9.2 Adds med 4.0.0 to your environment. Allows reading and writing of MED format files. mesa/6.5/gnu-4.9.2 Adds mesa 6.5 to your environment. Mesa is an open-source implementation of the OpenGL specification - a system for rendering interactive 3D graphics. This is an old version installed to satisfy a particular dependency: please do not use for new builds. mesa/10.6.3 Adds Mesa 10.6.3 to your environment. Mesa is an open-source implementation of the OpenGL specification. (Built for offscreen rendering: OSMesa, Xlib GLX, no Gallium, no EGL, no llvm, no DRI). mesa/10.6.9/gnu-4.9.2 Adds Mesa 10.6.9 to your environment. Mesa is an open-source implementation of the OpenGL specification. (Built for offscreen rendering: OSMesa, Xlib GLX, no Gallium, no EGL, no llvm, no DRI). mesa/13.0.6/gnu-4.9.2 Adds Mesa 13.0.6 to your environment. Mesa is an open-source implementation of the OpenGL specification. (Built options: Gallium, LLVM, no EGL, no DRI, no GLX). The default driver is llvmpipe. You can use \"export GALLIUM_DRIVER\" to explicitly choose llvmpipe, softpipe, or swr metis/5.1.0/gnu-4.9.2 Adds metis 5.1.0 to your environment. METIS is a set of serial programs for partitioning graphs, partitioning finite element meshes, and producing fill reducing orderings for sparse matrices. metis/5.1.0/intel-2015-update2 Adds metis 5.1.0 to your environment. METIS is a set of serial programs for partitioning graphs, partitioning finite element meshes, and producing fill reducing orderings for sparse matrices. metis/5.1.0/intel-2018 Adds metis 5.1.0 to your environment. METIS is a set of serial programs for partitioning graphs, partitioning finite element meshes, and producing fill reducing orderings for sparse matrices. mpi/intel/2013/update1/intel adds Intel MPI 4.1.3.048 to your environment variables mpi/intel/2015/update3/gnu-4.9.2 adds Intel MPI to your environment variables mpi/intel/2015/update3/intel adds Intel MPI to your environment variables mpi/intel/2017/update1/gnu-4.9.2 adds Intel MPI to your environment variables mpi/intel/2017/update1/intel adds Intel MPI to your environment variables mpi/intel/2017/update2/gnu-4.9.2 adds Intel MPI to your environment variables configured to use GCC 4.9.2 mpi/intel/2017/update2/intel adds Intel MPI to your environment variables mpi/intel/2017/update3/gnu-4.9.2 [Intel MPI/2017.3.196] This is Intel's MPI implementation, version 2017.3.196, which is bundled with compiler package version 2017.Update4. This module sets up the compiler wrappers to use GCC 4.9.2 underneath. mpi/intel/2017/update3/intel [Intel MPI/2017.3.196] This is Intel's MPI implementation, version 2017.3.196, which is bundled with compiler package version 2017.Update4. mpi/intel/2018/update3/intel [Intel MPI/2018.3.222] This is Intel's MPI implementation, version 2018.3.222, which is bundled with compiler package version 2018.Update3. mpi/intel/2019/update4/intel [Intel MPI/2019.4.243] This is Intel's MPI implementation, version 2019.4.243, which is bundled with compiler package version 2019.Update4. mpi/intel/2019/update5/intel [Intel MPI/2019.5.281] This is Intel's MPI implementation, version 2019.5.281, which is bundled with compiler package version 2019.Update5. mpi/intel/2019/update6/intel [Intel MPI/2019.6.166] This is Intel's MPI implementation, version 2019.6.166, which is bundled with compiler package version 2020. mpi/intel/2021.6.0/intel [Intel MPI/2021.6.0] This is Intel's MPI implementation, version 2021.6.0, which is bundled with compiler package version 2022.2. mpi/openmpi/1.8.4/gnu-4.9.2 adds OpenMPI 1.8.4 for GCC 4.9.2 compilers to your environment variables mpi/openmpi/1.8.4/intel-2015-update2 adds OpenMPI 1.8.4 for Intel 2015 update 2 compilers to your environment variables mpi/openmpi/1.10.1/gnu-4.9.2 adds OpenMPI 1.10.1 for GCC 4.9.2 compilers to your environment variables mpi/openmpi/1.10.1/intel-2015-update2 adds OpenMPI 1.10.1 for Intel 2015 update 2 compilers to your environment variables mpi/openmpi/2.0.2/gnu-4.9.2 Adds openmpi 2.0.2 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/2.0.2/intel-2017 Adds openmpi 2.0.2 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/2.1.2/gnu-4.9.2 Adds openmpi 2.1.2 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/2.1.2/intel-2017 Adds openmpi 2.1.2 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.0.0/gnu-4.9.2 Adds openmpi 3.0.0 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.0.0/intel-2017 Adds openmpi 3.0.0 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.1/gnu-4.9.2 Adds openmpi 3.1.1 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.1/intel-2018 Adds openmpi 3.1.1 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.4/gnu-4.9.2 Adds openmpi 3.1.4 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.4/intel-2018 Adds openmpi 3.1.4 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.6/gnu-4.9.2 Adds openmpi 3.1.6 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/4.0.3/gnu-4.9.2 Adds openmpi 4.0.3 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/4.1.1/gnu-4.9.2 Adds openmpi 4.1.1 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi4py/2.0.0/python2 Adds Python2 mpi4py 2.0.0 to your environment. MPI for Python. mpi4py/2.0.0/python3 Adds Python3 mpi4py 2.0.0 to your environment. MPI for Python. mpi4py/3.0.0/python3 Adds Python3 mpi4py 3.0.0 to your environment. MPI for Python. mpi4py/3.0.2/gnu-4.9.2 Adds mpi4py 3.0.2 for Python 3.7 to your environment. multinest/3.10b/gnu-4.9.2 Adds MultiNest 3.10b to your environment. mumps-thirdparty/3.0.0/intel-2018 The COIN-OR Tools project ThirdParty-Mumps can be used to download the MUMPS code and build a MUMPS library that is recognized by Ipopt. This version of ThirdParty-Mumps retrieves and builds MUMPS 5.4.0. mumps/5.2.1/intel-2018 Adds mumps 5.2.1 to your environment. Sequential version built with Intel and METIS. mysql-connector-python/2.0.4/python-3.5.2 Adds mysql-connector-python 2.0.4 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/2.0.4/python-3.6.3 Adds mysql-connector-python 2.0.4 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/2.0.4/python-3.7.4 Adds mysql-connector-python 2.0.4 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/2.0.4/python-3.8.0 Adds mysql-connector-python 2.0.4 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/8.0.22/python-3.8.6 Adds mysql-connector-python 8.0.22 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/8.0.22/python-3.9.0 Adds mysql-connector-python 8.0.22 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/8.0.22/python-3.9.6 Adds mysql-connector-python 8.0.22 to your environment. This is Oracle's python-only MySQL connector for Python3 mysql-connector-python/8.0.28/python-3.9.10 Adds mysql-connector-python 8.0.28 to your environment. This is Oracle's python-only MySQL connector for Python3 nag/fortran/mark22/gnu-4.9.2 Adds NAG Fortran Library Mark 22 for GCC to your environment. nag/fortran/mark24/gnu-4.9.2 Adds NAG Fortran Library Mark 24 for GCC to your environment. nag/fortran/mark24/nag-6.0.1044 Adds NAG Fortran Library Mark 24 for NAG Fortran to your environment. nag/fortran/mark25/intel-2015-update2 Adds NAG Fortran Library Mark 25 for Intel 2015 to your environment. nag/fortran/mark26/gnu-4.9.2 Adds NAG Fortran Library Mark 26 for GCC to your environment. nag/fortran/mark26/intel-2017 Adds NAG Fortran Library Mark 26 for Intel 2017 to your environment. nag/fortran/mark26/nag-6.1.6106 Adds NAG Fortran Library Mark 26 for NAG Fortran to your environment. nag/fortran/mark26/nag-6.2.6223 Adds NAG Fortran Library Mark 26 for NAG Fortran to your environment. nag/mark27/intel-2019 Adds NAG Library Mark 27 for Intel 2019 to your environment. netcdf-c++/4.2/gnu-4.9.2 adds NetCDF C++ 4.2 for GCC to your environment. netcdf-c++/4.2/intel-2015-update2 adds NetCDF C++ 4.2 for Intel 2015 to your environment. netcdf-c++4/4.2/gnu-4.9.2 adds NetCDF C++ 4.2 for GCC to your environment. netcdf-c++4/4.2/intel-2015-update2 adds NetCDF C++ 4.2 for Intel 2015 to your environment. netcdf-fortran/4.4.1/gnu-4.9.2 adds NetCDF 4.4.1 for GCC to your environment. netcdf-fortran/4.4.1/intel-2015-update2 adds NetCDF 4.4.1 for Intel 2015 to your environment. netcdf-fortran/4.5.4/intel-2018-update3 adds NetCDF Fortran 4.5.4 for Intel 2018 to your environment. netcdf/4.3.3.1/gnu-4.9.2 adds NetCDF 4.3.3.1 for GCC 4.9.2 to your environment. netcdf/4.3.3.1/intel-2015-update2 adds NetCDF 4.3.3.1 for Intel 2015 to your environment. netcdf/4.9.0/intel-2018-update3 adds NetCDF 4.9.0 for Intel 2018 to your environment. numactl/2.0.12 numactl provides NUMA policy support, as well as tools and a library to display NUMA allocation statistics and debugging information. openblas/0.2.14-threads/gnu-4.9.2 adds OpenBLAS 0.2.14 for GCC 4.9.2 compilers to your environment variables openblas/0.2.14/gnu-4.9.2 adds OpenBLAS 0.2.14 for GCC 4.9.2 compilers to your environment variables openblas/0.2.14/intel-2015-update2 adds OpenBLAS 0.2.14 for Intel 2015 update 2compilers to your environment variables openblas/0.3.2-native-threads/gnu-4.9.2 This is a module with no description string. openblas/0.3.2-openmp/gnu-4.9.2 This is a module with no description string. openblas/0.3.2-serial/gnu-4.9.2 This is a module with no description string. openblas/0.3.7-native-threads/gnu-4.9.2 This is a module with no description string. openblas/0.3.7-openmp/gnu-4.9.2 This is a module with no description string. openblas/0.3.7-serial/gnu-4.9.2 This is a module with no description string. openjpeg/2.4.0/gnu-4.9.2 OpenJPEG is an open-source JPEG 2000 codec written in C language. openslide/3.4.1/gnu-4.9.2 adds OpenSlide library 3.4.1 to your environment variables papi/5.5.1/gnu-4.9.2 Adds PAPI 5.5.1 to your environment. PAPI is a library for working with performance counters, often used in profiling applications. parmetis/4.0.3/intel-2015-update2 Adds parmetis 4.0.3 to your environment. ParMETIS is an MPI-based parallel library that implements a variety of algorithms for partitioning unstructured graphs, meshes, and for computing fill-reducing orderings of sparse matrices. pcre2/10.21/gnu-4.9.2 Adds pcre2 10.21 to your environment. PCRE (Perl-compatible regular expressions) is a C library implementing regular expression pattern-matching using the same semantics as Perl 5. pgplot/5.2.2/intel-2017 Adds PGPlot 5.2.2 to your environment. pgplot/5.2.2/intel-2018 Adds PGPlot 5.2.2 to your environment. pillow-simd/6.0.0.post0/python-3.7.4 Adds Pillow-SIMD to your environment. protobuf/3.5.1/gnu-4.9.2 adds Google Protocol Buffers for GCC 4.9.2 to your environment. protobuf/12-2017/gnu-4.9.2 adds Google Protocol Buffers for GCC 4.9.2 to your environment. psm2/11.2.185/gnu-4.9.2 Adds psm2 11.2.185 to your environment. The PSM2 messaging API, libpsm2. A low-level user-level communications interface for the Intel(R) OPA. family of products. pstreams/1.0.1/gnu-4.9.2 Adds pstreams 1.0.1 to your environment. PStreams is a C++ wrapper for process control and streaming using popen and pclose. pygsl/2.1.1-python3.6/gnu-4.9.2 Adds pygsl 2.1.1 to your environment. PyGSL provides Python bindings for the GNU Scientific Library. pyngl/1.4.0 Adds PyNGL to your environment. pynio/1.4.1 Adds PyNIO to your environment. quip/18c5440-threads/gnu-4.9.2 Adds QUIP to your environment. QUIP is required for CP2K. quip/18c5440/gnu-4.9.2 Adds QUIP to your environment. QUIP is required for CP2K. qutip/4.1.0/python-2.7.12 Adds qutip to your environment. scalapack/2.0.2/gnu-4.9.2/openblas Adds ScaLAPACK 2.0.2 to your environment, built with GCC, OpenBLAS and OpenMPI. Static and shared libraries. scalapack/2.0.2/gnu-4.9.2/openblas-0.3.2 Adds ScaLAPACK 2.0.2 to your environment, built with GCC, OpenBLAS and OpenMPI. Static and shared libraries. scalapack/2.0.2/gnu-4.9.2/openblas-0.3.7 Adds ScaLAPACK 2.0.2 to your environment, built with GCC, OpenBLAS and OpenMPI. Static and shared libraries. snappy/1.1.7 Adds Google snappy 1.1.7 to your environment. spark/3.1.1-bin-hadoop2.7 Apache Spark is an analytics engine for data processing. sparskit2/2009.11.18/gnu-4.9.2 Adds sparskit2 2009.11.18 to your environment. sparskit2/2009.11.18/intel-2015-update2 Adds sparskit2 2009.11.18 to your environment. spectral/3.4.0/bindist Adds spectral 3.4.0 to your environment. Spectral is a set of tools for performing spectral analysis on traces produced by the BSC profiling toolkit. spglib/1.7.4/gnu-4.9.2 Adds spglib 1.7.4 to your environment. Spglib is a library for finding and handling crystal symmetries written in C. squid/1.9g/gnu-4.9.2 Adds squid 1.9g to your environment. suitesparse/4.5.5/gnu-4.9.2-serial Adds suitesparse 4.5.5 to your environment. SuiteSparse is a suite of sparse matrix algorithms. suitesparse/4.5.5/gnu-4.9.2-threaded Adds suitesparse 4.5.5 to your environment. SuiteSparse is a suite of sparse matrix algorithms. suitesparse/4.5.5/intel-2017-update1 Adds suitesparse 4.5.5 to your environment. SuiteSparse is a suite of sparse matrix algorithms. superlu-dist/5.1.0/intel-2015-update2 Adds superlu-dist 5.1.0 to your environment. SuperLU_DIST is the distributed-memory parallel version of SuperLU, a general purpose library for the direct solution of large, sparse, nonsymmetric systems of linear equations. superlu/5.2.1/intel-2015-update2 Adds superlu 5.2.1 to your environment. SuperLU is a general purpose library for the direct solution of large, sparse, nonsymmetric systems of linear equations. szip/2.1 Adds szip to your environment. ucx/1.8.0/gnu-4.9.2 Adds ucx 1.8.0 to your environment. Unified Communication X (UCX) provides an optimized communication layer for Message Passing (MPI), PGAS/OpenSHMEM libraries and RPC/data-centric applications. ucx/1.9.0/gnu-4.9.2 Adds ucx 1.9.0 to your environment. Unified Communication X (UCX) provides an optimized communication layer for Message Passing (MPI), PGAS/OpenSHMEM libraries and RPC/data-centric applications. unixodbc/2.3.7 Unix ODBC driver vtk/5.10.1/gnu-4.9.2 adds VTK 5.10.1 for GCC 4.9.2 to your environment. vtk/6.2.0/gnu-4.9.2 adds VTK 6.2.0 for GCC 4.9.2 to your environment. wavpack/5.1.0/gnu-4.9.2 WavPack is a completely open audio compression format providing lossless, high-quality lossy, and a unique hybrid compression mode. webkitgtk/2.2.4-1 Adds the webkitgtk-1 with webkitgtk-devel library to your environment. 2.2.4-1 EL7 RPM binaries. webkitgtk/2.4.9-1 Adds the webkitgtk with webkitgtk-devel library to your environment. 2.4.9-1 EL7 RPM binaries. zeromq/4.1.4/gnu-4.9.2 Adds zeromq 4.1.4 to your environment. ZeroMQ is a distributed messaging library that supports many message-passing patterns and methods.","title":"Libraries"},{"location":"Installed_Software_Lists/module-packages/#development-tools","text":"This section is for modules for programs that are used in software development, profiling, or troubleshooting. It also contains language interpreters, like Python, Ruby, and Java. Module Description armforge/20.1.2 ArmForge is a collection of parallel profiling and debugging tools for x86_64 and ARM processors. autoconf/2.69 Adds GNU Autoconf Version 2.69 to your environment. autogen/5.18.12/gnu-4.9.2 AutoGen is a tool designed to simplify the creation and maintenance of programs that contain large amounts of repetitious text. automake/1.16.1 Adds GNU Automake Version 1.16.1 to your environment. bazel/0.7.0 Adds bazek to your environment. bazel/0.14.1/gnu-4.9.2 Adds bazek to your environment. bazel/0.21.0/gnu-4.9.2 Adds bazek to your environment. bazel/0.24.0/gnu-4.9.2 Adds bazek to your environment. bazel/0.24.1/gnu-4.9.2 Adds bazek to your environment. bazel/0.26.1/gnu-4.9.2 Adds bazek to your environment. bazel/0.27.1/gnu-4.9.2 Adds bazek to your environment. binutils/2.29.1/gnu-4.9.2 Adds binutils 2.29.1 to your environment. The GNU binutils are a collection of tools for working with binary files and assembling and disassembling machine instructions. bison/3.0.4/gnu-4.9.2 Adds Bison 3.0.4 to your environment. Bison is a general-purpose parser generator. chicken/4.13.0 adds Chicken 4.13.0 to your environment variables clojure/1.10.0.411 This is a module with no description string. clojure/1.10.3.1069 This is a module with no description string. cmake/3.2.1 adds Cmake 3.2.1 compilers to your environment variables cmake/3.7.2 adds Cmake 3.7.2 compilers to your environment variables cmake/3.13.3 adds Cmake 3.13.3 compilers to your environment variables cmake/3.19.1 adds Cmake 3.19.1 to your environment variables cmake/3.21.1 adds Cmake 3.21.1 to your environment variables cmdstan/2.24.1/gnu-4.9.2 Adds CmdStan 2.24.1 to your environment. cuda/7.5.18/gnu-4.9.2 Adds cuda 7.5.18 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/8.0.61-patch2/gnu-4.9.2 Adds cuda 8.0.61 patch2 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/9.0.176-patch4/gnu-4.9.2 Adds cuda 9.0.176 patch4 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/10.0.130/gnu-4.9.2 Adds cuda 10.0.130 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/10.1.243/gnu-4.9.2 Adds cuda 10.1.243 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cudnn/5.1/cuda-7.5 Adds cuDNN to your environment. cudnn/5.1/cuda-8.0 Adds cuDNN to your environment. cudnn/6.0/cuda-7.5 Adds cuDNN to your environment. cudnn/6.0/cuda-8.0 Adds cuDNN to your environment. cudnn/7.0.4/cuda-8.0 Adds cuDNN to your environment. cudnn/7.1.4/cuda-9.0 Adds cuDNN to your environment. cudnn/7.4.2.24/cuda-9.0 Adds cuDNN to your environment. cudnn/7.4.2.24/cuda-10.0 Adds cuDNN to your environment. cudnn/7.5.0.56/cuda-10.0 Adds cuDNN to your environment. cudnn/7.5.0.56/cuda-10.1 Adds cuDNN to your environment. cudnn/7.6.5.32/cuda-10.0 Adds cuDNN to your environment. cudnn/7.6.5.32/cuda-10.1 Adds cuDNN to your environment. ddt/6.0.4 This module adds DDT 6.0.4 with MIC support to your environment. depot_tools/788d9e0d adds depot_tools to your environment variables depot_tools/c03a9cf adds depot_tools to your environment variables dimemas/5.3.3/bindist Adds dimemas 5.3.3 to your environment. Dimemas is an abstracted network simulator for message-passing programs. doxygen/1.8.14 This is a module with no description string. emacs/24.5 Adds Emacs 24.5 to your environment. An extensible text editor. emacs/26.3 Adds Emacs 26.3 to your environment. An extensible text editor. emacs/28.1 Adds Emacs 28.1 to your environment. An extensible text editor. extrae/3.5.2/intel-2017 Adds extrae 3.5.2 to your environment. Extrae is an instrumentation framework to generate execution traces of the most used parallel runtimes. f2c/2013-09-26/gnu-4.9.2 Adds f2c 2013-09-26 to your environment. f2c is a source-to-source translator from Fortran 77 to C. It is not standards-compliant and is not recommended for use under any circumstances. flex/2.5.39 adds Flex 2.4.39 to your environment variables git/2.3.5 adds Git 2.3.5 to your environment variables git/2.10.2 adds Git 2.10.2 to your environment variables git/2.19.1 adds Git 2.19.1 to your environment variables git/2.32.0 adds Git 2.32.0 to your environment variables gperf/3.0.4/gnu-4.9.2 Adds gperf 3.0.4 to your environment. GNU gperf is a perfect hash function generator. guile/2.0.11/gnu-4.9.2 Adds guile 2.0.11 to your environment. haskellplatform/2014.2.0.0 adds Haskell Platform to your environment variables htop/1.0.3/gnu-4.9.2 Adds htop 1.0.3 to your environment. java/1.8.0_45 adds Oracle JDK 1.8.0_45 compilers to your environment variables java/1.8.0_92 adds Oracle JDK 1.8.0_92 compilers to your environment variables java/openjdk-8/8u212/hotspot adds Oracle JDK 8 compilers to your environment variables java/openjdk-8/8u212/openj9 adds Oracle JDK 8 compilers to your environment variables java/openjdk-11/11.0.1 adds Oracle JDK 11.0.1 compilers to your environment variables java/openjdk-11/11.0.3u7/hotspot adds Oracle JDK 11.0.3 compilers to your environment variables java/openjdk-11/11.0.3u7/openj9 adds Oracle JDK 11.0.3 compilers to your environment variables java/semeru-8/8u322-b06 adds IBM Semeru 8u322-b06 compilers to your environment variables java/semeru-11/11.0.14.1+1 adds IBM Semeru 11.0.14.1+1 compilers to your environment variables java/semeru-17/17.0.2+8 adds IBM Semeru 17.0.2+8 compilers to your environment variables java/temurin-8/8u322-b06 adds Adoptium Temurin 8u322-b06 compilers to your environment variables java/temurin-11/11.0.14+9 adds Adoptium Temurin 11.0.14+9 compilers to your environment variables java/temurin-11/11.0.14.1+1 adds Adoptium Temurin 11.0.14.1+1 compilers to your environment variables java/temurin-17/17.0.2+8 adds Adoptium Temurin 17.0.2+8 compilers to your environment variables julia/0.3.10 adds Julia 0.3.10 to your environment variables julia/0.4.0 adds Julia 0.4.0 to your environment variables julia/0.4.7 adds Julia 0.4.7 to your environment variables julia/0.5.0 adds Julia 0.5.0 to your environment variables julia/0.6.0 adds Julia 0.6.0 to your environment variables julia/0.7.0 adds Julia 0.7.0 to your environment variables julia/1.0.0 adds Julia 1.0.0 to your environment variables julia/1.1.0 adds Julia 1.1.0 to your environment variables julia/1.2.0 adds Julia 1.2.0 to your environment variables julia/1.3.1 adds Julia 1.3.1 to your environment variables julia/1.5.0 adds Julia 1.5.0 to your environment variables julia/1.6.0 adds Julia 1.6.0 to your environment variables julia/1.6.2 adds Julia 1.6.2 to your environment variables julia/1.7.0 adds Julia 1.7.0 to your environment variables julia/1.7.1 adds Julia 1.7.1 to your environment variables libtool/2.4.6 Adds libtool 2.4.6 to your environment. GNU libtool is a generic library support script. Libtool hides the complexity of using shared libraries behind a consistent, portable interface. ltrace/0.7.3/gnu-4.9.2 Adds ltrace 0.7.3 to your environment. lua/5.3.1 This module adds the Lua 5.3.1 package to your environment. Lua is a powerful, fast, lightweight, embeddable scripting language. mc/4.8.14 This module adds Midnight Commander 4.8.14 to your environment. mono/3.12.1 adds Mono 3.12.1 compilers to your environment variables mono/5.20.1.27/gnu-4.9.2 This is a module with no description string. nano/2.4.2 Adds nano 2.4.2 to your environment. A simple text editor. nano/4.9 The nano text editor. nano/6.1 The nano text editor. nasm/2.13.01 The Netwide Assembler, NASM, is an 80x86 and x86-64 assembler. ncl/6.0.0 adds NCL 6.0.0 to your environment variables ncl/6.3.0 adds NCL 6.3.0 to your environment variables nedit/5.6-aug15 Adds the NEdit GUI text editor to your environment. netlogo/6.1.0 adds NetLogo tooklit compilers to your environment variables paraver/4.6.4.rc1/bindist Adds paraver 4.6.4.rc1 to your environment. Paraver is a trace visualizer for post-mortem trace analysis. perl/5.16.0 This module adds adds Perl 5.16.0 to your environment. perl/5.22.0 This module adds adds Perl 5.22.0 to your environment. perlbrew/0.73 This module adds the Perlbrew 0.73 package to your environment. Use Perlbrew to manage your own Perls and Perl modules pigz/2.4 pigz is a fully functional replacement for gzip that exploits multiple processors and multiple cores when compressing data. pycuda/2017.1/python2 Adds Python2 PyCuda to your environment. MPI for Python. pycuda/2017.1/python3 Adds Python3 PyCuda to your environment. MPI for Python. pypy3/6.0.0/gnu-4.9.2 Pypy is a JIT-ing interpreter for the Python language. This is the version intended to be compatible with CPython 3.5. python/2.7.9 adds Python 2.7.9 with pip and virtualenv to your environment variables python/2.7.12 adds Python 2.7.12 with pip and virtualenv to your environment variables python/3.4.3 adds Python 3.4.3 with pip and virtualenv to your environment variables python/3.5.2 adds Python 3.5.2 with pip and virtualenv to your environment variables python/3.6.1/gnu-4.9.2 Adds Python 3.6.1 with pip and virtualenv to your environment variables. python/3.6.3 Adds Python 3.6.3 with pip and virtualenv to your environment variables. python/3.7.0 Adds Python 3.7.0 with pip and virtualenv to your environment variables. python/3.7.2 Adds Python 3.7.2 with pip and virtualenv to your environment variables. python/3.7.4 Adds Python 3.7.4 with pip and virtualenv to your environment variables. python/3.8.0 Adds Python 3.8.0 with pip and virtualenv to your environment variables. python/3.8.6 Adds Python 3.8.6 with pip and virtualenv to your environment variables. python/3.9.0 Adds Python 3.9.0 with pip and virtualenv to your environment variables. python/3.9.1 Adds Python 3.9.1 with pip and virtualenv to your environment variables. python/3.9.6 Adds Python 3.9.6 with pip and virtualenv to your environment variables. python/3.9.10 Adds Python 3.9.10 with pip and virtualenv to your environment variables. python/idp3/2019/3.6.8 Adds Intel Distribution for Python to your environment variables. python/miniconda3/4.5.11 Adds Miniconda 4.5.11 to your environment variables. python/miniconda3/4.10.3 Adds Miniconda 4.10.3 to your environment variables. qt/4.8.6/gnu-4.9.2 Adds Qt 4.8.6 to your environment. Qt is a cross-platform development tool. qt/5.4.2/gnu-4.9.2 Adds Qt 5.4.2 to your environment. Qt is a cross-platform development tool. qt/5.12.1/gnu-4.9.2 Adds Qt 5.12.1 to your environment. Qt is a cross-platform development tool. qwt/6.1.4/gnu-4.9.2 Adds Qwt 6.1.4 to your environment. racket/6.8 Adds Racket 6.8 to your enviroment. rappture/20130903 Adds the Rappture toolkit to your environment. rstudio-ide/1.4.1717 RStudio is an integrated development environment (IDE) for R ruby/2.2.2 Ruby 2.2.2 with RubyGems 2.4.8 and libffi 3.2.1 ruse/1.0.1 A command-line utility to periodically measure the memory use of a process and its subprocesses. ruse/2.0 Ruse is a command-line utility that periodically measures the resource use of a process and its subprocesses. sbcl/1.3.19 Adds Steelbank Common LISP 1.3.19 to your environment. sbcl/2.1.6 Adds Steelbank Common LISP 2.1.6 to your environment. sbt/1.6.1 This is a module with no description string. scala/2.13.8 This is a module with no description string. scala/3.1.1 This is a module with no description string. scons/2.3.4 adds scons 2.3.4 to your environment variables strace/4.12 Adds strace 4.12 to your environment. Trace system calls and signals. subversion/1.8.13 adds Subversion 1.8.13 to your environment variables subversion/1.14.1 adds Subversion 1.14.1 to your environment variables swig/3.0.5/gnu-4.9.2 This module adds the SWIG 3.0.5 package to your environment. SWIG is an interface compiler that connects programs written in C and C++ with scripting languages such as Perl, Python, Ruby, and Tcl. swig/3.0.7/gnu-4.9.2 This module adds the SWIG 3.0.7 package to your environment. SWIG is an interface compiler that connects programs written in C and C++ with scripting languages such as Perl, Python, Ruby, and Tcl. tcl/8.6.8 This is a modulefile for Tcl/Tk 8.6.8 v8/3.15 adds v8 to your environment variables v8/5.6 adds v8 to your environment variables valgrind/3.11.0/gnu-4.9.2 Adds valgrind 3.11.0 to your environment. Valgrind is a framework for building dynamic analysis tools. It includes the memgrind and cachegrind tools. xbae/4.60.4 Adds the Xbae Matrix Widget to your environment. xorg-utils/X11R7.7 Adds xorg-utils from X11R7.7 to your environment. Includes util-macros-1.17, makedepend-1.0.5 libXdmcp-1.1.1 and libXScrnSaver-1.2.2 and imake-1.0.7.","title":"Development Tools"},{"location":"Installed_Software_Lists/module-packages/#core-modules","text":"These modules refer to groups of system tools, rather than applications. They're intended to help you use the system, and some are loaded by default. Module Description gerun adds gerun wrapper to your environment variables lm-utils/1.0 adds utilities to check license manager status to your environment. mrxvt/0.5.4 Adds Mrxvt a multi-tabbed xterm replacement to your environment. ops-tools/1.0.0 Tools for Ops work ops-tools/1.1.0 Tools for Ops work ops-tools/2.0.0 Tools for Ops work pipe-gifts/1.0.0 A tool for transferring files between users on the same node: 'pipe-give' and 'pipe-receive'. pv/1.6.6 Pipe Viewer (pv) is a tool for monitoring the progress of data through a pipeline. rcps-core/1.0.0 adds a core set of applications and libraries to your environment. rlwrap/0.43 adds rlwrap 0.43 to your environment variables screen/4.2.1 adds Screen 4.2.1 to your environment variables screen/4.8.0-ucl1 adds Screen 4.8.0 to your environment variables singularity-env/1.0.0 Sets up the environment and cache directories for the Singularity container runtime. userscripts/1.0.0 Adds userscripts dir to your path. Provides jobhist among other utilities. userscripts/1.1.0 Adds userscripts dir to your path. Provides jobhist among other utilities. userscripts/1.2.0 Adds userscripts dir to your path. Provides jobhist among other utilities. userscripts/1.3.0 Adds userscripts dir to your path. Provides jobhist among other utilities. userscripts/1.4.0 Adds userscripts dir to your path. Provides jobhist among other utilities. GATK Some GATK tools require conda and associated libraries.","title":"Core Modules"},{"location":"Installed_Software_Lists/module-packages/#beta-modules","text":"This section is for modules we're still trying out. They may or may not work with applications from other sections. Module Description amber/20/mpi/gnu-10.2.0 Adds AMBER 20 and AmberTools 21 to your environment amber/20/openmp/gnu-10.2.0 Adds AMBER 20 and AmberTools 21 to your environment. OpenMP threaded version. amber/20/serial/gnu-10.2.0 Adds AMBER 20 and AmberTools 21 to your environment armadillo/10.4.0/gnu-10.2.0 Adds Armadillo Version 10.4.0 C++ library to your environment. arpack-ng/3.8.0-threaded/gnu-10.2.0 Adds arpack-ng 3.8.0 to your environment. ARPACK-NG is a collection of Fortran77 subroutines designed to solve large scale eigenvalue problems. atlas-adna/0.9_2021-04-16/gnu-10.2.0 Adds ATLAS Ancient DNA Analysis package to your environment. atlas-adna/0.9_2021-08-13/gnu-10.2.0 Adds ATLAS Ancient DNA Analysis package to your environment. bedtools/2.30.0/gnu-10.2.0 Adds bedtools 2.30.0 to your environment. The bedtools utilities are a swiss-army knife of tools for a wide-range of genomics analysis tasks. binutils/2.36.1/gnu-10.2.0 Adds binutils 2.36.1 to your environment. The GNU binutils are a collection of tools for working with binary files and assembling and disassembling machine instructions. compilers/chapel/1.26.0 Chapel 1.26.0 for GCC compilers/gnu/7.3.0 The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). compilers/gnu/8.3.0 The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). compilers/gnu/9.2.0 The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). compilers/gnu/10.2.0 The GNU Compiler Collection includes front ends for C, C++, Objective-C, and Fortran, as well as libraries for these languages (libstdc++,...). cp2k/8.2/ompi/gnu-10.2.0 Adds CP2K to your environment. cuda/10.1.243/gnu-7.3.0 Adds cuda 10.1.243 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/11.2.0/gnu-10.2.0 Adds cuda 11.2.0 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cuda/11.3.1/gnu-10.2.0 Adds cuda 11.3.1 to your environment. This is for compiling CUDA code to run on NVIDIA GPUs. cudnn/8.2.1.32/cuda-11.3 Adds cuDNN 8.2.1 to your environment. fftw/3.3.8/gnu-7.3.0 Adds FFTW 3.3.8 for GCC 7.3.0 compilers to your environment variables. Includes single and double precision, plus long-double and quad. Includes OpenMP and POSIX threads libraries. fftw/3.3.8/gnu-9.2.0 Adds FFTW 3.3.8 for GCC 9.2.0 compilers to your environment variables. Includes single and double precision, plus long-double and quad. Includes OpenMP and POSIX threads libraries. fftw/3.3.9/gnu-10.2.0 Adds FFTW 3.3.9 for GCC 10.2.0 compilers to your environment variables. Includes single and double precision, plus long-double and quad. Includes OpenMP and POSIX threads libraries. gcc-libs/7.3.0 Base module for gcc 7.3.0 -- does not set the standard compiler environment variables. The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). gcc-libs/8.3.0 Base module for gcc 8.3.0 -- does not set the standard compiler environment variables. The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). gcc-libs/9.2.0 Base module for gcc 9.2.0 -- does not set the standard compiler environment variables. The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). gcc-libs/10.2.0 Base module for gcc 10.2.0 -- does not set the standard compiler environment variables. The GNU Compiler Collection includes front ends for C, C++, Objective-C, and Fortran, as well as libraries for these languages (libstdc++,...). Patch 95889 for __has_include applied. gdal/3.0.4/gnu-9.2.0 adds GDAL 3.0.4 with PROJ.4 7.0.0 to your environment variables. gdal/3.1.3/gnu-9.2.0 adds GDAL 3.1.3 with PROJ.4 7.0.0 to your environment variables. gdal/3.3.2/gnu-10.2.0 adds GDAL 3.3.2 with PROJ.4 8.1.1 to your environment variables. geos/3.8.1/gnu-9.2.0 Adds geos 3.8.1 to your environment. GEOS (Geometry Engine, Open Source) is a library for performing various spatial operations, especially for boolean operations on GIS data. Note this version does not include the SWIG, Python, Ruby, or PHP bindings. geos/3.9.1/gnu-10.2.0 Adds geos 3.9.1 to your environment. GEOS (Geometry Engine, Open Source) is a library for performing various spatial operations, especially for boolean operations on GIS data. Note this version does not include the SWIG, Python, Ruby, or PHP bindings. gmt/6.0.0/gnu-9.2.0 adds GMT 6.0.0 to your environment variables gmt/6.2.0/gnu-10.2.0 adds GMT 6.2.0 to your environment variables grass/8.0-dev/gnu-10.2.0 Adds GRASS GIS 8.0 Development Version to your environment. grass/8.0dev adds UCL set of modules for GRASS GIS 8.0 Dev to your environment gromacs/2020.1/cuda-10.1 Adds gromacs 2020.1 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2020.1/intel-2020 Adds gromacs 2020.1 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2020.4/cuda-10.1 Adds gromacs 2020.4 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2020.4/intel-2020 Adds gromacs 2020.4 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2021.2/gnu-7.3.0 Adds gromacs 2021.2 to your environment. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gromacs/2021.5/cuda-11.3 Adds gromacs 2021.5 built with CUDA 11.3 to your environment. ThreadMPI and OpenMPI versions included. GROMACS is a package for performing molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. gsl/2.6/gnu-9.2.0 adds GSL 2.6 for GCC 9.2.0 to your environment. gsl/2.7/gnu-10.2.0 adds GSL 2.7 for GCC 10.2.0 to your environment. hdf/5-1.10.5/gnu-9.2.0 Adds hdf 5-1.10.5 to your environment. Serial version built with GNU. hdf/5-1.10.6/gnu-10.2.0 Adds hdf 5-1.10.6 to your environment. Serial version built with GNU 10.2.0. jags/4.3.0/gnu-10.2.0-openblas Adds JAGS 4.3.0 to your environment. lammps/29sep21up2/basic-fftw/gnu-10.2.0 Adds LAMMPS 29Sep2021 Update 2 to your environment. Binary is lmp_mpi. lammps/29sep21up2/basic/gnu-10.2.0 Adds LAMMPS 29Sep2021 Update 2 to your environment. Binary is lmp. lammps/29sep21up2/basic/gnu-10.2.0-aristotle Adds LAMMPS 29Sep2021 Update 2 to your environment. Binary is lmp_aristotle. lammps/29sep21up2/basic/intel-2020 Adds LAMMPS 29Sep2021 Update 2 to your environment. Binary is lmp_mpi or lmp_default. lammps/29sep21up2/gpu/gnu-10.2.0 Adds LAMMPS 29Sep2021 Update 2 to your environment. Binary is lmp. lammps/29sep21up2/gpu/intel-2020 Adds LAMMPS 29Sep2021 Update 2 with gpu package to your environment. Binary is lmp_gpu or lmp_default. lammps/29sep21up2/userintel/intel-2020 Adds LAMMPS 29Sep2021 Update 2 with INTEL package to your environment. Binary is lmp_mpi or lmp_default. libpng/1.6.37/gnu-9.2.0 Adds libpng 1.6.37 to your environment. matlab/full/r2018a/9.4-prefdir-fix Adds Matlab R2018a to your environment. med/4.0.0/gnu-9.2.0 Adds med 4.0.0 to your environment. Allows reading and writing of MED format files. mpi/openmpi/3.1.4/gnu-7.3.0 Adds openmpi 3.1.4 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/3.1.5/gnu-9.2.0 Adds openmpi 3.1.5 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mpi/openmpi/4.0.5/gnu-10.2.0 Adds openmpi 4.0.5 to your environment. The Open MPI Project is an open source Message Passing Interface implementation. mumps/5.2.1/gnu-9.2.0 Adds mumps 5.2.1 to your environment. Sequential (threaded) version built with GNU, OpenBLAS and METIS. namd/2.13/intel-2018-update3/testing Adds NAMD 2.13 to your environment namd/2.13/plumed/intel-2018-update3/testing Adds NAMD 2.13 to your environment netcdf/4.7.4/gnu-9.2.0 adds NetCDF 4.7.4 for GCC 9.2.0 to your environment. netcdf/4.8.1/gnu-10.2.0 adds NetCDF 4.8.1 for GCC 10.2.0 to your environment. openblas/0.3.7-native-threads/gnu-9.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. openblas/0.3.7-openmp/gnu-9.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. openblas/0.3.7-serial/gnu-9.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. openblas/0.3.13-native-threads/gnu-10.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. openblas/0.3.13-openmp/gnu-10.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. openblas/0.3.13-serial/gnu-10.2.0 OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. pcre2/10.35/gnu-9.2.0 Adds pcre2 10.35 to your environment. PCRE (Perl-compatible regular expressions) is a C library implementing regular expression pattern-matching using the same semantics as Perl 5. pcre2/10.37/gnu-10.2.0 Adds pcre2 10.37 to your environment. PCRE (Perl-compatible regular expressions) is a C library implementing regular expression pattern-matching using the same semantics as Perl 5. proj.4/7.0.0/gnu-9.2.0 Adds the PROJ.4 Cartographic Projections library to your environment. proj.4/8.1.1/gnu-10.2.0 Adds the PROJ.4 Cartographic Projections library to your environment. protobuf/3.14.0/gnu-9.2.0 adds Google Protocol Buffers for GCC 9.2.0 to your environment. protobuf/3.17.3/gnu-10.2.0 adds Google Protocol Buffers for GCC 10.2.0 to your environment. prsice/2.3.3/gnu-9.2.0 PRSice (pronounced 'precise') is a software package for calculating, applying, evaluating and plotting the results of polygenic risk scores (PRS). python/3.9.6-gnu-10.2.0 Adds Python 3.9.6 compiled with GNU 10.2.0 with pip and virtualenv to your environment variables. python3/3.9-gnu-10.2.0 Adds UCL recommended set of python packages to your environment variables. To see what is included, check https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-shared.list and https://github.com/UCL-RITS/rcps-buildscripts/blob/master/lists/python-3.list quip/c6359e1/gnu-10.2.0 Adds QUIP to your environment built with GNU 10.2.0 for recent versions of LAMMPS r/3.6.3-openblas/gnu-9.2.0 Adds R 3.6.3 and Bioconductor 3.10 to your environment. r/4.0.2-openblas/gnu-9.2.0 Adds R 4.0.2 and Bioconductor 3.11 to your environment. r/4.1.1-openblas/gnu-10.2.0 Adds R 4.1.1 and Bioconductor 3.13 to your environment. r/r-3.6.3_bc-3.10 adds UCL recommended set of R packages to your environment variables r/r-4.0.2_bc-3.11 adds UCL recommended set of R packages for R 4.0.2 to your environment variables r/r-4.1.1_bc-3.13 adds UCL recommended set of R packages for R 4.1.1 to your environment variables r/r-4.2.0_bc-3.15 adds UCL recommended set of R packages for R 4.2.0 to your environment variables rcps-core-beta/gnu-7.3.0 adds a core set of applications and libraries to your environment. rcps-core-beta/gnu-8.3.0 adds a core set of applications and libraries to your environment. rcps-core-beta/gnu-9.2.0 adds a core set of applications and libraries to your environment. rcps-core-beta/gnu-10.2.0 adds a core set of applications and libraries to your environment. sac/102.0-test/gnu-10.2.0 Adds SAC 102.0 to your environment. scalapack/2.1.0/gnu-9.2.0/openblas-0.3.7 ScaLAPACK is a library of high-performance linear algebra routines for parallel distributed memory machines. ScaLAPACK solves dense and banded linear systems, least squares problems, eigenvalue problems, and singular value problems. sqlite/3.36.0/gnu-10.2.0 Adds SQLite Version 3.36.0 to your environment. stata/16 Adds Stata/MP 16 to your environment. superlu/5.2.1/gnu-10.2.0 Adds superlu 5.2.1 to your environment. SuperLU is a general purpose library for the direct solution of large, sparse, nonsymmetric systems of linear equations. ucx/1.9.0/gnu-10.2.0 Adds ucx 1.9.0 to your environment. Unified Communication X (UCX) provides an optimized communication layer for Message Passing (MPI), PGAS/OpenSHMEM libraries and RPC/data-centric applications. udunits/2.2.26/gnu-9.2.0 adds the UDUNITS-2 package to your environment. udunits/2.2.28/gnu-10.2.0 adds the UDUNITS-2 package to your environment.","title":"Beta Modules"},{"location":"Installed_Software_Lists/module-packages/#workaround-modules","text":"Sometimes we'll find a problem that can't be fixed properly, but can be worked-around by doing something that can be loaded as a module. That kind of module goes in this section. Module Description bazel-compiler-helpers/intel-2018 Adds bazel compiler wrappers to your environment. getcwd-autoretry This module uses LD_PRELOAD to shadow the getcwd function with a version that retries on failure, and is intended to workaround a bug in the Lustre filesystem.","title":"Workaround Modules"},{"location":"Installed_Software_Lists/python-packages/","text":"Python Packages \u00a7 We provide a collection of installed Python packages for each minor version of Python, as a bundle module . This page lists the packages for the current recommended Python 3 bundle. This can be loaded using: module load python3/recommended The version of Python 3 provided with this bundle is currently Python 3.9.10. Note that some packages we do not provide this way, because they have complicated non-Python dependencies. These are usually provided using the normal application modules system. This includes TensorFlow . The following list was last updated at 12:05:03 (+0100) on 10 Oct 2022. Module Version Description acora 2.3 Fast multi-keyword search engine for text strings appdirs 1.4.4 A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". args 0.1.0 Command Arguments for Humans. ase 3.22.1 Atomic Simulation Environment astor 0.8.1 Read/rewrite/write Python ASTs astropy 5.0.1 Astronomy and astrophysics core library asttokens 2.0.5 Annotate AST trees with source code positions attrs 21.4.0 Classes Without Boilerplate backcall 0.2.0 Specifications for callback functions passed in to an API biopython 1.79 Freely available tools for computational molecular biology. bitarray 2.3.6 efficient arrays of booleans -- C extension black 22.1.0 The uncompromising code formatter. BoltzTraP2 20.7.1 band-structure interpolator and transport coefficient calculator CatLearn 0.6.2 Machine Learning using atomic-scale calculations. certifi 2021.10.8 Python package for providing Mozilla's CA Bundle. cffi 1.15.0 Foreign Function Interface for Python calling C code. cftime 1.5.2 Time-handling functionality from netcdf4-python charset-normalizer 2.0.11 The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. click 8.0.3 Composable command line interface toolkit clint 0.5.1 Python Command Line Interface Tools colorama 0.4.4 Cross-platform colored terminal text. coloredlogs 15.0.1 Colored terminal output for Python's logging module colormath 3.0.0 Color math and conversion library. commonmark 0.9.1 Python parser for the CommonMark Markdown spec cryptography 36.0.1 cryptography is a package which provides cryptographic recipes and primitives to Python developers. cutadapt 3.5 trim adapters from high-throughput sequencing reads cvxopt 1.2.7 Convex optimization package cycler 0.11.0 Composable style cycles Cython 0.29.27 The Cython compiler for writing C extensions for the Python language. cyvcf2 0.30.14 fast vcf parsing with cython + htslib deap 1.3.1 Distributed Evolutionary Algorithms in Python decorator 5.1.1 Decorators for Humans distlib 0.3.4 Distribution utilities dnaio 0.7.1 Read and write FASTA and FASTQ files efficiently ecdsa 0.17.0 ECDSA cryptographic signature library (pure python) emcee 3.1.1 The Python ensemble sampling toolkit for MCMC ephem 4.1.3 Compute positions of the planets and stars executing 0.8.2 Get the currently executing AST node of a frame, and other information filelock 3.4.2 A platform independent file lock. Flask 2.0.3 A simple framework for building complex web applications. fonttools 4.29.1 Tools to manipulate font files funcparserlib 0.3.6 Recursive descent parsing library based on functional combinators future 0.18.2 Clean single-source support for Python 3 and 2 greenlet 1.1.2 Lightweight in-process concurrent programming h5py 3.6.0 Read and write HDF5 files from Python hankel 1.1.0 Hankel Transformations using method of Ogata 2005 humanfriendly 10.0 Human friendly output for text interfaces using Python hy 0.20.0 Lisp and Python love each other. idna 3.3 Internationalized Domain Names in Applications (IDNA) imageio 2.15.0 Library for reading and writing a wide range of image, video, scientific, and volumetric data formats. importlib-metadata 4.10.1 Read metadata from Python packages iniconfig 1.1.1 iniconfig: brain-dead simple config-ini parsing ipython 8.0.1 IPython: Productive Interactive Computing isal 0.11.1 Faster zlib and gzip compatible compression and decompression by providing python bindings for the ISA-L library. itsdangerous 2.1.1 Safely pass data to untrusted environments and back. jedi 0.18.1 An autocompletion tool for Python that can be used for text editors. Jinja2 3.0.3 A very fast and expressive template engine. joblib 1.1.0 Lightweight pipelining with Python functions kiwisolver 1.3.2 A fast implementation of the Cassowary constraint solver ldap3 2.9.1 A strictly RFC 4510 conforming LDAP V3 pure Python client library llvmlite 0.38.0 lightweight wrapper around basic LLVM functionality lxml 4.7.1 Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. lzstring 1.0.4 lz-string for python Mako 1.1.6 A super-fast templating language that borrows the best ideas from the existing templating languages. Markdown 3.3.6 Python implementation of Markdown. MarkupSafe 2.0.1 Safely add untrusted strings to HTML/XML markup. matplotlib 3.5.1 Python plotting package matplotlib-inline 0.1.3 Inline Matplotlib backend for Jupyter mpmath 1.2.1 Python library for arbitrary-precision floating-point arithmetic multiqc 1.12 Create aggregate bioinformatics analysis reports across many samples and tools mypy-extensions 0.4.3 Experimental type system extensions for programs checked with the mypy typechecker. netCDF4 1.5.8 Provides an object-oriented python interface to the netCDF version 4 library. networkx 2.6.3 Python package for creating and manipulating graphs and networks nibabel 3.2.2 Access a multitude of neuroimaging data formats ninja 1.10.2.3 Ninja is a small build system with a focus on speed nose 1.3.7 nose extends unittest to make testing easier numba 0.55.1 compiling Python code using LLVM numpy 1.21.5 NumPy is the fundamental package for array computing with Python. obspy 1.2.2 ObsPy - a Python framework for seismological observatories. packaging 21.3 Core utilities for Python packages pandas 1.4.0 Powerful data structures for data analysis, time series, and statistics parso 0.8.3 A Python Parser pathspec 0.9.0 Utility library for gitignore style pattern matching of file paths. pexpect 4.8.0 Pexpect allows easy control of interactive console applications. pickleshare 0.7.5 Tiny 'shelve'-like database with concurrency support Pillow 9.0.1 Python Imaging Library (Fork) pip 22.0.3 The PyPA recommended tool for installing Python packages. platformdirs 2.4.1 A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". pluggy 1.0.0 plugin and hook calling mechanisms for python Pmw 2.0.1 Python Mega Widgets prompt-toolkit 3.0.27 Library for building powerful interactive command lines in Python psutil 5.9.0 Cross-platform lib for process and system monitoring in Python. ptyprocess 0.7.0 Run a subprocess in a pseudo terminal pure-eval 0.2.2 Safely evaluate AST nodes without side effects py 1.11.0 library with cross-python path, ini-parsing, io, code, log facilities pyasn1 0.4.8 ASN.1 types and codecs pycparser 2.21 C parser in Python pyerfa 2.0.0.1 Python bindings for ERFA pyfastaq 3.17.0 Script to manipulate FASTA and FASTQ files, plus API for developers Pygments 2.11.2 Pygments is a syntax highlighting package written in Python. pyparsing 3.0.7 Python parsing module pysam 0.18.0 pysam pyspglib 1.8.3.1 This is the pyspglib module. pytest 7.0.0 pytest: simple powerful testing with Python python-dateutil 2.8.2 Extensions to the standard Python datetime module python-Levenshtein 0.12.2 Python extension for computing string edit distances and similarities. pytz 2021.3 World timezone definitions, modern and historical PyWavelets 1.2.0 PyWavelets, wavelet transform module PyYAML 6.0 YAML parser and emitter for Python qutip 4.6.3 QuTiP: The Quantum Toolbox in Python regex 2022.1.18 Alternative regular expression module, to replace re. requests 2.27.1 Python HTTP for Humans. rich 11.2.0 Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal rply 0.7.8 A pure Python Lex/Yacc that works with RPython scikit-image 0.19.1 Image processing in Python scikit-learn 1.0.2 A set of python modules for machine learning and data mining scipy 1.8.0 SciPy: Scientific Library for Python seaborn 0.11.2 seaborn: statistical data visualization setuptools 60.8.1 Easily download, build, install, upgrade, and uninstall Python packages simplejson 3.17.6 Simple, fast, extensible JSON encoder/decoder for Python six 1.16.0 Python 2 and 3 compatibility utilities spectra 0.0.11 Color scales and color conversion made easy for Python. spglib 1.16.3 This is the spglib module. SQLAlchemy 1.4.31 Database Abstraction Library sshpubkeys 3.3.1 SSH public key parser stack-data 0.1.4 Extract data from python stack frames and tracebacks for informative displays tabulate 0.8.9 Pretty-print tabular data threadpoolctl 3.1.0 threadpoolctl tifffile 2022.2.2 Read and write TIFF files tomli 2.0.1 A lil' TOML parser tqdm 4.63.0 Fast, Extensible Progress Meter traitlets 5.1.1 Traitlets Python configuration system typing_extensions 4.0.1 Backported and Experimental Type Hints for Python 3.6+ urllib3 1.26.8 HTTP library with thread-safe connection pooling, file post, and more. virtualenv 20.13.1 Virtual Python Environment builder wcwidth 0.2.5 Measures the displayed width of unicode strings in a terminal weblogo 3.7.9 WebLogo3 : Sequence Logos Redrawn Werkzeug 2.0.3 The comprehensive WSGI web application library. wheel 0.37.1 A built-package format for Python xlrd 2.0.1 Library for developers to extract data from Microsoft Excel (tm) .xls spreadsheet files XlsxWriter 3.0.2 A Python module for creating Excel XLSX files. xlutils 2.0.0 Utilities for working with Excel files that require both xlrd and xlwt xlwt 1.3.0 Library to create spreadsheet files compatible with MS Excel 97/2000/XP/2003 XLS files, on any platform, with Python 2.6, 2.7, 3.3+ xopen 1.4.0 Open compressed files transparently zipp 3.7.0 Backport of pathlib-compatible object wrapper for zip files","title":"Python Packages"},{"location":"Installed_Software_Lists/python-packages/#python-packages","text":"We provide a collection of installed Python packages for each minor version of Python, as a bundle module . This page lists the packages for the current recommended Python 3 bundle. This can be loaded using: module load python3/recommended The version of Python 3 provided with this bundle is currently Python 3.9.10. Note that some packages we do not provide this way, because they have complicated non-Python dependencies. These are usually provided using the normal application modules system. This includes TensorFlow . The following list was last updated at 12:05:03 (+0100) on 10 Oct 2022. Module Version Description acora 2.3 Fast multi-keyword search engine for text strings appdirs 1.4.4 A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". args 0.1.0 Command Arguments for Humans. ase 3.22.1 Atomic Simulation Environment astor 0.8.1 Read/rewrite/write Python ASTs astropy 5.0.1 Astronomy and astrophysics core library asttokens 2.0.5 Annotate AST trees with source code positions attrs 21.4.0 Classes Without Boilerplate backcall 0.2.0 Specifications for callback functions passed in to an API biopython 1.79 Freely available tools for computational molecular biology. bitarray 2.3.6 efficient arrays of booleans -- C extension black 22.1.0 The uncompromising code formatter. BoltzTraP2 20.7.1 band-structure interpolator and transport coefficient calculator CatLearn 0.6.2 Machine Learning using atomic-scale calculations. certifi 2021.10.8 Python package for providing Mozilla's CA Bundle. cffi 1.15.0 Foreign Function Interface for Python calling C code. cftime 1.5.2 Time-handling functionality from netcdf4-python charset-normalizer 2.0.11 The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. click 8.0.3 Composable command line interface toolkit clint 0.5.1 Python Command Line Interface Tools colorama 0.4.4 Cross-platform colored terminal text. coloredlogs 15.0.1 Colored terminal output for Python's logging module colormath 3.0.0 Color math and conversion library. commonmark 0.9.1 Python parser for the CommonMark Markdown spec cryptography 36.0.1 cryptography is a package which provides cryptographic recipes and primitives to Python developers. cutadapt 3.5 trim adapters from high-throughput sequencing reads cvxopt 1.2.7 Convex optimization package cycler 0.11.0 Composable style cycles Cython 0.29.27 The Cython compiler for writing C extensions for the Python language. cyvcf2 0.30.14 fast vcf parsing with cython + htslib deap 1.3.1 Distributed Evolutionary Algorithms in Python decorator 5.1.1 Decorators for Humans distlib 0.3.4 Distribution utilities dnaio 0.7.1 Read and write FASTA and FASTQ files efficiently ecdsa 0.17.0 ECDSA cryptographic signature library (pure python) emcee 3.1.1 The Python ensemble sampling toolkit for MCMC ephem 4.1.3 Compute positions of the planets and stars executing 0.8.2 Get the currently executing AST node of a frame, and other information filelock 3.4.2 A platform independent file lock. Flask 2.0.3 A simple framework for building complex web applications. fonttools 4.29.1 Tools to manipulate font files funcparserlib 0.3.6 Recursive descent parsing library based on functional combinators future 0.18.2 Clean single-source support for Python 3 and 2 greenlet 1.1.2 Lightweight in-process concurrent programming h5py 3.6.0 Read and write HDF5 files from Python hankel 1.1.0 Hankel Transformations using method of Ogata 2005 humanfriendly 10.0 Human friendly output for text interfaces using Python hy 0.20.0 Lisp and Python love each other. idna 3.3 Internationalized Domain Names in Applications (IDNA) imageio 2.15.0 Library for reading and writing a wide range of image, video, scientific, and volumetric data formats. importlib-metadata 4.10.1 Read metadata from Python packages iniconfig 1.1.1 iniconfig: brain-dead simple config-ini parsing ipython 8.0.1 IPython: Productive Interactive Computing isal 0.11.1 Faster zlib and gzip compatible compression and decompression by providing python bindings for the ISA-L library. itsdangerous 2.1.1 Safely pass data to untrusted environments and back. jedi 0.18.1 An autocompletion tool for Python that can be used for text editors. Jinja2 3.0.3 A very fast and expressive template engine. joblib 1.1.0 Lightweight pipelining with Python functions kiwisolver 1.3.2 A fast implementation of the Cassowary constraint solver ldap3 2.9.1 A strictly RFC 4510 conforming LDAP V3 pure Python client library llvmlite 0.38.0 lightweight wrapper around basic LLVM functionality lxml 4.7.1 Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. lzstring 1.0.4 lz-string for python Mako 1.1.6 A super-fast templating language that borrows the best ideas from the existing templating languages. Markdown 3.3.6 Python implementation of Markdown. MarkupSafe 2.0.1 Safely add untrusted strings to HTML/XML markup. matplotlib 3.5.1 Python plotting package matplotlib-inline 0.1.3 Inline Matplotlib backend for Jupyter mpmath 1.2.1 Python library for arbitrary-precision floating-point arithmetic multiqc 1.12 Create aggregate bioinformatics analysis reports across many samples and tools mypy-extensions 0.4.3 Experimental type system extensions for programs checked with the mypy typechecker. netCDF4 1.5.8 Provides an object-oriented python interface to the netCDF version 4 library. networkx 2.6.3 Python package for creating and manipulating graphs and networks nibabel 3.2.2 Access a multitude of neuroimaging data formats ninja 1.10.2.3 Ninja is a small build system with a focus on speed nose 1.3.7 nose extends unittest to make testing easier numba 0.55.1 compiling Python code using LLVM numpy 1.21.5 NumPy is the fundamental package for array computing with Python. obspy 1.2.2 ObsPy - a Python framework for seismological observatories. packaging 21.3 Core utilities for Python packages pandas 1.4.0 Powerful data structures for data analysis, time series, and statistics parso 0.8.3 A Python Parser pathspec 0.9.0 Utility library for gitignore style pattern matching of file paths. pexpect 4.8.0 Pexpect allows easy control of interactive console applications. pickleshare 0.7.5 Tiny 'shelve'-like database with concurrency support Pillow 9.0.1 Python Imaging Library (Fork) pip 22.0.3 The PyPA recommended tool for installing Python packages. platformdirs 2.4.1 A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". pluggy 1.0.0 plugin and hook calling mechanisms for python Pmw 2.0.1 Python Mega Widgets prompt-toolkit 3.0.27 Library for building powerful interactive command lines in Python psutil 5.9.0 Cross-platform lib for process and system monitoring in Python. ptyprocess 0.7.0 Run a subprocess in a pseudo terminal pure-eval 0.2.2 Safely evaluate AST nodes without side effects py 1.11.0 library with cross-python path, ini-parsing, io, code, log facilities pyasn1 0.4.8 ASN.1 types and codecs pycparser 2.21 C parser in Python pyerfa 2.0.0.1 Python bindings for ERFA pyfastaq 3.17.0 Script to manipulate FASTA and FASTQ files, plus API for developers Pygments 2.11.2 Pygments is a syntax highlighting package written in Python. pyparsing 3.0.7 Python parsing module pysam 0.18.0 pysam pyspglib 1.8.3.1 This is the pyspglib module. pytest 7.0.0 pytest: simple powerful testing with Python python-dateutil 2.8.2 Extensions to the standard Python datetime module python-Levenshtein 0.12.2 Python extension for computing string edit distances and similarities. pytz 2021.3 World timezone definitions, modern and historical PyWavelets 1.2.0 PyWavelets, wavelet transform module PyYAML 6.0 YAML parser and emitter for Python qutip 4.6.3 QuTiP: The Quantum Toolbox in Python regex 2022.1.18 Alternative regular expression module, to replace re. requests 2.27.1 Python HTTP for Humans. rich 11.2.0 Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal rply 0.7.8 A pure Python Lex/Yacc that works with RPython scikit-image 0.19.1 Image processing in Python scikit-learn 1.0.2 A set of python modules for machine learning and data mining scipy 1.8.0 SciPy: Scientific Library for Python seaborn 0.11.2 seaborn: statistical data visualization setuptools 60.8.1 Easily download, build, install, upgrade, and uninstall Python packages simplejson 3.17.6 Simple, fast, extensible JSON encoder/decoder for Python six 1.16.0 Python 2 and 3 compatibility utilities spectra 0.0.11 Color scales and color conversion made easy for Python. spglib 1.16.3 This is the spglib module. SQLAlchemy 1.4.31 Database Abstraction Library sshpubkeys 3.3.1 SSH public key parser stack-data 0.1.4 Extract data from python stack frames and tracebacks for informative displays tabulate 0.8.9 Pretty-print tabular data threadpoolctl 3.1.0 threadpoolctl tifffile 2022.2.2 Read and write TIFF files tomli 2.0.1 A lil' TOML parser tqdm 4.63.0 Fast, Extensible Progress Meter traitlets 5.1.1 Traitlets Python configuration system typing_extensions 4.0.1 Backported and Experimental Type Hints for Python 3.6+ urllib3 1.26.8 HTTP library with thread-safe connection pooling, file post, and more. virtualenv 20.13.1 Virtual Python Environment builder wcwidth 0.2.5 Measures the displayed width of unicode strings in a terminal weblogo 3.7.9 WebLogo3 : Sequence Logos Redrawn Werkzeug 2.0.3 The comprehensive WSGI web application library. wheel 0.37.1 A built-package format for Python xlrd 2.0.1 Library for developers to extract data from Microsoft Excel (tm) .xls spreadsheet files XlsxWriter 3.0.2 A Python module for creating Excel XLSX files. xlutils 2.0.0 Utilities for working with Excel files that require both xlrd and xlwt xlwt 1.3.0 Library to create spreadsheet files compatible with MS Excel 97/2000/XP/2003 XLS files, on any platform, with Python 2.6, 2.7, 3.3+ xopen 1.4.0 Open compressed files transparently zipp 3.7.0 Backport of pathlib-compatible object wrapper for zip files","title":"Python Packages"},{"location":"Installed_Software_Lists/r-packages/","text":"R Packages \u00a7 We provide a collection of installed R packages for each release of R, as a bundle module . This page lists the packages for the current recommended R bundle. This can be loaded using: module load r/recommended The version of R provided with this bundle is currently R version 4.2.0 (2022-04-22). The following list was last updated at: 12:05:07 (+0100) on 10 Oct 2022. Module Version Description abc 2.2.1 Tools for Approximate Bayesian Computation (ABC) abc.data 1.0 Data Only: Tools for Approximate Bayesian Computation (ABC) abind 1.4-5 Combine Multidimensional Arrays ade4 1.7-19 Analysis of Ecological Data: Exploratory and Euclidean Methods in Environmental Sciences adegenet 2.1.6 Exploratory Analysis of Genetic and Genomic Data ADGofTest 0.3 Anderson-Darling GoF test admisc 0.27 Adrian Dusa's Miscellaneous affxparser 1.68.1 Affymetrix File Parsing SDK affy 1.74.0 Methods for Affymetrix Oligonucleotide Arrays affydata 1.44.0 Affymetrix Data for Demonstration Purpose affyio 1.66.0 Tools for parsing Affymetrix data files affylmGUI 1.70.0 GUI for limma Package with Affymetrix Microarrays affyPLM 1.72.0 Methods for fitting probe-level models akima 0.6-3.4 Interpolation of Irregularly and Regularly Spaced Data annaffy 1.68.0 Annotation tools for Affymetrix biological metadata annmap 1.38.0 Genome annotation and visualisation package pertaining to Affymetrix arrays and NGS analysis. annotate 1.74.0 Annotation for microarrays AnnotationDbi 1.58.0 Manipulation of SQLite-based annotations in Bioconductor AnnotationFilter 1.20.0 Facilities for Filtering Bioconductor Annotation Resources AnnotationForge 1.38.0 Tools for building SQLite-based annotation data packages AnnotationHub 3.4.0 Client to access AnnotationHub resources ape 5.6-2 Analyses of Phylogenetics and Evolution arm 1.12-2 Data Analysis Using Regression and Multilevel/Hierarchical Models aroma.affymetrix 3.2.0 Analysis of Large Affymetrix Microarray Data Sets aroma.apd 0.6.0 A Probe-Level Data File Format Used by 'aroma.affymetrix' [deprecated] aroma.core 3.2.2 Core Methods and Classes Used by 'aroma.*' Packages Part of the Aroma Framework aroma.light 3.26.0 Light-Weight Methods for Normalization and Visualization of Microarray Data using Only Basic R Data Types arrangements 1.1.9 Fast Generators and Iterators for Permutations, Combinations, Integer Partitions and Compositions arsenal 3.6.3 An Arsenal of 'R' Functions for Large-Scale Statistical Summaries askpass 1.1 Safe Password Entry for R, Git, and SSH assertthat 0.2.1 Easy Pre and Post Assertions backports 1.4.1 Reimplementations of Functions Introduced Since R-3.0.0 bamsignals 1.28.0 Extract read count signals from bam files base 4.2.0 The R Base Package base64 2.0 Base64 Encoder and Decoder base64enc 0.1-3 Tools for base64 encoding BaSTA 1.9.4 Age-Specific Survival Analysis from Incomplete Capture-Recapture/Recovery Data BatchJobs 1.9 Batch Computing with R bayesplot 1.9.0 Plotting for Bayesian Models BBmisc 1.12 Miscellaneous Helper Functions for B. Bischl beachmat 2.12.0 Compiling Bioconductor to Handle Each Matrix Type beadarray 2.46.0 Quality assessment and low-level analysis for Illumina BeadArray data beadarrayExampleData 1.34.0 Example data for the beadarray package BeadDataPackR 1.48.0 Compression of Illumina BeadArray data beanplot 1.3.1 Visualization via Beanplots (Like Boxplot/Stripchart/Violin Plot) benchmarkme 1.0.7 Crowd Sourced System Benchmarks benchmarkmeData 1.0.4 Data Set for the 'benchmarkme' Package bezier 1.1.2 Toolkit for Bezier Curves and Splines BH 1.78.0-0 Boost C++ Header Files BiasedUrn 1.07 Biased Urn Model Distributions bio3d 2.4-3 Biological Structure Analysis Biobase 2.56.0 Biobase: Base functions for Bioconductor BiocFileCache 2.4.0 Manage Files Across Sessions BiocGenerics 0.42.0 S4 generic functions used in Bioconductor BiocIO 1.6.0 Standard Input and Output for Bioconductor Packages BiocManager 1.30.18 Access the Bioconductor Project Package Repository BiocParallel 1.30.2 Bioconductor facilities for parallel evaluation BiocVersion 3.15.2 Set the appropriate version of Bioconductor packages biomaRt 2.52.0 Interface to BioMart databases (i.e. Ensembl) Biostrings 2.64.0 Efficient manipulation of biological strings biovizBase 1.44.0 Basic graphic utilities for visualization of genomic data. bit 4.0.4 Classes and Methods for Fast Memory-Efficient Boolean Selections bit64 4.0.5 A S3 Class for Vectors of 64bit Integers bitops 1.0-7 Bitwise Operations blob 1.2.3 A Simple S3 Class for Representing Vectors of Binary Data ('BLOBS') blockmodeling 1.0.5 Generalized and Classical Blockmodeling of Valued Networks boot 1.3-28 Bootstrap Functions (Originally by Angelo Canty for S) BradleyTerry2 1.1-2 Bradley-Terry Models brew 1.0-7 Templating Framework for Report Generation brglm 0.7.2 Bias Reduction in Binomial-Response Generalized Linear Models brio 1.1.3 Basic R Input Output broom 0.8.0 Convert Statistical Objects into Tidy Tibbles BSgenome 1.64.0 Software infrastructure for efficient representation of full genomes and their SNPs BSgenome.Hsapiens.UCSC.hg19 1.4.3 Full genome sequences for Homo sapiens (UCSC version hg19, based on GRCh37.p13) bslib 0.3.1 Custom 'Bootstrap' 'Sass' Themes for 'shiny' and 'rmarkdown' bsseq 1.32.0 Analyze, manage and store bisulfite sequencing data bumphunter 1.38.0 Bump Hunter cachem 1.0.6 Cache R Objects with Automatic Pruning callr 3.7.0 Call R from R car 3.0-13 Companion to Applied Regression carData 3.0-5 Companion to Applied Regression Data Sets caret 6.0-92 Classification and Regression Training Category 2.62.0 Category Analysis caTools 1.18.2 Tools: Moving Window Statistics, GIF, Base64, ROC AUC, etc CDM 8.1-12 Cognitive Diagnosis Modeling cellranger 1.1.0 Translate Spreadsheet Cell Ranges to Rows and Columns ChAMP 2.26.0 Chip Analysis Methylation Pipeline for Illumina HumanMethylation450 and EPIC ChAMPdata 2.28.0 Data Packages for ChAMP package checkmate 2.1.0 Fast and Versatile Argument Checks class 7.3-20 Functions for Classification classInt 0.4-3 Choose Univariate Class Intervals cli 3.3.0 Helpers for Developing Command Line Interfaces clipr 0.8.0 Read and Write from the System Clipboard clue 0.3-60 Cluster Ensembles cluster 2.1.3 \"Finding Groups in Data\": Cluster Analysis Extended Rousseeuw et al. cmprsk 2.2-11 Subdistribution Analysis of Competing Risks coda 0.19-4 Output Analysis and Diagnostics for MCMC codetools 0.2-18 Code Analysis Tools for R colorRamps 2.3.1 Builds Color Tables colorspace 2.0-3 A Toolbox for Manipulating and Assessing Colors and Palettes colourpicker 1.1.1 A Colour Picker Tool for Shiny and for Selecting Colours in Plots combinat 0.0-8 combinatorics utilities commonmark 1.8.0 High Performance CommonMark and Github Markdown Rendering in R compiler 4.2.0 The R Compiler Package copula 1.0-1 Multivariate Dependence with Copulas copynumber 1.36.0 Segmentation of single- and multi-track copy number data by penalized least squares regression. corpcor 1.6.10 Efficient Estimation of Covariance and (Partial) Correlation cowplot 1.1.1 Streamlined Plot Theme and Plot Annotations for 'ggplot2' cpp11 0.4.2 A C++11 Interface for R's C Interface crayon 1.5.1 Colored Terminal Output credentials 1.3.2 Tools for Managing SSH and Git Credentials crosstalk 1.2.0 Inter-Widget Interactivity for HTML Widgets crul 1.2.0 HTTP Client curl 4.3.2 A Modern and Flexible Web Client for R data.table 1.14.2 Extension of data.frame datasets 4.2.0 The R Datasets Package DBI 1.1.2 R Database Interface dbplyr 2.1.1 A 'dplyr' Back End for Databases DelayedArray 0.22.0 A unified framework for working transparently with on-disk and in-memory array-like datasets DelayedMatrixStats 1.18.0 Functions that Apply to Rows and Columns of 'DelayedMatrix' Objects deldir 1.0-6 Delaunay Triangulation and Dirichlet (Voronoi) Tessellation dendextend 1.15.2 Extending 'dendrogram' Functionality in R DEoptimR 1.0-11 Differential Evolution Optimization in Pure R desc 1.4.1 Manipulate DESCRIPTION Files DESeq2 1.36.0 Differential gene expression analysis based on the negative binomial distribution devtools 2.4.3 Tools to Make Developing R Packages Easier DEXSeq 1.42.0 Inference of differential exon usage in RNA-Seq dichromat 2.0-0.1 Color Schemes for Dichromats diffobj 0.3.5 Diffs for R Objects digest 0.6.29 Create Compact Hash Digests of R Objects diptest 0.76-0 Hartigan's Dip Test Statistic for Unimodality - Corrected distr 2.8.0 Object Oriented Implementation of Distributions distrEx 2.8.0 Extensions of Package 'distr' distributional 0.3.0 Vectorised Probability Distributions DMRcate 2.10.0 Methylation array and sequencing spatial analysis methods DNAcopy 1.70.0 DNA copy number data analysis docopt 0.7.1 Command-Line Interface Specification Language doMC 1.3.8 Foreach Parallel Adaptor for 'parallel' doMPI 0.2.2 Foreach Parallel Adaptor for the Rmpi Package doParallel 1.0.17 Foreach Parallel Adaptor for the 'parallel' Package doRNG 1.8.2 Generic Reproducible Parallel Backend for 'foreach' Loops dotCall64 1.0-1 Enhanced Foreign Function Interface Supporting Long Vectors dplyr 1.0.9 A Grammar of Data Manipulation DSS 2.44.0 Dispersion shrinkage for sequencing data DT 0.23 A Wrapper of the JavaScript Library 'DataTables' dtplyr 1.2.1 Data Table Back-End for 'dplyr' dygraphs 1.1.1.6 Interface to 'Dygraphs' Interactive Time Series Charting Library dynamicTreeCut 1.63-1 Methods for Detection of Clusters in Hierarchical Clustering Dendrograms DynDoc 1.74.0 Dynamic document tools e1071 1.7-9 Misc Functions of the Department of Statistics, Probability Theory Group (Formerly: E1071), TU Wien easyRNASeq 2.32.0 Count summarization and normalization for RNA-Seq data EBSeq 1.36.0 An R package for gene and isoform differential expression analysis of RNA-seq data edgeR 3.38.1 Empirical Analysis of Digital Gene Expression Data in R effects 4.2-1 Effect Displays for Linear, Generalized Linear, and Other Models ellipse 0.4.2 Functions for Drawing Ellipses and Ellipse-Like Confidence Regions ellipsis 0.3.2 Tools for Working with ... ensembldb 2.20.1 Utilities to create and use Ensembl-based annotation databases Epi 2.46 Statistical Analysis in Epidemiology erer 3.1 Empirical Research in Economics with R estimability 1.3 Tools for Assessing Estimability of Linear Predictions etm 1.1.1 Empirical Transition Matrix evaluate 0.15 Parsing and Evaluation Tools that Provide More Details than the Default evd 2.3-6 Functions for Extreme Value Distributions ExperimentHub 2.4.0 Client to access ExperimentHub resources expm 0.999-6 Matrix Exponential, Log, 'etc' FactoMineR 2.4 Multivariate Exploratory Data Analysis and Data Mining fail 1.3 File Abstraction Interface Layer (FAIL) fansi 1.0.3 ANSI Control Sequence Aware String Functions farver 2.1.0 High Performance Colour Space Manipulation fastcluster 1.2.3 Fast Hierarchical Clustering Routines for R and 'Python' fastICA 1.2-3 FastICA Algorithms to Perform ICA and Projection Pursuit fastmap 1.1.0 Fast Data Structures fastmatch 1.1-3 Fast 'match()' Function FDb.InfiniumMethylation.hg19 2.2.0 Annotation package for Illumina Infinium DNA methylation probes fdrtool 1.2.17 Estimation of (Local) False Discovery Rates and Higher Criticism fields 13.3 Tools for Spatial Data filelock 1.0.2 Portable File Locking flashClust 1.01-2 Implementation of optimal hierarchical clustering flexmix 2.3-17 Flexible Mixture Modeling fontawesome 0.2.2 Easily Work with 'Font Awesome' Icons forcats 0.5.1 Tools for Working with Categorical Variables (Factors) foreach 1.5.2 Provides Foreach Looping Construct foreign 0.8-82 Read Data Stored by 'Minitab', 'S', 'SAS', 'SPSS', 'Stata', 'Systat', 'Weka', 'dBase', ... formatR 1.12 Format R Code Automatically Formula 1.2-4 Extended Model Formulas fpc 2.2-9 Flexible Procedures for Clustering fs 1.5.2 Cross-Platform File System Operations Based on 'libuv' futile.logger 1.4.3 A Logging Utility for R futile.options 1.0.1 Futile Options Management future 1.25.0 Unified Parallel and Distributed Processing in R for Everyone future.apply 1.9.0 Apply Function to Elements in Parallel using Futures gam 1.20.1 Generalized Additive Models gamlss 5.4-3 Generalised Additive Models for Location Scale and Shape gamlss.data 6.0-2 Data for Generalised Additive Models for Location Scale and Shape gamlss.dist 6.0-3 Distributions for Generalized Additive Models for Location Scale and Shape gamlss.mx 6.0-0 Fitting Mixture Distributions with GAMLSS gamlss.nl 4.1-0 Fitting non linear parametric GAMLSS models gargle 1.2.0 Utilities for Working with Google APIs gcrma 2.68.0 Background Adjustment Using Sequence Information gdata 2.18.0.1 Various R Programming Tools for Data Manipulation genefilter 1.78.0 genefilter: methods for filtering genes from high-throughput experiments geneLenDataBase 1.32.0 Lengths of mRNA transcripts for a number of genomes GeneNet 1.2.16 Modeling and Inferring Gene Networks geneplotter 1.74.0 Graphics related functions for Bioconductor generics 0.1.2 Common S3 Generics not Provided by Base R Methods Related to Model Fitting genetics 1.3.8.1.3 Population Genetics GenomeInfoDb 1.32.2 Utilities for manipulating chromosome names, including modifying them to follow a particular naming style GenomeInfoDbData 1.2.8 Species and taxonomy ID look up tables used by GenomeInfoDb genomeIntervals 1.52.0 Operations on genomic intervals GenomicAlignments 1.32.0 Representation and manipulation of short genomic alignments GenomicFeatures 1.48.1 Conveniently import and query gene models GenomicRanges 1.48.0 Representation and manipulation of genomic intervals geojson 0.3.4 Classes for 'GeoJSON' geojsonio 0.9.4 Convert Data from and to 'GeoJSON' or 'TopoJSON' geojsonsf 2.0.2 GeoJSON to Simple Feature Converter geometries 0.2.0 Convert Between R Objects and Geometric Structures GEOquery 2.64.2 Get data from NCBI Gene Expression Omnibus (GEO) gert 1.6.0 Simple Git Client for R getopt 1.20.3 C-Like 'getopt' Behavior GGally 2.1.2 Extension to 'ggplot2' ggforce 0.3.3 Accelerating 'ggplot2' ggplot2 3.3.6 Create Elegant Data Visualisations Using the Grammar of Graphics ggrepel 0.9.1 Automatically Position Non-Overlapping Text Labels with 'ggplot2' ggridges 0.5.3 Ridgeline Plots in 'ggplot2' gh 1.3.0 'GitHub' 'API' gitcreds 0.1.1 Query 'git' Credentials from 'R' GJRM 0.2-6 Generalised Joint Regression Modelling glmnet 4.1-4 Lasso and Elastic-Net Regularized Generalized Linear Models globals 0.15.0 Identify Global Objects in R Expressions globaltest 5.50.0 Testing Groups of Covariates/Features for Association with a Response Variable, with Applications to Gene Set Testing glue 1.6.2 Interpreted String Literals gmp 0.6-5 Multiple Precision Arithmetic GO.db 3.15.0 A set of annotation maps describing the entire Gene Ontology goftest 1.2-3 Classical Goodness-of-Fit Tests for Univariate Distributions googledrive 2.0.0 An Interface to Google Drive googlesheets4 1.0.0 Access Google Sheets using the Sheets API V4 goseq 1.48.0 Gene Ontology analyser for RNA-seq and other length biased data GOstats 2.62.0 Tools for manipulating GO and microarrays gower 1.0.0 Gower's Distance gplots 3.1.3 Various R Programming Tools for Plotting Data graph 1.74.0 graph: A package to handle graph data structures graphics 4.2.0 The R Graphics Package grDevices 4.2.0 The R Graphics Devices and Support for Colours and Fonts grid 4.2.0 The Grid Graphics Package gridExtra 2.3 Miscellaneous Functions for \"Grid\" Graphics GSEABase 1.58.0 Gene set enrichment data structures and methods gsl 2.1-7.1 Wrapper for the Gnu Scientific Library gsmoothr 0.1.7 Smoothing tools gtable 0.3.0 Arrange 'Grobs' in Tables gtools 3.9.2.1 Various R Programming Tools Gviz 1.40.1 Plotting data and annotation information along genomic coordinates HAC 1.1-0 Estimation, Simulation and Visualization of Hierarchical Archimedean Copulae (HAC) haplo.stats 1.8.7 Statistical Analysis of Haplotypes with Traits and Covariates when Linkage Phase is Ambiguous hardhat 0.2.0 Construct Modeling Packages haven 2.5.0 Import and Export 'SPSS', 'Stata' and 'SAS' Files HDF5Array 1.24.0 HDF5 backend for DelayedArray objects hexbin 1.28.2 Hexagonal Binning Routines hgu95av2.db 3.13.0 Affymetrix Affymetrix HG_U95Av2 Array annotation data (chip hgu95av2) HI 0.5 Simulation from Distributions Supported by Nested Hyperplanes highr 0.9 Syntax Highlighting for R Source Code HistData 0.8-7 Data Sets from the History of Statistics and Data Visualization Hmisc 4.7-0 Harrell Miscellaneous hms 1.1.1 Pretty Time of Day htmlTable 2.4.0 Advanced Tables for Markdown/HTML htmltools 0.5.2 Tools for HTML htmlwidgets 1.5.4 HTML Widgets for R httpcode 0.3.0 'HTTP' Status Code Helper httpuv 1.6.5 HTTP and WebSocket Server Library httr 1.4.3 Tools for Working with URLs and HTTP hugene10stprobeset.db 8.8.0 Affymetrix hugene10 annotation data (chip hugene10stprobeset) hugene10sttranscriptcluster.db 8.8.0 Affymetrix hugene10 annotation data (chip hugene10sttranscriptcluster) hwriter 1.3.2.1 HTML Writer - Outputs R Objects in HTML Format ids 1.0.1 Generate Random Identifiers igraph 1.3.1 Network Analysis and Visualization Illumina450ProbeVariants.db 1.32.0 Annotation Package combining variant data from 1000 Genomes Project for Illumina HumanMethylation450 Bead Chip probes IlluminaHumanMethylation450kanno.ilmn12.hg19 0.6.1 Annotation for Illumina's 450k methylation arrays IlluminaHumanMethylation450kmanifest 0.4.0 Annotation for Illumina's 450k methylation arrays IlluminaHumanMethylationEPICanno.ilm10b4.hg19 0.6.0 Annotation for Illumina's EPIC methylation arrays IlluminaHumanMethylationEPICmanifest 0.3.0 Manifest for Illumina's EPIC methylation arrays illuminaHumanv4.db 1.26.0 Illumina HumanHT12v4 annotation data (chip illuminaHumanv4) illuminaio 0.38.0 Parsing Illumina Microarray Output Files impute 1.70.0 impute: Imputation for microarray data ini 0.3.1 Read and Write '.ini' Files INLA 22.05.18-2 Full Bayesian Analysis of Latent Gaussian Models using Integrated Nested Laplace Approximations inline 0.3.19 Functions to Inline C, C++, Fortran Function Calls from R insight 0.17.1 Easy Access to Model Information for Various Model Objects interactiveDisplayBase 1.34.0 Base package for enabling powerful shiny web displays of Bioconductor objects intervals 0.15.2 Tools for Working with Points and Intervals ipred 0.9-12 Improved Predictors IRanges 2.30.0 Foundation of integer range manipulation in Bioconductor ismev 1.42 An Introduction to Statistical Modeling of Extreme Values isoband 0.2.5 Generate Isolines and Isobands from Regularly Spaced Elevation Grids ISOcodes 2022.01.10 Selected ISO Codes isva 1.9 Independent Surrogate Variable Analysis iterators 1.0.14 Provides Iterator Construct iterpc 0.4.2 Efficient Iterator for Permutations and Combinations JADE 2.0-3 Blind Source Separation Methods Based on Joint Diagonalization and Some BSS Performance Criteria jpeg 0.1-9 Read and write JPEG images jqr 1.2.3 Client for 'jq', a 'JSON' Processor jquerylib 0.1.4 Obtain 'jQuery' as an HTML Dependency Object jsonify 1.2.1 Convert Between 'R' Objects and Javascript Object Notation (JSON) jsonlite 1.8.0 A Simple and Robust JSON Parser and Generator for R karyoploteR 1.22.0 Plot customizable linear genomes displaying arbitrary data KEGGREST 1.36.0 Client-side REST access to the Kyoto Encyclopedia of Genes and Genomes (KEGG) kernlab 0.9-30 Kernel-Based Machine Learning Lab KernSmooth 2.23-20 Functions for Kernel Smoothing Supporting Wand & Jones (1995) knitr 1.39 A General-Purpose Package for Dynamic Report Generation in R kohonen 3.0.11 Supervised and Unsupervised Self-Organising Maps kpmt 0.1.0 Known Population Median Test labeling 0.4.2 Axis Labeling lambda.r 1.2.4 Modeling Data with Functional Programming later 1.3.0 Utilities for Scheduling Functions to Execute Later with Event Loops lattice 0.20-45 Trellis Graphics for R latticeExtra 0.6-29 Extra Graphical Utilities Based on Lattice lava 1.6.10 Latent Variable Models lazyeval 0.2.2 Lazy (Non-Standard) Evaluation leafem 0.2.0 'leaflet' Extensions for 'mapview' leaflet 2.1.1 Create Interactive Web Maps with the JavaScript 'Leaflet' Library leaflet.providers 1.9.0 Leaflet Providers leafsync 0.1.0 Small Multiples for Leaflet Web Maps leaps 3.1 Regression Subset Selection learnr 0.10.1 Interactive Tutorials for R lifecycle 1.0.1 Manage the Life Cycle of your Package Functions limma 3.52.1 Linear Models for Microarray Data listenv 0.8.0 Environments Behaving (Almost) as Lists lme4 1.1-29 Linear Mixed-Effects Models using 'Eigen' and S4 lmtest 0.9-40 Testing Linear Regression Models locfit 1.5-9.5 Local Regression, Likelihood and Density Estimation longitudinal 1.1.13 Analysis of Multiple Time Course Data loo 2.5.1 Efficient Leave-One-Out Cross-Validation and WAIC for Bayesian Models lpSolve 5.6.15 Interface to 'Lp_solve' v. 5.5 to Solve Linear/Integer Programs LSD 4.1-0 Lots of Superior Depictions ltm 1.2-0 Latent Trait Models under IRT lubridate 1.8.0 Make Dealing with Dates a Little Easier lumi 2.48.0 BeadArray Specific Methods for Illumina Methylation and Expression Microarrays lwgeom 0.2-8 Bindings to Selected 'liblwgeom' Functions for Simple Features made4 1.70.0 Multivariate analysis of microarray data using ADE4 magic 1.6-0 Create and Investigate Magic Squares magrittr 2.0.3 A Forward-Pipe Operator for R maps 3.4.0 Draw Geographical Maps maptools 1.1-4 Tools for Handling Spatial Objects maptree 1.4-8 Mapping, Pruning, and Graphing Tree Models markdown 1.1 Render Markdown with the C Library 'Sundown' marray 1.74.0 Exploratory analysis for two-color spotted microarray data MASS 7.3-56 Support Functions and Datasets for Venables and Ripley's MASS mathjaxr 1.6-0 Using 'Mathjax' in Rd Files Matrix 1.4-1 Sparse and Dense Matrix Classes and Methods MatrixGenerics 1.8.0 S4 Generic Summary Statistic Functions that Operate on Matrix-Like Objects MatrixModels 0.5-0 Modelling with Sparse and Dense Matrices matrixStats 0.62.0 Functions that Apply to Rows and Columns of Matrices (and to Vectors) mclust 5.4.10 Gaussian Mixture Modelling for Model-Based Clustering, Classification, and Density Estimation mcmc 0.9-7 Markov Chain Monte Carlo memoise 2.0.1 'Memoisation' of Functions MendelianRandomization 0.6.0 Mendelian Randomization Package metadat 1.2-0 Meta-Analysis Datasets metafor 3.4-0 Meta-Analysis Package for R methods 4.2.0 Formal Methods and Classes methylumi 2.42.0 Handle Illumina methylation data mgcv 1.8-40 Mixed GAM Computation Vehicle with Automatic Smoothness Estimation mime 0.12 Map Filenames to MIME Types minfi 1.42.0 Analyze Illumina Infinium DNA methylation arrays miniUI 0.1.1.1 Shiny UI Widgets for Small Screens minqa 1.2.4 Derivative-free optimization algorithms by quadratic approximation missMethyl 1.30.0 Analysing Illumina HumanMethylation BeadChip Data mitools 2.4 Tools for Multiple Imputation of Missing Data mlr 2.19.0 Machine Learning in R mnormt 2.0.2 The Multivariate Normal and t Distributions, and Their Truncated Versions ModelMetrics 1.2.2.2 Rapid Calculation of Model Metrics modelr 0.1.8 Modelling Functions that Work with the Pipe modeltools 0.2-23 Tools and Classes for Statistical Models msm 1.6.9 Multi-State Markov and Hidden Markov Models in Continuous Time mstate 0.3.2 Data Preparation, Estimation and Prediction in Multi-State Models multcomp 1.4-19 Simultaneous Inference in General Parametric Models multtest 2.52.0 Resampling-based multiple hypothesis testing munsell 0.5.0 Utilities for Using Munsell Colours mvtnorm 1.1-3 Multivariate Normal and t Distributions nleqslv 3.3.2 Solve Systems of Nonlinear Equations nlme 3.1-157 Linear and Nonlinear Mixed Effects Models nloptr 2.0.2 R Interface to NLopt NLP 0.2-1 Natural Language Processing Infrastructure nnet 7.3-17 Feed-Forward Neural Networks and Multinomial Log-Linear Models nor1mix 1.3-0 Normal aka Gaussian (1-d) Mixture Models (S3 Classes and Methods) npde 3.2 Normalised Prediction Distribution Errors for Nonlinear Mixed-Effect Models numDeriv 2016.8-1.1 Accurate Numerical Derivatives OPE 0.7 Outer-product emulator openssl 2.0.2 Toolkit for Encryption, Signatures and Certificates Based on OpenSSL optparse 1.7.1 Command Line Option Parser org.Hs.eg.db 3.15.0 Genome wide annotation for Human parallel 4.2.0 Support for Parallel computation in R parallelly 1.31.1 Enhancing the 'parallel' Package parallelMap 1.5.1 Unified Interface to Parallelization Back-Ends ParamHelpers 1.14 Helpers for Parameters in Black-Box Optimization, Tuning and Machine Learning pbapply 1.5-0 Adding Progress Bar to '*apply' Functions pbkrtest 0.5.1 Parametric Bootstrap, Kenward-Roger and Satterthwaite Based Methods for Test in Mixed Models pcaPP 2.0-1 Robust PCA by Projection Pursuit pegas 1.1 Population and Evolutionary Genetics Analysis System permute 0.9-7 Functions for Generating Restricted Permutations of Data phangorn 2.8.1 Phylogenetic Reconstruction and Analysis pillar 1.7.0 Coloured Formatting for Columns pixmap 0.4-12 Bitmap Images / Pixel Maps pkgbuild 1.3.1 Find Tools Needed to Build R Packages pkgconfig 2.0.3 Private Configuration for 'R' Packages pkgload 1.2.4 Simulate Package Installation and Attach pkgmaker 0.32.2 Development Utilities for R Packages plinkQC 0.3.4 Genotype Quality Control with 'PLINK' plogr 0.2.0 The 'plog' C++ Logging Library plotly 4.10.0 Create Interactive Web Graphics via 'plotly.js' pls 2.8-0 Partial Least Squares and Principal Component Regression plyr 1.8.7 Tools for Splitting, Applying and Combining Data png 0.1-7 Read and write PNG images poLCA 1.6.0.1 Polytomous Variable Latent Class Analysis polspline 1.1.20 Polynomial Spline Routines polyclip 1.10-0 Polygon Clipping polycor 0.8-1 Polychoric and Polyserial Correlations posterior 1.2.1 Tools for Working with Posterior Distributions poweRlaw 0.70.6 Analysis of Heavy Tailed Distributions prabclus 2.3-2 Functions for Clustering and Testing of Presence-Absence, Abundance and Multilocus Genetic Data pracma 2.3.8 Practical Numerical Math Functions praise 1.0.0 Praise Users preprocessCore 1.58.0 A collection of pre-processing functions prettydoc 0.4.1 Creating Pretty Documents from R Markdown prettyunits 1.1.1 Pretty, Human Readable Formatting of Quantities pROC 1.18.0 Display and Analyze ROC Curves processx 3.5.3 Execute and Control System Processes prodlim 2019.11.13 Product-Limit Estimation for Censored Event History Analysis profileModel 0.6.1 Profiling Inference Functions for Various Model Classes progress 1.2.2 Terminal Progress Bars progressr 0.10.0 An Inclusive, Unifying API for Progress Updates promises 1.2.0.1 Abstractions for Promise-Based Asynchronous Programming ProtGenerics 1.28.0 Generic infrastructure for Bioconductor mass spectrometry packages proto 1.0.0 Prototype Object-Based Programming protolite 2.1.1 Highly Optimized Protocol Buffer Serializers proxy 0.4-26 Distance and Similarity Measures ps 1.7.0 List, Query, Manipulate System Processes PSCBS 0.66.0 Analysis of Parent-Specific DNA Copy Numbers pspline 1.0-19 Penalized Smoothing Splines psych 2.2.5 Procedures for Psychological, Psychometric, and Personality Research purrr 0.3.4 Functional Programming Tools quadprog 1.5-8 Functions to Solve Quadratic Programming Problems quanteda 3.2.1 Quantitative Analysis of Textual Data quanteda.corpora 0.9.2 A collection of corpora for quanteda quantmod 0.4.20 Quantitative Financial Modelling Framework quantreg 5.93 Quantile Regression qvalue 2.28.0 Q-value estimation for false discovery rate control qvcalc 1.0.2 Quasi Variances for Factor Effects in Statistical Models R.cache 0.15.0 Fast and Light-Weight Caching (Memoization) of Objects and Results to Speed Up Computations R.devices 2.17.0 Unified Handling of Graphics Devices R.filesets 2.14.0 Easy Handling of and Access to Files Organized in Structured Directories R.huge 0.9.0 Methods for Accessing Huge Amounts of Data [deprecated] R.methodsS3 1.8.1 S3 Methods Simplified R.oo 1.24.0 R Object-Oriented Programming with or without References R.rsp 0.44.0 Dynamic Generation of Scientific Reports R.utils 2.11.0 Various Programming Utilities R2HTML 2.3.3 HTML Exportation for R Objects R2WinBUGS 2.1-21 Running 'WinBUGS' and 'OpenBUGS' from 'R' / 'S-PLUS' R6 2.5.1 Encapsulated Classes with Reference Semantics randomForest 4.7-1.1 Breiman and Cutler's Random Forests for Classification and Regression rapidjsonr 1.2.0 'Rapidjson' C++ Header Files rappdirs 0.3.3 Application Directories: Determine Where to Save Data, Caches, and Logs raster 3.5-15 Geographic Data Analysis and Modeling RBGL 1.72.0 An interface to the BOOST graph library rcmdcheck 1.4.0 Run 'R CMD check' from 'R' and Capture Results RColorBrewer 1.1-3 ColorBrewer Palettes Rcpp 1.0.8.3 Seamless R and C++ Integration RcppArmadillo 0.11.1.1.0 'Rcpp' Integration for the 'Armadillo' Templated Linear Algebra Library RcppEigen 0.3.3.9.2 'Rcpp' Integration for the 'Eigen' Templated Linear Algebra Library RcppGSL 0.3.11 'Rcpp' Integration for 'GNU GSL' Vectors and Matrices RcppParallel 5.1.5 Parallel Programming Tools for 'Rcpp' RcppZiggurat 0.1.6 'Rcpp' Integration of Different \"Ziggurat\" Normal RNG Implementations RCurl 1.98-1.6 General Network (HTTP/FTP/...) Client Interface for R readr 2.1.2 Read Rectangular Text Data readxl 1.4.0 Read Excel Files recipes 0.2.0 Preprocessing and Feature Engineering Steps for Modeling regioneR 1.28.0 Association analysis of genomic regions based on permutation tests registry 0.5-1 Infrastructure for R Package Registries relaimpo 2.2-6 Relative Importance of Regressors in Linear Models rematch 1.0.1 Match Regular Expressions with a Nicer 'API' rematch2 2.1.2 Tidy Output from Regular Expression Matching remotes 2.4.2 R Package Installation from Remote Repositories, Including 'GitHub' renv 0.15.4 Project Environments Repitools 1.42.0 Epigenomic tools reprex 2.0.1 Prepare Reproducible Example Code via the Clipboard reshape 0.8.9 Flexibly Reshape Data reshape2 1.4.4 Flexibly Reshape Data: A Reboot of the Reshape Package restfulr 0.0.13 R Interface to RESTful Web Services Rfast 2.0.6 A Collection of Efficient and Extremely Fast R Functions rgdal 1.5-32 Bindings for the 'Geospatial' Data Abstraction Library rgeos 0.5-9 Interface to Geometry Engine - Open Source ('GEOS') rgl 0.108.3.2 3D Visualization Using OpenGL Rgraphviz 2.40.0 Provides plotting capabilities for R graph objects rhdf5 2.40.0 R Interface to HDF5 rhdf5filters 1.8.0 HDF5 Compression Filters Rhdf5lib 1.18.2 hdf5 library as an R package Rhtslib 1.28.0 HTSlib high-throughput sequencing library as an R package Ringo 1.60.0 R Investigation of ChIP-chip Oligoarrays rjson 0.2.21 JSON for R RJSONIO 1.3-1.6 Serialize R Objects to JSON, JavaScript Object Notation rlang 1.0.2 Functions for Base Types and Core R and 'Tidyverse' Features rlecuyer 0.3-5 R Interface to RNG with Multiple Streams rlist 0.4.6.2 A Toolbox for Non-Tabular Data Manipulation rmarkdown 2.14 Dynamic Documents for R Rmpfr 0.8-7 R MPFR - Multiple Precision Floating-Point Reliable Rmpi 0.6-9.2 Interface (Wrapper) to MPI (Message-Passing Interface) rms 6.3-0 Regression Modeling Strategies RMySQL 0.10.23 Database Interface and 'MySQL' Driver for R RNetCDF 2.5-2 Interface to 'NetCDF' Datasets rngtools 1.5.2 Utility Functions for Working with Random Number Generators robustbase 0.95-0 Basic Robust Statistics ROC 1.72.0 utilities for ROC, with microarray focus roxygen2 7.2.0 In-Line Documentation for R rpart 4.1.16 Recursive Partitioning and Regression Trees RPMM 1.25 Recursively Partitioned Mixture Model rprojroot 2.0.3 Finding Files in Project Subdirectories Rsamtools 2.12.0 Binary alignment (BAM), FASTA, variant call (BCF), and tabix file import Rsolnp 1.16 General Non-Linear Optimization RSQLite 2.2.14 SQLite Interface for R rstan 2.21.5 R Interface to Stan rstanarm 2.21.3 Bayesian Applied Regression Modeling via Stan rstantools 2.2.0 Tools for Developing R Packages Interfacing with 'Stan' rstudioapi 0.13 Safely Access the RStudio API Rsubread 2.10.1 Mapping, quantification and variant analysis of sequencing data rtracklayer 1.56.0 R interface to genome annotation files and the UCSC genome browser ruv 0.9.7.1 Detect and Remove Unwanted Variation using Negative Controls rversions 2.1.1 Query 'R' Versions, Including 'r-release' and 'r-oldrel' rvest 1.0.2 Easily Harvest (Scrape) Web Pages s2 1.0.7 Spherical Geometry Operators Using the S2 Geometry Library S4Vectors 0.34.0 Foundation of vector-like and list-like containers in Bioconductor saemix 3.0 Stochastic Approximation Expectation Maximization (SAEM) Algorithm sampling 2.9 Survey Sampling sandwich 3.0-1 Robust Covariance Matrix Estimators sass 0.4.1 Syntactically Awesome Style Sheets ('Sass') scales 1.2.0 Scale Functions for Visualization scam 1.2-12 Shape Constrained Additive Models scatterplot3d 0.3-41 3D Scatter Plot schoolmath 0.4.1 Functions and Datasets for Math Used in School scrime 1.3.5 Analysis of High-Dimensional Categorical Data Such as SNP Data segmented 1.5-0 Regression Models with Break-Points / Change-Points Estimation selectr 0.4-2 Translate CSS Selectors to XPath Expressions sendmailR 1.2-1 send email using R seqinr 4.2-16 Biological Sequences Retrieval and Analysis seqLogo 1.62.0 Sequence logos for DNA sequence alignments sessioninfo 1.2.2 R Session Information sf 1.0-7 Simple Features for R sfheaders 0.4.0 Converts Between R Objects and Simple Feature Objects sfsmisc 1.1-13 Utilities from 'Seminar fuer Statistik' ETH Zurich shape 1.4.6 Functions for Plotting Graphical Shapes, Colors shiny 1.7.1 Web Application Framework for R shinyjs 2.1.0 Easily Improve the User Experience of Your Shiny Apps in Seconds shinystan 2.6.0 Interactive Visual and Numerical Diagnostics and Posterior Analysis for Bayesian Models shinythemes 1.2.0 Themes for Shiny ShortRead 1.54.0 FASTQ input and manipulation siggenes 1.70.0 Multiple Testing using SAM and Efron's Empirical Bayes Approaches slam 0.1-50 Sparse Lightweight Arrays and Matrices sn 2.0.2 The Skew-Normal and Related Distributions Such as the Skew-t and the SUN snow 0.4-4 Simple Network of Workstations SnowballC 0.7.0 Snowball Stemmers Based on the C 'libstemmer' UTF-8 Library snowfall 1.84-6.1 Easier cluster computing (based on snow). softImpute 1.4-1 Matrix Completion via Iterative Soft-Thresholded SVD sourcetools 0.1.7 Tools for Reading, Tokenizing and Parsing R Code sp 1.4-7 Classes and Methods for Spatial Data spam 2.8-0 SPArse Matrix SparseM 1.81 Sparse Linear Algebra sparseMatrixStats 1.8.0 Summary Statistics for Rows and Columns of Sparse Matrices spatial 7.3-15 Functions for Kriging and Point Pattern Analysis spatstat 2.3-4 Spatial Point Pattern Analysis, Model-Fitting, Simulation, Tests spatstat.core 2.4-4 Core Functionality of the 'spatstat' Family spatstat.data 2.2-0 Datasets for 'spatstat' Family spatstat.geom 2.4-0 Geometrical Functionality of the 'spatstat' Family spatstat.linnet 2.3-2 Linear Networks Functionality of the 'spatstat' Family spatstat.random 2.2-0 Random Generation Functionality for the 'spatstat' Family spatstat.sparse 2.1-1 Sparse Three-Dimensional Arrays and Linear Algebra Utilities spatstat.utils 2.3-1 Utility Functions for 'spatstat' spData 2.0.1 Datasets for Spatial Analysis spdep 1.2-4 Spatial Dependence: Weighting Schemes, Statistics splines 4.2.0 Regression Spline Functions and Classes SQUAREM 2021.1 Squared Extrapolation Methods for Accelerating EM-Like Monotone Algorithms stabledist 0.7-1 Stable Distribution Functions StanHeaders 2.21.0-7 C++ Header Files for Stan stars 0.5-5 Spatiotemporal Arrays, Raster and Vector Data Cubes startupmsg 0.9.6 Utilities for Start-Up Messages statmod 1.4.36 Statistical Modeling stats 4.2.0 The R Stats Package stats4 4.2.0 Statistical Functions using S4 Classes stopwords 2.3 Multilingual Stopword Lists stringdist 0.9.8 Approximate String Matching, Fuzzy Text Search, and String Distance Functions stringi 1.7.6 Character String Processing Facilities stringr 1.4.0 Simple, Consistent Wrappers for Common String Operations SummarizedExperiment 1.26.1 SummarizedExperiment container survey 4.1-1 Analysis of Complex Survey Samples survival 3.3-1 Survival Analysis sva 3.44.0 Surrogate Variable Analysis sys 3.4 Powerful and Reliable Tools for Running System Commands in R systemfit 1.1-24 Estimating Systems of Simultaneous Equations TAM 4.0-16 Test Analysis Modules tcltk 4.2.0 Tcl/Tk Interface tensor 1.5 Tensor product of arrays tensorA 0.36.2 Advanced Tensor Arithmetic with Named Indices terra 1.5-21 Spatial Data Analysis testthat 3.1.4 Unit Testing for R tgp 2.4-18 Bayesian Treed Gaussian Process Models TH.data 1.1-1 TH's Data Archive threejs 0.3.3 Interactive 3D Scatter Plots, Networks and Globes tibble 3.1.7 Simple Data Frames tictoc 1.0.1 Functions for Timing R Scripts, as Well as Implementations of Stack and List Structures tidyr 1.2.0 Tidy Messy Data tidyselect 1.1.2 Select from a Set of Strings tidyverse 1.3.1 Easily Install and Load the 'Tidyverse' timeDate 3043.102 Rmetrics - Chronological and Calendar Objects tinytex 0.39 Helper Functions to Install and Maintain TeX Live, and Compile LaTeX Documents tkrplot 0.0-26 TK Rplot tm 0.7-8 Text Mining Package tmap 3.3-3 Thematic Maps tmaptools 3.1-1 Thematic Map Tools tmvnsim 1.0-2 Truncated Multivariate Normal Simulation tools 4.2.0 Tools for Package Development topicmodels 0.2-12 Topic Models triebeard 0.3.0 'Radix' Trees in 'Rcpp' truncnorm 1.0-8 Truncated Normal Distribution trust 0.1-8 Trust Region Optimization tseries 0.10-51 Time Series Analysis and Computational Finance TTR 0.24.3 Technical Trading Rules tweenr 1.0.2 Interpolate Data for Smooth Animations TxDb.Hsapiens.UCSC.hg19.knownGene 3.2.2 Annotation package for TxDb object(s) tzdb 0.3.0 Time Zone Database Information udunits2 0.13.2.1 Udunits-2 Bindings for R units 0.8-0 Measurement Units for R Vectors UpSetR 1.4.0 A More Scalable Alternative to Venn and Euler Diagrams for Visualizing Intersecting Sets urca 1.3-0 Unit Root and Cointegration Tests for Time Series Data urltools 1.7.3 Vectorised Tools for URL Handling and Parsing usethis 2.1.6 Automate Package and Project Setup utf8 1.2.2 Unicode Text Processing utils 4.2.0 The R Utils Package uuid 1.1-0 Tools for Generating and Handling of UUIDs V8 4.2.0 Embedded JavaScript and WebAssembly Engine for R VariantAnnotation 1.42.1 Annotation of Genetic Variants vctrs 0.4.1 Vector Helpers vegan 2.6-2 Community Ecology Package VGAM 1.1-6 Vector Generalized Linear and Additive Models VineCopula 2.4.4 Statistical Inference of Vine Copulas viridis 0.6.2 Colorblind-Friendly Color Maps for R viridisLite 0.4.0 Colorblind-Friendly Color Maps (Lite Version) vroom 1.5.7 Read and Write Rectangular Text Data Quickly vsn 3.64.0 Variance stabilization and calibration for microarray data waldo 0.4.0 Find Differences Between R Objects wateRmelon 2.2.0 Illumina 450 and EPIC methylation array normalization and metrics WGCNA 1.71 Weighted Correlation Network Analysis whisker 0.4 {{mustache}} for R, Logicless Templating widgetframe 0.3.1 'Htmlwidgets' in Responsive 'iframes' widgetTools 1.74.0 Creates an interactive tcltk widget withr 2.5.0 Run Code 'With' Temporarily Modified Global State wk 0.6.0 Lightweight Well-Known Geometry Parsing xfun 0.31 Supporting Functions for Packages Maintained by 'Yihui Xie' XML 3.99-0.9 Tools for Parsing and Generating XML Within R and S-Plus xml2 1.3.3 Parse XML xopen 1.0.0 Open System Files, 'URLs', Anything xtable 1.8-4 Export Tables to LaTeX or HTML xts 0.12.1 eXtensible Time Series XVector 0.36.0 Foundation of external vector representation and manipulation in Bioconductor yaml 2.3.5 Methods to Convert R Data to YAML and Back zip 2.2.0 Cross-Platform 'zip' Compression zlibbioc 1.42.0 An R packaged zlib-1.2.5 zoo 1.8-10 S3 Infrastructure for Regular and Irregular Time Series (Z's Ordered Observations)","title":"R Packages"},{"location":"Installed_Software_Lists/r-packages/#r-packages","text":"We provide a collection of installed R packages for each release of R, as a bundle module . This page lists the packages for the current recommended R bundle. This can be loaded using: module load r/recommended The version of R provided with this bundle is currently R version 4.2.0 (2022-04-22). The following list was last updated at: 12:05:07 (+0100) on 10 Oct 2022. Module Version Description abc 2.2.1 Tools for Approximate Bayesian Computation (ABC) abc.data 1.0 Data Only: Tools for Approximate Bayesian Computation (ABC) abind 1.4-5 Combine Multidimensional Arrays ade4 1.7-19 Analysis of Ecological Data: Exploratory and Euclidean Methods in Environmental Sciences adegenet 2.1.6 Exploratory Analysis of Genetic and Genomic Data ADGofTest 0.3 Anderson-Darling GoF test admisc 0.27 Adrian Dusa's Miscellaneous affxparser 1.68.1 Affymetrix File Parsing SDK affy 1.74.0 Methods for Affymetrix Oligonucleotide Arrays affydata 1.44.0 Affymetrix Data for Demonstration Purpose affyio 1.66.0 Tools for parsing Affymetrix data files affylmGUI 1.70.0 GUI for limma Package with Affymetrix Microarrays affyPLM 1.72.0 Methods for fitting probe-level models akima 0.6-3.4 Interpolation of Irregularly and Regularly Spaced Data annaffy 1.68.0 Annotation tools for Affymetrix biological metadata annmap 1.38.0 Genome annotation and visualisation package pertaining to Affymetrix arrays and NGS analysis. annotate 1.74.0 Annotation for microarrays AnnotationDbi 1.58.0 Manipulation of SQLite-based annotations in Bioconductor AnnotationFilter 1.20.0 Facilities for Filtering Bioconductor Annotation Resources AnnotationForge 1.38.0 Tools for building SQLite-based annotation data packages AnnotationHub 3.4.0 Client to access AnnotationHub resources ape 5.6-2 Analyses of Phylogenetics and Evolution arm 1.12-2 Data Analysis Using Regression and Multilevel/Hierarchical Models aroma.affymetrix 3.2.0 Analysis of Large Affymetrix Microarray Data Sets aroma.apd 0.6.0 A Probe-Level Data File Format Used by 'aroma.affymetrix' [deprecated] aroma.core 3.2.2 Core Methods and Classes Used by 'aroma.*' Packages Part of the Aroma Framework aroma.light 3.26.0 Light-Weight Methods for Normalization and Visualization of Microarray Data using Only Basic R Data Types arrangements 1.1.9 Fast Generators and Iterators for Permutations, Combinations, Integer Partitions and Compositions arsenal 3.6.3 An Arsenal of 'R' Functions for Large-Scale Statistical Summaries askpass 1.1 Safe Password Entry for R, Git, and SSH assertthat 0.2.1 Easy Pre and Post Assertions backports 1.4.1 Reimplementations of Functions Introduced Since R-3.0.0 bamsignals 1.28.0 Extract read count signals from bam files base 4.2.0 The R Base Package base64 2.0 Base64 Encoder and Decoder base64enc 0.1-3 Tools for base64 encoding BaSTA 1.9.4 Age-Specific Survival Analysis from Incomplete Capture-Recapture/Recovery Data BatchJobs 1.9 Batch Computing with R bayesplot 1.9.0 Plotting for Bayesian Models BBmisc 1.12 Miscellaneous Helper Functions for B. Bischl beachmat 2.12.0 Compiling Bioconductor to Handle Each Matrix Type beadarray 2.46.0 Quality assessment and low-level analysis for Illumina BeadArray data beadarrayExampleData 1.34.0 Example data for the beadarray package BeadDataPackR 1.48.0 Compression of Illumina BeadArray data beanplot 1.3.1 Visualization via Beanplots (Like Boxplot/Stripchart/Violin Plot) benchmarkme 1.0.7 Crowd Sourced System Benchmarks benchmarkmeData 1.0.4 Data Set for the 'benchmarkme' Package bezier 1.1.2 Toolkit for Bezier Curves and Splines BH 1.78.0-0 Boost C++ Header Files BiasedUrn 1.07 Biased Urn Model Distributions bio3d 2.4-3 Biological Structure Analysis Biobase 2.56.0 Biobase: Base functions for Bioconductor BiocFileCache 2.4.0 Manage Files Across Sessions BiocGenerics 0.42.0 S4 generic functions used in Bioconductor BiocIO 1.6.0 Standard Input and Output for Bioconductor Packages BiocManager 1.30.18 Access the Bioconductor Project Package Repository BiocParallel 1.30.2 Bioconductor facilities for parallel evaluation BiocVersion 3.15.2 Set the appropriate version of Bioconductor packages biomaRt 2.52.0 Interface to BioMart databases (i.e. Ensembl) Biostrings 2.64.0 Efficient manipulation of biological strings biovizBase 1.44.0 Basic graphic utilities for visualization of genomic data. bit 4.0.4 Classes and Methods for Fast Memory-Efficient Boolean Selections bit64 4.0.5 A S3 Class for Vectors of 64bit Integers bitops 1.0-7 Bitwise Operations blob 1.2.3 A Simple S3 Class for Representing Vectors of Binary Data ('BLOBS') blockmodeling 1.0.5 Generalized and Classical Blockmodeling of Valued Networks boot 1.3-28 Bootstrap Functions (Originally by Angelo Canty for S) BradleyTerry2 1.1-2 Bradley-Terry Models brew 1.0-7 Templating Framework for Report Generation brglm 0.7.2 Bias Reduction in Binomial-Response Generalized Linear Models brio 1.1.3 Basic R Input Output broom 0.8.0 Convert Statistical Objects into Tidy Tibbles BSgenome 1.64.0 Software infrastructure for efficient representation of full genomes and their SNPs BSgenome.Hsapiens.UCSC.hg19 1.4.3 Full genome sequences for Homo sapiens (UCSC version hg19, based on GRCh37.p13) bslib 0.3.1 Custom 'Bootstrap' 'Sass' Themes for 'shiny' and 'rmarkdown' bsseq 1.32.0 Analyze, manage and store bisulfite sequencing data bumphunter 1.38.0 Bump Hunter cachem 1.0.6 Cache R Objects with Automatic Pruning callr 3.7.0 Call R from R car 3.0-13 Companion to Applied Regression carData 3.0-5 Companion to Applied Regression Data Sets caret 6.0-92 Classification and Regression Training Category 2.62.0 Category Analysis caTools 1.18.2 Tools: Moving Window Statistics, GIF, Base64, ROC AUC, etc CDM 8.1-12 Cognitive Diagnosis Modeling cellranger 1.1.0 Translate Spreadsheet Cell Ranges to Rows and Columns ChAMP 2.26.0 Chip Analysis Methylation Pipeline for Illumina HumanMethylation450 and EPIC ChAMPdata 2.28.0 Data Packages for ChAMP package checkmate 2.1.0 Fast and Versatile Argument Checks class 7.3-20 Functions for Classification classInt 0.4-3 Choose Univariate Class Intervals cli 3.3.0 Helpers for Developing Command Line Interfaces clipr 0.8.0 Read and Write from the System Clipboard clue 0.3-60 Cluster Ensembles cluster 2.1.3 \"Finding Groups in Data\": Cluster Analysis Extended Rousseeuw et al. cmprsk 2.2-11 Subdistribution Analysis of Competing Risks coda 0.19-4 Output Analysis and Diagnostics for MCMC codetools 0.2-18 Code Analysis Tools for R colorRamps 2.3.1 Builds Color Tables colorspace 2.0-3 A Toolbox for Manipulating and Assessing Colors and Palettes colourpicker 1.1.1 A Colour Picker Tool for Shiny and for Selecting Colours in Plots combinat 0.0-8 combinatorics utilities commonmark 1.8.0 High Performance CommonMark and Github Markdown Rendering in R compiler 4.2.0 The R Compiler Package copula 1.0-1 Multivariate Dependence with Copulas copynumber 1.36.0 Segmentation of single- and multi-track copy number data by penalized least squares regression. corpcor 1.6.10 Efficient Estimation of Covariance and (Partial) Correlation cowplot 1.1.1 Streamlined Plot Theme and Plot Annotations for 'ggplot2' cpp11 0.4.2 A C++11 Interface for R's C Interface crayon 1.5.1 Colored Terminal Output credentials 1.3.2 Tools for Managing SSH and Git Credentials crosstalk 1.2.0 Inter-Widget Interactivity for HTML Widgets crul 1.2.0 HTTP Client curl 4.3.2 A Modern and Flexible Web Client for R data.table 1.14.2 Extension of data.frame datasets 4.2.0 The R Datasets Package DBI 1.1.2 R Database Interface dbplyr 2.1.1 A 'dplyr' Back End for Databases DelayedArray 0.22.0 A unified framework for working transparently with on-disk and in-memory array-like datasets DelayedMatrixStats 1.18.0 Functions that Apply to Rows and Columns of 'DelayedMatrix' Objects deldir 1.0-6 Delaunay Triangulation and Dirichlet (Voronoi) Tessellation dendextend 1.15.2 Extending 'dendrogram' Functionality in R DEoptimR 1.0-11 Differential Evolution Optimization in Pure R desc 1.4.1 Manipulate DESCRIPTION Files DESeq2 1.36.0 Differential gene expression analysis based on the negative binomial distribution devtools 2.4.3 Tools to Make Developing R Packages Easier DEXSeq 1.42.0 Inference of differential exon usage in RNA-Seq dichromat 2.0-0.1 Color Schemes for Dichromats diffobj 0.3.5 Diffs for R Objects digest 0.6.29 Create Compact Hash Digests of R Objects diptest 0.76-0 Hartigan's Dip Test Statistic for Unimodality - Corrected distr 2.8.0 Object Oriented Implementation of Distributions distrEx 2.8.0 Extensions of Package 'distr' distributional 0.3.0 Vectorised Probability Distributions DMRcate 2.10.0 Methylation array and sequencing spatial analysis methods DNAcopy 1.70.0 DNA copy number data analysis docopt 0.7.1 Command-Line Interface Specification Language doMC 1.3.8 Foreach Parallel Adaptor for 'parallel' doMPI 0.2.2 Foreach Parallel Adaptor for the Rmpi Package doParallel 1.0.17 Foreach Parallel Adaptor for the 'parallel' Package doRNG 1.8.2 Generic Reproducible Parallel Backend for 'foreach' Loops dotCall64 1.0-1 Enhanced Foreign Function Interface Supporting Long Vectors dplyr 1.0.9 A Grammar of Data Manipulation DSS 2.44.0 Dispersion shrinkage for sequencing data DT 0.23 A Wrapper of the JavaScript Library 'DataTables' dtplyr 1.2.1 Data Table Back-End for 'dplyr' dygraphs 1.1.1.6 Interface to 'Dygraphs' Interactive Time Series Charting Library dynamicTreeCut 1.63-1 Methods for Detection of Clusters in Hierarchical Clustering Dendrograms DynDoc 1.74.0 Dynamic document tools e1071 1.7-9 Misc Functions of the Department of Statistics, Probability Theory Group (Formerly: E1071), TU Wien easyRNASeq 2.32.0 Count summarization and normalization for RNA-Seq data EBSeq 1.36.0 An R package for gene and isoform differential expression analysis of RNA-seq data edgeR 3.38.1 Empirical Analysis of Digital Gene Expression Data in R effects 4.2-1 Effect Displays for Linear, Generalized Linear, and Other Models ellipse 0.4.2 Functions for Drawing Ellipses and Ellipse-Like Confidence Regions ellipsis 0.3.2 Tools for Working with ... ensembldb 2.20.1 Utilities to create and use Ensembl-based annotation databases Epi 2.46 Statistical Analysis in Epidemiology erer 3.1 Empirical Research in Economics with R estimability 1.3 Tools for Assessing Estimability of Linear Predictions etm 1.1.1 Empirical Transition Matrix evaluate 0.15 Parsing and Evaluation Tools that Provide More Details than the Default evd 2.3-6 Functions for Extreme Value Distributions ExperimentHub 2.4.0 Client to access ExperimentHub resources expm 0.999-6 Matrix Exponential, Log, 'etc' FactoMineR 2.4 Multivariate Exploratory Data Analysis and Data Mining fail 1.3 File Abstraction Interface Layer (FAIL) fansi 1.0.3 ANSI Control Sequence Aware String Functions farver 2.1.0 High Performance Colour Space Manipulation fastcluster 1.2.3 Fast Hierarchical Clustering Routines for R and 'Python' fastICA 1.2-3 FastICA Algorithms to Perform ICA and Projection Pursuit fastmap 1.1.0 Fast Data Structures fastmatch 1.1-3 Fast 'match()' Function FDb.InfiniumMethylation.hg19 2.2.0 Annotation package for Illumina Infinium DNA methylation probes fdrtool 1.2.17 Estimation of (Local) False Discovery Rates and Higher Criticism fields 13.3 Tools for Spatial Data filelock 1.0.2 Portable File Locking flashClust 1.01-2 Implementation of optimal hierarchical clustering flexmix 2.3-17 Flexible Mixture Modeling fontawesome 0.2.2 Easily Work with 'Font Awesome' Icons forcats 0.5.1 Tools for Working with Categorical Variables (Factors) foreach 1.5.2 Provides Foreach Looping Construct foreign 0.8-82 Read Data Stored by 'Minitab', 'S', 'SAS', 'SPSS', 'Stata', 'Systat', 'Weka', 'dBase', ... formatR 1.12 Format R Code Automatically Formula 1.2-4 Extended Model Formulas fpc 2.2-9 Flexible Procedures for Clustering fs 1.5.2 Cross-Platform File System Operations Based on 'libuv' futile.logger 1.4.3 A Logging Utility for R futile.options 1.0.1 Futile Options Management future 1.25.0 Unified Parallel and Distributed Processing in R for Everyone future.apply 1.9.0 Apply Function to Elements in Parallel using Futures gam 1.20.1 Generalized Additive Models gamlss 5.4-3 Generalised Additive Models for Location Scale and Shape gamlss.data 6.0-2 Data for Generalised Additive Models for Location Scale and Shape gamlss.dist 6.0-3 Distributions for Generalized Additive Models for Location Scale and Shape gamlss.mx 6.0-0 Fitting Mixture Distributions with GAMLSS gamlss.nl 4.1-0 Fitting non linear parametric GAMLSS models gargle 1.2.0 Utilities for Working with Google APIs gcrma 2.68.0 Background Adjustment Using Sequence Information gdata 2.18.0.1 Various R Programming Tools for Data Manipulation genefilter 1.78.0 genefilter: methods for filtering genes from high-throughput experiments geneLenDataBase 1.32.0 Lengths of mRNA transcripts for a number of genomes GeneNet 1.2.16 Modeling and Inferring Gene Networks geneplotter 1.74.0 Graphics related functions for Bioconductor generics 0.1.2 Common S3 Generics not Provided by Base R Methods Related to Model Fitting genetics 1.3.8.1.3 Population Genetics GenomeInfoDb 1.32.2 Utilities for manipulating chromosome names, including modifying them to follow a particular naming style GenomeInfoDbData 1.2.8 Species and taxonomy ID look up tables used by GenomeInfoDb genomeIntervals 1.52.0 Operations on genomic intervals GenomicAlignments 1.32.0 Representation and manipulation of short genomic alignments GenomicFeatures 1.48.1 Conveniently import and query gene models GenomicRanges 1.48.0 Representation and manipulation of genomic intervals geojson 0.3.4 Classes for 'GeoJSON' geojsonio 0.9.4 Convert Data from and to 'GeoJSON' or 'TopoJSON' geojsonsf 2.0.2 GeoJSON to Simple Feature Converter geometries 0.2.0 Convert Between R Objects and Geometric Structures GEOquery 2.64.2 Get data from NCBI Gene Expression Omnibus (GEO) gert 1.6.0 Simple Git Client for R getopt 1.20.3 C-Like 'getopt' Behavior GGally 2.1.2 Extension to 'ggplot2' ggforce 0.3.3 Accelerating 'ggplot2' ggplot2 3.3.6 Create Elegant Data Visualisations Using the Grammar of Graphics ggrepel 0.9.1 Automatically Position Non-Overlapping Text Labels with 'ggplot2' ggridges 0.5.3 Ridgeline Plots in 'ggplot2' gh 1.3.0 'GitHub' 'API' gitcreds 0.1.1 Query 'git' Credentials from 'R' GJRM 0.2-6 Generalised Joint Regression Modelling glmnet 4.1-4 Lasso and Elastic-Net Regularized Generalized Linear Models globals 0.15.0 Identify Global Objects in R Expressions globaltest 5.50.0 Testing Groups of Covariates/Features for Association with a Response Variable, with Applications to Gene Set Testing glue 1.6.2 Interpreted String Literals gmp 0.6-5 Multiple Precision Arithmetic GO.db 3.15.0 A set of annotation maps describing the entire Gene Ontology goftest 1.2-3 Classical Goodness-of-Fit Tests for Univariate Distributions googledrive 2.0.0 An Interface to Google Drive googlesheets4 1.0.0 Access Google Sheets using the Sheets API V4 goseq 1.48.0 Gene Ontology analyser for RNA-seq and other length biased data GOstats 2.62.0 Tools for manipulating GO and microarrays gower 1.0.0 Gower's Distance gplots 3.1.3 Various R Programming Tools for Plotting Data graph 1.74.0 graph: A package to handle graph data structures graphics 4.2.0 The R Graphics Package grDevices 4.2.0 The R Graphics Devices and Support for Colours and Fonts grid 4.2.0 The Grid Graphics Package gridExtra 2.3 Miscellaneous Functions for \"Grid\" Graphics GSEABase 1.58.0 Gene set enrichment data structures and methods gsl 2.1-7.1 Wrapper for the Gnu Scientific Library gsmoothr 0.1.7 Smoothing tools gtable 0.3.0 Arrange 'Grobs' in Tables gtools 3.9.2.1 Various R Programming Tools Gviz 1.40.1 Plotting data and annotation information along genomic coordinates HAC 1.1-0 Estimation, Simulation and Visualization of Hierarchical Archimedean Copulae (HAC) haplo.stats 1.8.7 Statistical Analysis of Haplotypes with Traits and Covariates when Linkage Phase is Ambiguous hardhat 0.2.0 Construct Modeling Packages haven 2.5.0 Import and Export 'SPSS', 'Stata' and 'SAS' Files HDF5Array 1.24.0 HDF5 backend for DelayedArray objects hexbin 1.28.2 Hexagonal Binning Routines hgu95av2.db 3.13.0 Affymetrix Affymetrix HG_U95Av2 Array annotation data (chip hgu95av2) HI 0.5 Simulation from Distributions Supported by Nested Hyperplanes highr 0.9 Syntax Highlighting for R Source Code HistData 0.8-7 Data Sets from the History of Statistics and Data Visualization Hmisc 4.7-0 Harrell Miscellaneous hms 1.1.1 Pretty Time of Day htmlTable 2.4.0 Advanced Tables for Markdown/HTML htmltools 0.5.2 Tools for HTML htmlwidgets 1.5.4 HTML Widgets for R httpcode 0.3.0 'HTTP' Status Code Helper httpuv 1.6.5 HTTP and WebSocket Server Library httr 1.4.3 Tools for Working with URLs and HTTP hugene10stprobeset.db 8.8.0 Affymetrix hugene10 annotation data (chip hugene10stprobeset) hugene10sttranscriptcluster.db 8.8.0 Affymetrix hugene10 annotation data (chip hugene10sttranscriptcluster) hwriter 1.3.2.1 HTML Writer - Outputs R Objects in HTML Format ids 1.0.1 Generate Random Identifiers igraph 1.3.1 Network Analysis and Visualization Illumina450ProbeVariants.db 1.32.0 Annotation Package combining variant data from 1000 Genomes Project for Illumina HumanMethylation450 Bead Chip probes IlluminaHumanMethylation450kanno.ilmn12.hg19 0.6.1 Annotation for Illumina's 450k methylation arrays IlluminaHumanMethylation450kmanifest 0.4.0 Annotation for Illumina's 450k methylation arrays IlluminaHumanMethylationEPICanno.ilm10b4.hg19 0.6.0 Annotation for Illumina's EPIC methylation arrays IlluminaHumanMethylationEPICmanifest 0.3.0 Manifest for Illumina's EPIC methylation arrays illuminaHumanv4.db 1.26.0 Illumina HumanHT12v4 annotation data (chip illuminaHumanv4) illuminaio 0.38.0 Parsing Illumina Microarray Output Files impute 1.70.0 impute: Imputation for microarray data ini 0.3.1 Read and Write '.ini' Files INLA 22.05.18-2 Full Bayesian Analysis of Latent Gaussian Models using Integrated Nested Laplace Approximations inline 0.3.19 Functions to Inline C, C++, Fortran Function Calls from R insight 0.17.1 Easy Access to Model Information for Various Model Objects interactiveDisplayBase 1.34.0 Base package for enabling powerful shiny web displays of Bioconductor objects intervals 0.15.2 Tools for Working with Points and Intervals ipred 0.9-12 Improved Predictors IRanges 2.30.0 Foundation of integer range manipulation in Bioconductor ismev 1.42 An Introduction to Statistical Modeling of Extreme Values isoband 0.2.5 Generate Isolines and Isobands from Regularly Spaced Elevation Grids ISOcodes 2022.01.10 Selected ISO Codes isva 1.9 Independent Surrogate Variable Analysis iterators 1.0.14 Provides Iterator Construct iterpc 0.4.2 Efficient Iterator for Permutations and Combinations JADE 2.0-3 Blind Source Separation Methods Based on Joint Diagonalization and Some BSS Performance Criteria jpeg 0.1-9 Read and write JPEG images jqr 1.2.3 Client for 'jq', a 'JSON' Processor jquerylib 0.1.4 Obtain 'jQuery' as an HTML Dependency Object jsonify 1.2.1 Convert Between 'R' Objects and Javascript Object Notation (JSON) jsonlite 1.8.0 A Simple and Robust JSON Parser and Generator for R karyoploteR 1.22.0 Plot customizable linear genomes displaying arbitrary data KEGGREST 1.36.0 Client-side REST access to the Kyoto Encyclopedia of Genes and Genomes (KEGG) kernlab 0.9-30 Kernel-Based Machine Learning Lab KernSmooth 2.23-20 Functions for Kernel Smoothing Supporting Wand & Jones (1995) knitr 1.39 A General-Purpose Package for Dynamic Report Generation in R kohonen 3.0.11 Supervised and Unsupervised Self-Organising Maps kpmt 0.1.0 Known Population Median Test labeling 0.4.2 Axis Labeling lambda.r 1.2.4 Modeling Data with Functional Programming later 1.3.0 Utilities for Scheduling Functions to Execute Later with Event Loops lattice 0.20-45 Trellis Graphics for R latticeExtra 0.6-29 Extra Graphical Utilities Based on Lattice lava 1.6.10 Latent Variable Models lazyeval 0.2.2 Lazy (Non-Standard) Evaluation leafem 0.2.0 'leaflet' Extensions for 'mapview' leaflet 2.1.1 Create Interactive Web Maps with the JavaScript 'Leaflet' Library leaflet.providers 1.9.0 Leaflet Providers leafsync 0.1.0 Small Multiples for Leaflet Web Maps leaps 3.1 Regression Subset Selection learnr 0.10.1 Interactive Tutorials for R lifecycle 1.0.1 Manage the Life Cycle of your Package Functions limma 3.52.1 Linear Models for Microarray Data listenv 0.8.0 Environments Behaving (Almost) as Lists lme4 1.1-29 Linear Mixed-Effects Models using 'Eigen' and S4 lmtest 0.9-40 Testing Linear Regression Models locfit 1.5-9.5 Local Regression, Likelihood and Density Estimation longitudinal 1.1.13 Analysis of Multiple Time Course Data loo 2.5.1 Efficient Leave-One-Out Cross-Validation and WAIC for Bayesian Models lpSolve 5.6.15 Interface to 'Lp_solve' v. 5.5 to Solve Linear/Integer Programs LSD 4.1-0 Lots of Superior Depictions ltm 1.2-0 Latent Trait Models under IRT lubridate 1.8.0 Make Dealing with Dates a Little Easier lumi 2.48.0 BeadArray Specific Methods for Illumina Methylation and Expression Microarrays lwgeom 0.2-8 Bindings to Selected 'liblwgeom' Functions for Simple Features made4 1.70.0 Multivariate analysis of microarray data using ADE4 magic 1.6-0 Create and Investigate Magic Squares magrittr 2.0.3 A Forward-Pipe Operator for R maps 3.4.0 Draw Geographical Maps maptools 1.1-4 Tools for Handling Spatial Objects maptree 1.4-8 Mapping, Pruning, and Graphing Tree Models markdown 1.1 Render Markdown with the C Library 'Sundown' marray 1.74.0 Exploratory analysis for two-color spotted microarray data MASS 7.3-56 Support Functions and Datasets for Venables and Ripley's MASS mathjaxr 1.6-0 Using 'Mathjax' in Rd Files Matrix 1.4-1 Sparse and Dense Matrix Classes and Methods MatrixGenerics 1.8.0 S4 Generic Summary Statistic Functions that Operate on Matrix-Like Objects MatrixModels 0.5-0 Modelling with Sparse and Dense Matrices matrixStats 0.62.0 Functions that Apply to Rows and Columns of Matrices (and to Vectors) mclust 5.4.10 Gaussian Mixture Modelling for Model-Based Clustering, Classification, and Density Estimation mcmc 0.9-7 Markov Chain Monte Carlo memoise 2.0.1 'Memoisation' of Functions MendelianRandomization 0.6.0 Mendelian Randomization Package metadat 1.2-0 Meta-Analysis Datasets metafor 3.4-0 Meta-Analysis Package for R methods 4.2.0 Formal Methods and Classes methylumi 2.42.0 Handle Illumina methylation data mgcv 1.8-40 Mixed GAM Computation Vehicle with Automatic Smoothness Estimation mime 0.12 Map Filenames to MIME Types minfi 1.42.0 Analyze Illumina Infinium DNA methylation arrays miniUI 0.1.1.1 Shiny UI Widgets for Small Screens minqa 1.2.4 Derivative-free optimization algorithms by quadratic approximation missMethyl 1.30.0 Analysing Illumina HumanMethylation BeadChip Data mitools 2.4 Tools for Multiple Imputation of Missing Data mlr 2.19.0 Machine Learning in R mnormt 2.0.2 The Multivariate Normal and t Distributions, and Their Truncated Versions ModelMetrics 1.2.2.2 Rapid Calculation of Model Metrics modelr 0.1.8 Modelling Functions that Work with the Pipe modeltools 0.2-23 Tools and Classes for Statistical Models msm 1.6.9 Multi-State Markov and Hidden Markov Models in Continuous Time mstate 0.3.2 Data Preparation, Estimation and Prediction in Multi-State Models multcomp 1.4-19 Simultaneous Inference in General Parametric Models multtest 2.52.0 Resampling-based multiple hypothesis testing munsell 0.5.0 Utilities for Using Munsell Colours mvtnorm 1.1-3 Multivariate Normal and t Distributions nleqslv 3.3.2 Solve Systems of Nonlinear Equations nlme 3.1-157 Linear and Nonlinear Mixed Effects Models nloptr 2.0.2 R Interface to NLopt NLP 0.2-1 Natural Language Processing Infrastructure nnet 7.3-17 Feed-Forward Neural Networks and Multinomial Log-Linear Models nor1mix 1.3-0 Normal aka Gaussian (1-d) Mixture Models (S3 Classes and Methods) npde 3.2 Normalised Prediction Distribution Errors for Nonlinear Mixed-Effect Models numDeriv 2016.8-1.1 Accurate Numerical Derivatives OPE 0.7 Outer-product emulator openssl 2.0.2 Toolkit for Encryption, Signatures and Certificates Based on OpenSSL optparse 1.7.1 Command Line Option Parser org.Hs.eg.db 3.15.0 Genome wide annotation for Human parallel 4.2.0 Support for Parallel computation in R parallelly 1.31.1 Enhancing the 'parallel' Package parallelMap 1.5.1 Unified Interface to Parallelization Back-Ends ParamHelpers 1.14 Helpers for Parameters in Black-Box Optimization, Tuning and Machine Learning pbapply 1.5-0 Adding Progress Bar to '*apply' Functions pbkrtest 0.5.1 Parametric Bootstrap, Kenward-Roger and Satterthwaite Based Methods for Test in Mixed Models pcaPP 2.0-1 Robust PCA by Projection Pursuit pegas 1.1 Population and Evolutionary Genetics Analysis System permute 0.9-7 Functions for Generating Restricted Permutations of Data phangorn 2.8.1 Phylogenetic Reconstruction and Analysis pillar 1.7.0 Coloured Formatting for Columns pixmap 0.4-12 Bitmap Images / Pixel Maps pkgbuild 1.3.1 Find Tools Needed to Build R Packages pkgconfig 2.0.3 Private Configuration for 'R' Packages pkgload 1.2.4 Simulate Package Installation and Attach pkgmaker 0.32.2 Development Utilities for R Packages plinkQC 0.3.4 Genotype Quality Control with 'PLINK' plogr 0.2.0 The 'plog' C++ Logging Library plotly 4.10.0 Create Interactive Web Graphics via 'plotly.js' pls 2.8-0 Partial Least Squares and Principal Component Regression plyr 1.8.7 Tools for Splitting, Applying and Combining Data png 0.1-7 Read and write PNG images poLCA 1.6.0.1 Polytomous Variable Latent Class Analysis polspline 1.1.20 Polynomial Spline Routines polyclip 1.10-0 Polygon Clipping polycor 0.8-1 Polychoric and Polyserial Correlations posterior 1.2.1 Tools for Working with Posterior Distributions poweRlaw 0.70.6 Analysis of Heavy Tailed Distributions prabclus 2.3-2 Functions for Clustering and Testing of Presence-Absence, Abundance and Multilocus Genetic Data pracma 2.3.8 Practical Numerical Math Functions praise 1.0.0 Praise Users preprocessCore 1.58.0 A collection of pre-processing functions prettydoc 0.4.1 Creating Pretty Documents from R Markdown prettyunits 1.1.1 Pretty, Human Readable Formatting of Quantities pROC 1.18.0 Display and Analyze ROC Curves processx 3.5.3 Execute and Control System Processes prodlim 2019.11.13 Product-Limit Estimation for Censored Event History Analysis profileModel 0.6.1 Profiling Inference Functions for Various Model Classes progress 1.2.2 Terminal Progress Bars progressr 0.10.0 An Inclusive, Unifying API for Progress Updates promises 1.2.0.1 Abstractions for Promise-Based Asynchronous Programming ProtGenerics 1.28.0 Generic infrastructure for Bioconductor mass spectrometry packages proto 1.0.0 Prototype Object-Based Programming protolite 2.1.1 Highly Optimized Protocol Buffer Serializers proxy 0.4-26 Distance and Similarity Measures ps 1.7.0 List, Query, Manipulate System Processes PSCBS 0.66.0 Analysis of Parent-Specific DNA Copy Numbers pspline 1.0-19 Penalized Smoothing Splines psych 2.2.5 Procedures for Psychological, Psychometric, and Personality Research purrr 0.3.4 Functional Programming Tools quadprog 1.5-8 Functions to Solve Quadratic Programming Problems quanteda 3.2.1 Quantitative Analysis of Textual Data quanteda.corpora 0.9.2 A collection of corpora for quanteda quantmod 0.4.20 Quantitative Financial Modelling Framework quantreg 5.93 Quantile Regression qvalue 2.28.0 Q-value estimation for false discovery rate control qvcalc 1.0.2 Quasi Variances for Factor Effects in Statistical Models R.cache 0.15.0 Fast and Light-Weight Caching (Memoization) of Objects and Results to Speed Up Computations R.devices 2.17.0 Unified Handling of Graphics Devices R.filesets 2.14.0 Easy Handling of and Access to Files Organized in Structured Directories R.huge 0.9.0 Methods for Accessing Huge Amounts of Data [deprecated] R.methodsS3 1.8.1 S3 Methods Simplified R.oo 1.24.0 R Object-Oriented Programming with or without References R.rsp 0.44.0 Dynamic Generation of Scientific Reports R.utils 2.11.0 Various Programming Utilities R2HTML 2.3.3 HTML Exportation for R Objects R2WinBUGS 2.1-21 Running 'WinBUGS' and 'OpenBUGS' from 'R' / 'S-PLUS' R6 2.5.1 Encapsulated Classes with Reference Semantics randomForest 4.7-1.1 Breiman and Cutler's Random Forests for Classification and Regression rapidjsonr 1.2.0 'Rapidjson' C++ Header Files rappdirs 0.3.3 Application Directories: Determine Where to Save Data, Caches, and Logs raster 3.5-15 Geographic Data Analysis and Modeling RBGL 1.72.0 An interface to the BOOST graph library rcmdcheck 1.4.0 Run 'R CMD check' from 'R' and Capture Results RColorBrewer 1.1-3 ColorBrewer Palettes Rcpp 1.0.8.3 Seamless R and C++ Integration RcppArmadillo 0.11.1.1.0 'Rcpp' Integration for the 'Armadillo' Templated Linear Algebra Library RcppEigen 0.3.3.9.2 'Rcpp' Integration for the 'Eigen' Templated Linear Algebra Library RcppGSL 0.3.11 'Rcpp' Integration for 'GNU GSL' Vectors and Matrices RcppParallel 5.1.5 Parallel Programming Tools for 'Rcpp' RcppZiggurat 0.1.6 'Rcpp' Integration of Different \"Ziggurat\" Normal RNG Implementations RCurl 1.98-1.6 General Network (HTTP/FTP/...) Client Interface for R readr 2.1.2 Read Rectangular Text Data readxl 1.4.0 Read Excel Files recipes 0.2.0 Preprocessing and Feature Engineering Steps for Modeling regioneR 1.28.0 Association analysis of genomic regions based on permutation tests registry 0.5-1 Infrastructure for R Package Registries relaimpo 2.2-6 Relative Importance of Regressors in Linear Models rematch 1.0.1 Match Regular Expressions with a Nicer 'API' rematch2 2.1.2 Tidy Output from Regular Expression Matching remotes 2.4.2 R Package Installation from Remote Repositories, Including 'GitHub' renv 0.15.4 Project Environments Repitools 1.42.0 Epigenomic tools reprex 2.0.1 Prepare Reproducible Example Code via the Clipboard reshape 0.8.9 Flexibly Reshape Data reshape2 1.4.4 Flexibly Reshape Data: A Reboot of the Reshape Package restfulr 0.0.13 R Interface to RESTful Web Services Rfast 2.0.6 A Collection of Efficient and Extremely Fast R Functions rgdal 1.5-32 Bindings for the 'Geospatial' Data Abstraction Library rgeos 0.5-9 Interface to Geometry Engine - Open Source ('GEOS') rgl 0.108.3.2 3D Visualization Using OpenGL Rgraphviz 2.40.0 Provides plotting capabilities for R graph objects rhdf5 2.40.0 R Interface to HDF5 rhdf5filters 1.8.0 HDF5 Compression Filters Rhdf5lib 1.18.2 hdf5 library as an R package Rhtslib 1.28.0 HTSlib high-throughput sequencing library as an R package Ringo 1.60.0 R Investigation of ChIP-chip Oligoarrays rjson 0.2.21 JSON for R RJSONIO 1.3-1.6 Serialize R Objects to JSON, JavaScript Object Notation rlang 1.0.2 Functions for Base Types and Core R and 'Tidyverse' Features rlecuyer 0.3-5 R Interface to RNG with Multiple Streams rlist 0.4.6.2 A Toolbox for Non-Tabular Data Manipulation rmarkdown 2.14 Dynamic Documents for R Rmpfr 0.8-7 R MPFR - Multiple Precision Floating-Point Reliable Rmpi 0.6-9.2 Interface (Wrapper) to MPI (Message-Passing Interface) rms 6.3-0 Regression Modeling Strategies RMySQL 0.10.23 Database Interface and 'MySQL' Driver for R RNetCDF 2.5-2 Interface to 'NetCDF' Datasets rngtools 1.5.2 Utility Functions for Working with Random Number Generators robustbase 0.95-0 Basic Robust Statistics ROC 1.72.0 utilities for ROC, with microarray focus roxygen2 7.2.0 In-Line Documentation for R rpart 4.1.16 Recursive Partitioning and Regression Trees RPMM 1.25 Recursively Partitioned Mixture Model rprojroot 2.0.3 Finding Files in Project Subdirectories Rsamtools 2.12.0 Binary alignment (BAM), FASTA, variant call (BCF), and tabix file import Rsolnp 1.16 General Non-Linear Optimization RSQLite 2.2.14 SQLite Interface for R rstan 2.21.5 R Interface to Stan rstanarm 2.21.3 Bayesian Applied Regression Modeling via Stan rstantools 2.2.0 Tools for Developing R Packages Interfacing with 'Stan' rstudioapi 0.13 Safely Access the RStudio API Rsubread 2.10.1 Mapping, quantification and variant analysis of sequencing data rtracklayer 1.56.0 R interface to genome annotation files and the UCSC genome browser ruv 0.9.7.1 Detect and Remove Unwanted Variation using Negative Controls rversions 2.1.1 Query 'R' Versions, Including 'r-release' and 'r-oldrel' rvest 1.0.2 Easily Harvest (Scrape) Web Pages s2 1.0.7 Spherical Geometry Operators Using the S2 Geometry Library S4Vectors 0.34.0 Foundation of vector-like and list-like containers in Bioconductor saemix 3.0 Stochastic Approximation Expectation Maximization (SAEM) Algorithm sampling 2.9 Survey Sampling sandwich 3.0-1 Robust Covariance Matrix Estimators sass 0.4.1 Syntactically Awesome Style Sheets ('Sass') scales 1.2.0 Scale Functions for Visualization scam 1.2-12 Shape Constrained Additive Models scatterplot3d 0.3-41 3D Scatter Plot schoolmath 0.4.1 Functions and Datasets for Math Used in School scrime 1.3.5 Analysis of High-Dimensional Categorical Data Such as SNP Data segmented 1.5-0 Regression Models with Break-Points / Change-Points Estimation selectr 0.4-2 Translate CSS Selectors to XPath Expressions sendmailR 1.2-1 send email using R seqinr 4.2-16 Biological Sequences Retrieval and Analysis seqLogo 1.62.0 Sequence logos for DNA sequence alignments sessioninfo 1.2.2 R Session Information sf 1.0-7 Simple Features for R sfheaders 0.4.0 Converts Between R Objects and Simple Feature Objects sfsmisc 1.1-13 Utilities from 'Seminar fuer Statistik' ETH Zurich shape 1.4.6 Functions for Plotting Graphical Shapes, Colors shiny 1.7.1 Web Application Framework for R shinyjs 2.1.0 Easily Improve the User Experience of Your Shiny Apps in Seconds shinystan 2.6.0 Interactive Visual and Numerical Diagnostics and Posterior Analysis for Bayesian Models shinythemes 1.2.0 Themes for Shiny ShortRead 1.54.0 FASTQ input and manipulation siggenes 1.70.0 Multiple Testing using SAM and Efron's Empirical Bayes Approaches slam 0.1-50 Sparse Lightweight Arrays and Matrices sn 2.0.2 The Skew-Normal and Related Distributions Such as the Skew-t and the SUN snow 0.4-4 Simple Network of Workstations SnowballC 0.7.0 Snowball Stemmers Based on the C 'libstemmer' UTF-8 Library snowfall 1.84-6.1 Easier cluster computing (based on snow). softImpute 1.4-1 Matrix Completion via Iterative Soft-Thresholded SVD sourcetools 0.1.7 Tools for Reading, Tokenizing and Parsing R Code sp 1.4-7 Classes and Methods for Spatial Data spam 2.8-0 SPArse Matrix SparseM 1.81 Sparse Linear Algebra sparseMatrixStats 1.8.0 Summary Statistics for Rows and Columns of Sparse Matrices spatial 7.3-15 Functions for Kriging and Point Pattern Analysis spatstat 2.3-4 Spatial Point Pattern Analysis, Model-Fitting, Simulation, Tests spatstat.core 2.4-4 Core Functionality of the 'spatstat' Family spatstat.data 2.2-0 Datasets for 'spatstat' Family spatstat.geom 2.4-0 Geometrical Functionality of the 'spatstat' Family spatstat.linnet 2.3-2 Linear Networks Functionality of the 'spatstat' Family spatstat.random 2.2-0 Random Generation Functionality for the 'spatstat' Family spatstat.sparse 2.1-1 Sparse Three-Dimensional Arrays and Linear Algebra Utilities spatstat.utils 2.3-1 Utility Functions for 'spatstat' spData 2.0.1 Datasets for Spatial Analysis spdep 1.2-4 Spatial Dependence: Weighting Schemes, Statistics splines 4.2.0 Regression Spline Functions and Classes SQUAREM 2021.1 Squared Extrapolation Methods for Accelerating EM-Like Monotone Algorithms stabledist 0.7-1 Stable Distribution Functions StanHeaders 2.21.0-7 C++ Header Files for Stan stars 0.5-5 Spatiotemporal Arrays, Raster and Vector Data Cubes startupmsg 0.9.6 Utilities for Start-Up Messages statmod 1.4.36 Statistical Modeling stats 4.2.0 The R Stats Package stats4 4.2.0 Statistical Functions using S4 Classes stopwords 2.3 Multilingual Stopword Lists stringdist 0.9.8 Approximate String Matching, Fuzzy Text Search, and String Distance Functions stringi 1.7.6 Character String Processing Facilities stringr 1.4.0 Simple, Consistent Wrappers for Common String Operations SummarizedExperiment 1.26.1 SummarizedExperiment container survey 4.1-1 Analysis of Complex Survey Samples survival 3.3-1 Survival Analysis sva 3.44.0 Surrogate Variable Analysis sys 3.4 Powerful and Reliable Tools for Running System Commands in R systemfit 1.1-24 Estimating Systems of Simultaneous Equations TAM 4.0-16 Test Analysis Modules tcltk 4.2.0 Tcl/Tk Interface tensor 1.5 Tensor product of arrays tensorA 0.36.2 Advanced Tensor Arithmetic with Named Indices terra 1.5-21 Spatial Data Analysis testthat 3.1.4 Unit Testing for R tgp 2.4-18 Bayesian Treed Gaussian Process Models TH.data 1.1-1 TH's Data Archive threejs 0.3.3 Interactive 3D Scatter Plots, Networks and Globes tibble 3.1.7 Simple Data Frames tictoc 1.0.1 Functions for Timing R Scripts, as Well as Implementations of Stack and List Structures tidyr 1.2.0 Tidy Messy Data tidyselect 1.1.2 Select from a Set of Strings tidyverse 1.3.1 Easily Install and Load the 'Tidyverse' timeDate 3043.102 Rmetrics - Chronological and Calendar Objects tinytex 0.39 Helper Functions to Install and Maintain TeX Live, and Compile LaTeX Documents tkrplot 0.0-26 TK Rplot tm 0.7-8 Text Mining Package tmap 3.3-3 Thematic Maps tmaptools 3.1-1 Thematic Map Tools tmvnsim 1.0-2 Truncated Multivariate Normal Simulation tools 4.2.0 Tools for Package Development topicmodels 0.2-12 Topic Models triebeard 0.3.0 'Radix' Trees in 'Rcpp' truncnorm 1.0-8 Truncated Normal Distribution trust 0.1-8 Trust Region Optimization tseries 0.10-51 Time Series Analysis and Computational Finance TTR 0.24.3 Technical Trading Rules tweenr 1.0.2 Interpolate Data for Smooth Animations TxDb.Hsapiens.UCSC.hg19.knownGene 3.2.2 Annotation package for TxDb object(s) tzdb 0.3.0 Time Zone Database Information udunits2 0.13.2.1 Udunits-2 Bindings for R units 0.8-0 Measurement Units for R Vectors UpSetR 1.4.0 A More Scalable Alternative to Venn and Euler Diagrams for Visualizing Intersecting Sets urca 1.3-0 Unit Root and Cointegration Tests for Time Series Data urltools 1.7.3 Vectorised Tools for URL Handling and Parsing usethis 2.1.6 Automate Package and Project Setup utf8 1.2.2 Unicode Text Processing utils 4.2.0 The R Utils Package uuid 1.1-0 Tools for Generating and Handling of UUIDs V8 4.2.0 Embedded JavaScript and WebAssembly Engine for R VariantAnnotation 1.42.1 Annotation of Genetic Variants vctrs 0.4.1 Vector Helpers vegan 2.6-2 Community Ecology Package VGAM 1.1-6 Vector Generalized Linear and Additive Models VineCopula 2.4.4 Statistical Inference of Vine Copulas viridis 0.6.2 Colorblind-Friendly Color Maps for R viridisLite 0.4.0 Colorblind-Friendly Color Maps (Lite Version) vroom 1.5.7 Read and Write Rectangular Text Data Quickly vsn 3.64.0 Variance stabilization and calibration for microarray data waldo 0.4.0 Find Differences Between R Objects wateRmelon 2.2.0 Illumina 450 and EPIC methylation array normalization and metrics WGCNA 1.71 Weighted Correlation Network Analysis whisker 0.4 {{mustache}} for R, Logicless Templating widgetframe 0.3.1 'Htmlwidgets' in Responsive 'iframes' widgetTools 1.74.0 Creates an interactive tcltk widget withr 2.5.0 Run Code 'With' Temporarily Modified Global State wk 0.6.0 Lightweight Well-Known Geometry Parsing xfun 0.31 Supporting Functions for Packages Maintained by 'Yihui Xie' XML 3.99-0.9 Tools for Parsing and Generating XML Within R and S-Plus xml2 1.3.3 Parse XML xopen 1.0.0 Open System Files, 'URLs', Anything xtable 1.8-4 Export Tables to LaTeX or HTML xts 0.12.1 eXtensible Time Series XVector 0.36.0 Foundation of external vector representation and manipulation in Bioconductor yaml 2.3.5 Methods to Convert R Data to YAML and Back zip 2.2.0 Cross-Platform 'zip' Compression zlibbioc 1.42.0 An R packaged zlib-1.2.5 zoo 1.8-10 S3 Infrastructure for Regular and Irregular Time Series (Z's Ordered Observations)","title":"R Packages"},{"location":"Other_Services/Aristotle/","text":"Aristotle \u00a7 Overview \u00a7 Aristotle is an interactive, Linux-based compute service for teaching, running on three nodes of the same specification as Legion's U-type nodes , each with 64 gigabytes of RAM and 16 cores. The nodes run the Red Hat Enterprise Linux operating system ( RHEL 7 ) and have a subset of the RCPS software stack available. The main aim of this service is to allow specific teaching courses to run that need to run Linux/UNIX applications, but it is available to all UCL users. Warning Aristotle is made available but is provided with minimal staff time and no budget. Any user may completely occupy the service and there is no system in place to prevent that. Access \u00a7 Anyone with a UCL userid and within the UCL institutional firewall can access Aristotle by connecting via ssh to: aristotle.rc.ucl.ac.uk This address can point to more than one actual server (via DNS round-robin); usually there are two available. To connect to a specific server from the set, you will need to know its number: for example, the second server has the address aristotle02.rc.ucl.ac.uk . When you connect, you should be shown which one you are connected to on your command line. The userid and password you need to connect with are those provided to you by Information Services Division . If you experience difficulties with your login, please make sure that you are typing your UCL user ID and your password correctly. If you still cannot get access, please contact us at rc-support@ucl.ac.uk . If you are outside the UCL firewall, you will need to connect to the Gateway system first and then SSH in to Aristotle from there. User Environment \u00a7 Aristotle runs Red Hat Enterprise Linux 7 and NFS mounts the RCPS Software Stack . As this machine is intended for teaching, work has focused on getting specific applications required for specific courses to work and these are: SAC Phon GMT Fortran compilers (of which there are a large variety) Packages are available through modules and users should consult the relevant modules documentation .","title":"Aristotle"},{"location":"Other_Services/Aristotle/#aristotle","text":"","title":"Aristotle"},{"location":"Other_Services/Aristotle/#overview","text":"Aristotle is an interactive, Linux-based compute service for teaching, running on three nodes of the same specification as Legion's U-type nodes , each with 64 gigabytes of RAM and 16 cores. The nodes run the Red Hat Enterprise Linux operating system ( RHEL 7 ) and have a subset of the RCPS software stack available. The main aim of this service is to allow specific teaching courses to run that need to run Linux/UNIX applications, but it is available to all UCL users. Warning Aristotle is made available but is provided with minimal staff time and no budget. Any user may completely occupy the service and there is no system in place to prevent that.","title":"Overview"},{"location":"Other_Services/Aristotle/#access","text":"Anyone with a UCL userid and within the UCL institutional firewall can access Aristotle by connecting via ssh to: aristotle.rc.ucl.ac.uk This address can point to more than one actual server (via DNS round-robin); usually there are two available. To connect to a specific server from the set, you will need to know its number: for example, the second server has the address aristotle02.rc.ucl.ac.uk . When you connect, you should be shown which one you are connected to on your command line. The userid and password you need to connect with are those provided to you by Information Services Division . If you experience difficulties with your login, please make sure that you are typing your UCL user ID and your password correctly. If you still cannot get access, please contact us at rc-support@ucl.ac.uk . If you are outside the UCL firewall, you will need to connect to the Gateway system first and then SSH in to Aristotle from there.","title":"Access"},{"location":"Other_Services/Aristotle/#user-environment","text":"Aristotle runs Red Hat Enterprise Linux 7 and NFS mounts the RCPS Software Stack . As this machine is intended for teaching, work has focused on getting specific applications required for specific courses to work and these are: SAC Phon GMT Fortran compilers (of which there are a large variety) Packages are available through modules and users should consult the relevant modules documentation .","title":"User Environment"},{"location":"Other_Services/RStudio/","text":"RStudio \u00a7 Overview \u00a7 The Research Computing team currently runs 2 supported instances of RStudio: https://rstudio.data-science.rc.ucl.ac.uk/ This instance is for general teaching use but requires permission to access as part of the Data Science Platform . It uses the central UNIX filestore for user data. https://econ-myriad.rc.ucl.ac.uk/ This instance is for research use by members of the Economics department. It uses the Myriad filesystem for user data. Troubleshooting and problem pre-emption \u00a7 For all of the services, please take care to either run q() in the R window or press the red logout button in the top right hand corner when you are done with the window, DO NOT just close the tab. This decreases the chance of there being stale sessions and future issues with logging in. Not being able to reach the landing (login) page \u00a7 If you cannot reach the landing page, then please first try getting there using private browsing and if that works then clear your cookies and cache. In most browsers you can do this for a certain time range, though look at the documentation for the browser you are using. R session not starting or RStudio Initialisation Error \u00a7 If you get an error pop-up RStudio Initialisation Error: Unable to connect to service or an ever-spinning loading screen you can try and resolve the problem using one of the methods below or get in touch with RC support . There are 2 courses of action for the 2 supported services: Economics RStudio service : ssh into Myriad and change the name of or delete a folder located at: ~/.local/share/rstudio/sessions/ Data Science Platform RStudio Pro teaching service : This service shares home directories with the central Unix services so you need to do: login to either Socrates ( socrates.ucl.ac.uk ) or Aristotle ( aristotle.rc.ucl.ac.uk ) via SSH. If you don't know how to do this there are istructions here: l,ogging in via SSH Change directory to ~/.local/share: cd ~/.local/share delete the rstudio folder: rm -rf rstudio It is worth testing if you can login to RStudio after the last step. If you still cannot login, delete the folllowing directory as well: cd ~/.rstudio rm -rf sessions logout. If doing this doesn't resolve your issues, get in touch with RC support .","title":"RStudio"},{"location":"Other_Services/RStudio/#rstudio","text":"","title":"RStudio"},{"location":"Other_Services/RStudio/#overview","text":"The Research Computing team currently runs 2 supported instances of RStudio: https://rstudio.data-science.rc.ucl.ac.uk/ This instance is for general teaching use but requires permission to access as part of the Data Science Platform . It uses the central UNIX filestore for user data. https://econ-myriad.rc.ucl.ac.uk/ This instance is for research use by members of the Economics department. It uses the Myriad filesystem for user data.","title":"Overview"},{"location":"Other_Services/RStudio/#troubleshooting-and-problem-pre-emption","text":"For all of the services, please take care to either run q() in the R window or press the red logout button in the top right hand corner when you are done with the window, DO NOT just close the tab. This decreases the chance of there being stale sessions and future issues with logging in.","title":"Troubleshooting and problem pre-emption"},{"location":"Other_Services/RStudio/#not-being-able-to-reach-the-landing-login-page","text":"If you cannot reach the landing page, then please first try getting there using private browsing and if that works then clear your cookies and cache. In most browsers you can do this for a certain time range, though look at the documentation for the browser you are using.","title":"Not being able to reach the landing (login) page"},{"location":"Other_Services/RStudio/#r-session-not-starting-or-rstudio-initialisation-error","text":"If you get an error pop-up RStudio Initialisation Error: Unable to connect to service or an ever-spinning loading screen you can try and resolve the problem using one of the methods below or get in touch with RC support . There are 2 courses of action for the 2 supported services: Economics RStudio service : ssh into Myriad and change the name of or delete a folder located at: ~/.local/share/rstudio/sessions/ Data Science Platform RStudio Pro teaching service : This service shares home directories with the central Unix services so you need to do: login to either Socrates ( socrates.ucl.ac.uk ) or Aristotle ( aristotle.rc.ucl.ac.uk ) via SSH. If you don't know how to do this there are istructions here: l,ogging in via SSH Change directory to ~/.local/share: cd ~/.local/share delete the rstudio folder: rm -rf rstudio It is worth testing if you can login to RStudio after the last step. If you still cannot login, delete the folllowing directory as well: cd ~/.rstudio rm -rf sessions logout. If doing this doesn't resolve your issues, get in touch with RC support .","title":"R session not starting or RStudio Initialisation Error"},{"location":"Other_Services/UCL_UK_e-Science_Certificates/","text":"UCL Information Services serves as a local Registration Authority for the authentication of applications for e-Science Certificates. A valid e-Science certificate is required to gain access to the resources of the National e-Infrastructure Service (NES) (amongst others). Brief information to help you in applying for an e-Science Certificate is provided below. More detailed information can be found on the NGS Support website . Scope of the UCL Registration Authority \u00a7 In general, the UCL Registration Authority (RA) can only approve personal and server certificate requests for members of UCL and those associated with projects based at UCL. However we have approved personal certificate requests for members of other London institutions without local RAs on request. Before you Apply for a Certificate \u00a7 The recommended method for applying for a certificate is to use the Certificate Wizard. So: Download the CertWizard java application or use WebStart from the Certificate Wizard page on the NES website. Install the application on your computer. Run the Certificate Wizard application. Applying for a Certificate \u00a7 You will be asked for a number of items when completing your request including: Certificate Wizard keystore password. Your certificates are stored in keystore which is password protected. The password (or passphrase) you choose should be at least 8 characters long and should conform to common secure password guidelines (e.g. include upper and lower-case letters, numbers, and punctuation symbols). Note that this password is the only thing that protects the private key part of your certificate(s) from being compromised, and thus rendered invalid. Keep this password to yourself, and don't forget it. If you forget this password, or if it is compromised, your certificate(s) will have to be revoked, and you will need to re-apply for them (at considerable inconvenience to both you and the CA/RA). Your given name and family name. You must enter your real name here. Names of roles will be rejected by the CA, for example you cannot use Biochem GRID. Your first name must be a word not just your your initial. Registration Authority. Use UCL EISD. This is the only valid Registration Authority (RA) for UCL. Your e-mail address. Make sure you get this right as it will be used by the e-Science CA to contact you when your certificate is ready. Your PIN. ( Not your bank PIN.) This should be, at minimum, 10 characters long. You will be asked for your PIN by your Registration Authority so it needs to be something you can remember or show. It should not be any of your normal passwords. Using one of these as your PIN (and thus revealing it to both your RA and the e-Science CA) will compromise its use as a password. Extra items for Server Certificates \u00a7 There are two extra items for certificates for servers: Host Name. The fully qualified DNS name (not numeric IP address) of your server. Host Admin Email. To apply for a server certificate you must have a user certificate for yourself and be responsible for the server. After Your Request has been Submitted \u00a7 After you have submitted your request, it has to be authenticated by your Registration Authority (RA) before the certificate is issued by the UK e-Science Certification Authority (CA). For authentication the UK e-Science CA requires that you present yourself in person to your RA with an appropriate form of photo-ID and your PIN. You will be asked to explain why you need a UK e-Science Certificate. The RA for UCL is based in Informations Services Division (ISD). To arrange an appointment please email grid-ra AT ucl.ac.uk in the first instance. Valid forms of Photo-ID are any of the following: Valid UCL ID card (It has to be a complete ID card with photo; authorisation for an ID card is not sufficient.) Current passport UK style photocard driving licence We are required to make and log a photocopy of your photo-ID. If you have none of the above forms of photo-ID available, contact us for advice by e-mail at grid-ra AT ucl.ac.uk. Please don't just turn up with an alternative as we may not be able to accept it. Extra Requirements for Students \u00a7 In addition to the above, students should provide a letter (on department paper) from their project supervisor explaining why they need a certificate. Extra Requirements for Servers \u00a7 In addition to the above, you need to provide a letter from your department explaining that you are responsible for this server. The letter should be on departmental stationary and be signed by your head of department. Obtaining Your Certificate \u00a7 After your request has been authenticated by your Registration Authority, it is forwarded to the UK e-Science Certification Authority for final creation (this stage is called signing the certificate). Signing is normally done on the same or next working day. When your certificate is ready the CA will e-mail you using the e-mail address that you provided with details of how to download your certificate. If you used the recommend method to request it, then you can download it into the Certificate Wizard application using the Refresh button. You should now make a backup of your certificate using the Export button in the Certificate Wizard application.","title":"UCL UK e-Science Certificates"},{"location":"Other_Services/UCL_UK_e-Science_Certificates/#scope-of-the-ucl-registration-authority","text":"In general, the UCL Registration Authority (RA) can only approve personal and server certificate requests for members of UCL and those associated with projects based at UCL. However we have approved personal certificate requests for members of other London institutions without local RAs on request.","title":"Scope of the UCL Registration Authority"},{"location":"Other_Services/UCL_UK_e-Science_Certificates/#before-you-apply-for-a-certificate","text":"The recommended method for applying for a certificate is to use the Certificate Wizard. So: Download the CertWizard java application or use WebStart from the Certificate Wizard page on the NES website. Install the application on your computer. Run the Certificate Wizard application.","title":"Before you Apply for a Certificate"},{"location":"Other_Services/UCL_UK_e-Science_Certificates/#applying-for-a-certificate","text":"You will be asked for a number of items when completing your request including: Certificate Wizard keystore password. Your certificates are stored in keystore which is password protected. The password (or passphrase) you choose should be at least 8 characters long and should conform to common secure password guidelines (e.g. include upper and lower-case letters, numbers, and punctuation symbols). Note that this password is the only thing that protects the private key part of your certificate(s) from being compromised, and thus rendered invalid. Keep this password to yourself, and don't forget it. If you forget this password, or if it is compromised, your certificate(s) will have to be revoked, and you will need to re-apply for them (at considerable inconvenience to both you and the CA/RA). Your given name and family name. You must enter your real name here. Names of roles will be rejected by the CA, for example you cannot use Biochem GRID. Your first name must be a word not just your your initial. Registration Authority. Use UCL EISD. This is the only valid Registration Authority (RA) for UCL. Your e-mail address. Make sure you get this right as it will be used by the e-Science CA to contact you when your certificate is ready. Your PIN. ( Not your bank PIN.) This should be, at minimum, 10 characters long. You will be asked for your PIN by your Registration Authority so it needs to be something you can remember or show. It should not be any of your normal passwords. Using one of these as your PIN (and thus revealing it to both your RA and the e-Science CA) will compromise its use as a password.","title":"Applying for a Certificate"},{"location":"Other_Services/UCL_UK_e-Science_Certificates/#extra-items-for-server-certificates","text":"There are two extra items for certificates for servers: Host Name. The fully qualified DNS name (not numeric IP address) of your server. Host Admin Email. To apply for a server certificate you must have a user certificate for yourself and be responsible for the server.","title":"Extra items for Server Certificates"},{"location":"Other_Services/UCL_UK_e-Science_Certificates/#after-your-request-has-been-submitted","text":"After you have submitted your request, it has to be authenticated by your Registration Authority (RA) before the certificate is issued by the UK e-Science Certification Authority (CA). For authentication the UK e-Science CA requires that you present yourself in person to your RA with an appropriate form of photo-ID and your PIN. You will be asked to explain why you need a UK e-Science Certificate. The RA for UCL is based in Informations Services Division (ISD). To arrange an appointment please email grid-ra AT ucl.ac.uk in the first instance. Valid forms of Photo-ID are any of the following: Valid UCL ID card (It has to be a complete ID card with photo; authorisation for an ID card is not sufficient.) Current passport UK style photocard driving licence We are required to make and log a photocopy of your photo-ID. If you have none of the above forms of photo-ID available, contact us for advice by e-mail at grid-ra AT ucl.ac.uk. Please don't just turn up with an alternative as we may not be able to accept it.","title":"After Your Request has been Submitted"},{"location":"Other_Services/UCL_UK_e-Science_Certificates/#extra-requirements-for-students","text":"In addition to the above, students should provide a letter (on department paper) from their project supervisor explaining why they need a certificate.","title":"Extra Requirements for Students"},{"location":"Other_Services/UCL_UK_e-Science_Certificates/#extra-requirements-for-servers","text":"In addition to the above, you need to provide a letter from your department explaining that you are responsible for this server. The letter should be on departmental stationary and be signed by your head of department.","title":"Extra Requirements for Servers"},{"location":"Other_Services/UCL_UK_e-Science_Certificates/#obtaining-your-certificate","text":"After your request has been authenticated by your Registration Authority, it is forwarded to the UK e-Science Certification Authority for final creation (this stage is called signing the certificate). Signing is normally done on the same or next working day. When your certificate is ready the CA will e-mail you using the e-mail address that you provided with details of how to download your certificate. If you used the recommend method to request it, then you can download it into the Certificate Wizard application using the Refresh button. You should now make a backup of your certificate using the Export button in the Certificate Wizard application.","title":"Obtaining Your Certificate"},{"location":"Paid-For_Resources/How_to_Use/","text":"Using Paid-For Resources \u00a7 Paid resources may be in the form of priority access (Gold), dedicated nodes or both. Users with access to Gold have tools for monitoring budgets and usage. Users with access to dedicated nodes have a tool for monitoring current use of their nodes. Why we recommend priority access \u00a7 We recommend priority access via Gold rather than dedicated nodes in most circumstances because: The amount of Gold you get is equivalent to the core hours if you ran your node at 100% utilisation throughout its 3-year lifespan. If you have a dedicated node and aren't currently running anything on it, it is idle and you cannot recover that time (and it still uses power and incurs hosting costs). If you aren't currently using your Gold, you have 3 months (or your chosen allocation period length) to recover that time and use it. Priority access via Gold \u00a7 If you have priority access, this is managed by a resource called Gold. Gold is divided into allocations, which have start and end dates and a given amount of Gold associated with them. Any unused Gold expires after the allocation period ends. On Myriad, one Gold = one core hour. If you run a job that asks for a wallclock time of 3hrs and 10 cores, then the job costs 30 Gold. Gold is reserved when you submit a job, so the entire 30 will be reserved and taken away from the available balance when you run qsub . After the job ends, how long it ran for is checked, and any unused Gold is put back for anyone to use. For example, you asked for 3 hours and 10 cores, but your job finished in 2 hours. When you submit the job, it will reserve 30 Gold and your budget will go down by 30. When it ends, the final charge is only 20 Gold, so 10 Gold gets put back in your available budget. View your Gold budgets \u00a7 To see the Gold budgets available to you, run: budgets You will see something like this: Project Machines Balance --------- -------- ----------- hpc.999 ANY 124560.00 hpc.998 ANY 0.00 The project column shows which budgets you have access to and the balance shows how much is left unused in the current allocation. Jobscript additions for Gold jobs \u00a7 You choose whether you want a specific job to be a Gold job or a normal priority job. For a Gold job, add these to your jobscript: #$ -P Gold #$ -A hpc.xx You can also pass these in on the command line to the qsub and qrsh commands: qsub -P Gold -A hpc.xx myscript.sh Viewing allocation dates \u00a7 You can look at all the start and end dates for your allocations: glsalloc -p hpc.xx Output will look like this: Id Account Projects StartTime EndTime Amount Deposited Description --- ------- -------- ---------- ---------- --------- --------- -------------- 001 01 hpc.999 -infinity infinity 0.00 0.00 Auto-Generated 002 01 hpc.999 2021-12-01 2022-03-01 105124.00 205124.00 003 01 hpc.999 2022-03-01 2022-06-01 205124.00 205124.00 004 01 hpc.999 2022-06-01 2022-09-01 205124.00 205124.00 Allocations begin and end at approximately 00:05 on the date mentioned. 'Deposited' is the total amount this allocation had to begin with. 'Amount' is the amount it has left just now. Monitoring Gold usage \u00a7 You can view some information about when your Gold was used, in which jobs, and by whom. # show help gstatement --man # show statement between the given dates gstatement -p hpc.xx -s 2020-12-01 -e 2021-12-01 # give a summary between the given dates gstatement -p hpc.xx -s 2020-12-01 -e 2021-12-01 --summarize Dedicated nodes \u00a7 For dedicated nodes, only members of your project are allowed to run jobs on your node. Your project is usually set by default so you do not need to specify it in your jobscript. You can check this by looking at qstat -j $JOB_ID for an existing job ID, and looking at the project line near the bottom. Jobscript additions for dedicated nodes \u00a7 If the project is not being set by default, for a job to be eligible to run on your nodes you will need to specify your project in your jobscript: # Specify project #$ -P <project> This will allow a job to run on your nodes, but it can also be scheduled on general-use nodes if some are available first. This should be the main way you run jobs. If you need to, you can force jobs to run on your nodes only. This is suitable when you have arranged policies on your nodes that are different from the normal policies (eg. a longer maximum wallclock time), as it means your policies will be in effect instead of the general policies. # Specify paid flag to force running on paid nodes only, with your policies #$ -l paid=1 Check what is running on your nodes \u00a7 We have a script named whatsonmynode , that runs qhost -j for all the nodes belonging to your project, so you can see which nodes you have, what is running on them and from which user. module load userscripts whatsonmynode <project>","title":"How to Use"},{"location":"Paid-For_Resources/How_to_Use/#using-paid-for-resources","text":"Paid resources may be in the form of priority access (Gold), dedicated nodes or both. Users with access to Gold have tools for monitoring budgets and usage. Users with access to dedicated nodes have a tool for monitoring current use of their nodes.","title":"Using Paid-For Resources"},{"location":"Paid-For_Resources/How_to_Use/#why-we-recommend-priority-access","text":"We recommend priority access via Gold rather than dedicated nodes in most circumstances because: The amount of Gold you get is equivalent to the core hours if you ran your node at 100% utilisation throughout its 3-year lifespan. If you have a dedicated node and aren't currently running anything on it, it is idle and you cannot recover that time (and it still uses power and incurs hosting costs). If you aren't currently using your Gold, you have 3 months (or your chosen allocation period length) to recover that time and use it.","title":"Why we recommend priority access"},{"location":"Paid-For_Resources/How_to_Use/#priority-access-via-gold","text":"If you have priority access, this is managed by a resource called Gold. Gold is divided into allocations, which have start and end dates and a given amount of Gold associated with them. Any unused Gold expires after the allocation period ends. On Myriad, one Gold = one core hour. If you run a job that asks for a wallclock time of 3hrs and 10 cores, then the job costs 30 Gold. Gold is reserved when you submit a job, so the entire 30 will be reserved and taken away from the available balance when you run qsub . After the job ends, how long it ran for is checked, and any unused Gold is put back for anyone to use. For example, you asked for 3 hours and 10 cores, but your job finished in 2 hours. When you submit the job, it will reserve 30 Gold and your budget will go down by 30. When it ends, the final charge is only 20 Gold, so 10 Gold gets put back in your available budget.","title":"Priority access via Gold"},{"location":"Paid-For_Resources/How_to_Use/#view-your-gold-budgets","text":"To see the Gold budgets available to you, run: budgets You will see something like this: Project Machines Balance --------- -------- ----------- hpc.999 ANY 124560.00 hpc.998 ANY 0.00 The project column shows which budgets you have access to and the balance shows how much is left unused in the current allocation.","title":"View your Gold budgets"},{"location":"Paid-For_Resources/How_to_Use/#jobscript-additions-for-gold-jobs","text":"You choose whether you want a specific job to be a Gold job or a normal priority job. For a Gold job, add these to your jobscript: #$ -P Gold #$ -A hpc.xx You can also pass these in on the command line to the qsub and qrsh commands: qsub -P Gold -A hpc.xx myscript.sh","title":"Jobscript additions for Gold jobs"},{"location":"Paid-For_Resources/How_to_Use/#viewing-allocation-dates","text":"You can look at all the start and end dates for your allocations: glsalloc -p hpc.xx Output will look like this: Id Account Projects StartTime EndTime Amount Deposited Description --- ------- -------- ---------- ---------- --------- --------- -------------- 001 01 hpc.999 -infinity infinity 0.00 0.00 Auto-Generated 002 01 hpc.999 2021-12-01 2022-03-01 105124.00 205124.00 003 01 hpc.999 2022-03-01 2022-06-01 205124.00 205124.00 004 01 hpc.999 2022-06-01 2022-09-01 205124.00 205124.00 Allocations begin and end at approximately 00:05 on the date mentioned. 'Deposited' is the total amount this allocation had to begin with. 'Amount' is the amount it has left just now.","title":"Viewing allocation dates"},{"location":"Paid-For_Resources/How_to_Use/#monitoring-gold-usage","text":"You can view some information about when your Gold was used, in which jobs, and by whom. # show help gstatement --man # show statement between the given dates gstatement -p hpc.xx -s 2020-12-01 -e 2021-12-01 # give a summary between the given dates gstatement -p hpc.xx -s 2020-12-01 -e 2021-12-01 --summarize","title":"Monitoring Gold usage"},{"location":"Paid-For_Resources/How_to_Use/#dedicated-nodes","text":"For dedicated nodes, only members of your project are allowed to run jobs on your node. Your project is usually set by default so you do not need to specify it in your jobscript. You can check this by looking at qstat -j $JOB_ID for an existing job ID, and looking at the project line near the bottom.","title":"Dedicated nodes"},{"location":"Paid-For_Resources/How_to_Use/#jobscript-additions-for-dedicated-nodes","text":"If the project is not being set by default, for a job to be eligible to run on your nodes you will need to specify your project in your jobscript: # Specify project #$ -P <project> This will allow a job to run on your nodes, but it can also be scheduled on general-use nodes if some are available first. This should be the main way you run jobs. If you need to, you can force jobs to run on your nodes only. This is suitable when you have arranged policies on your nodes that are different from the normal policies (eg. a longer maximum wallclock time), as it means your policies will be in effect instead of the general policies. # Specify paid flag to force running on paid nodes only, with your policies #$ -l paid=1","title":"Jobscript additions for dedicated nodes"},{"location":"Paid-For_Resources/How_to_Use/#check-what-is-running-on-your-nodes","text":"We have a script named whatsonmynode , that runs qhost -j for all the nodes belonging to your project, so you can see which nodes you have, what is running on them and from which user. module load userscripts whatsonmynode <project>","title":"Check what is running on your nodes"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/","text":"Purchasing in Myriad \u00a7 Researchers may purchase additional resources to be used as part of the Myriad High Performance Computing cluster if the free service does not meet their needs. These resources can be made available in one of two ways: Nodes purchased by researchers can be converted into a quarterly allocation of \u201cpriority cycles\u201d equivalent to the amount of computation provided by the nodes, but usable across the whole cluster. We calculate how much time exists on your nodes for three months, and every three months you receive an allocation of that much priority time to use however you want on Myriad (GPU/large memory nodes cost more to use, and give you more if you buy them). We recommend this route. The purchaser may request to buy nodes to be reserved for their group or department, restricting usage to the owned nodes. There may be an additional cost implication to this option (price on application). Costs will include backend infrastructure \u2013 racks, switches, cables etc \u2013 needed to integrate the compute nodes into the facility. Both options can be costed into research proposals. These costs will be stated in an agreed Statement of Work document giving details of the number of each node type to be purchased, which must be approved by ARC and the purchaser before the purchase can go ahead. Deadline \u00a7 The deadline for making requests to purchase Myriad nodes is the end of April. Before this date, researchers wishing to buy compute nodes must approve an agreed Statement of Work and transfer the funds to ARC. We can't place orders after this date because the hardware might not arrive before the end of UCL's financial year. FAQs \u00a7 Can I add the cost of purchasing nodes to a grant application? \u00a7 If you are putting together a grant application and think that you may need to ask for the cost of additional computing resources to be covered, please contact us. We will be able to assess your requirements, recommend appropriate hardware, and then provide an estimate and a supporting statement. Can you give me advice on what hardware to buy? \u00a7 Yes, we\u2019d be happy to discuss this with you. Please contact rc-support@ucl.ac.uk . What type of nodes can we purchase? \u00a7 We currently have three types of node in Myriad, which are well tested and work reliably. These are: Standard compute nodes: 36 Cascade Lake Xeon cores, 192GB RAM GPU nodes: 36 Cascade Lake Xeon cores, 192GB RAM, 4x nVidia A100 High memory: 36 Cascade Lake Xeon cores, 1.5TB RAM If you require an alternative/custom specification, we can\u2019t guarantee that we will be able to accommodate this on the cluster, but we\u2019re happy to look into it. I want to apply for more than \u00a350k worth of equipment, will we have to go through a tender process? \u00a7 No. We have a framework agreement with the vendor which covers all hardware purchases. I know what hardware I need. Can you send me a quote? \u00a7 Even if you know what hardware you need, before we can send you a quote, we will need to agree on a detailed specification. Please email rc-support@ucl.ac.uk with the following information: Budget holder: name and contact details Type and number of nodes you\u2019d like to purchase We will then either send you a specification to approve, or ask to meet to discuss your requirements further. Once this is agreed, we aim to get back to you with a quote within two weeks. How do I manage who has permission to use our nodes/priority queue? \u00a7 When you purchase nodes or priority cycles, we will ask you for a list of usernames of people who have permission to use the resource \u2014 access is managed using access control lists on Myriad. If your list of users is an entire department, we can automatically generate this list nightly. Resource owners or designated resource administrators can request a change of membership of these groups by submitting a ticket in Remedy Force or emailing rc-support@ucl.ac.uk . What is the difference between paying for priority cycles and purchasing dedicated nodes? \u00a7 Priority cycles is the better option for most people as it provides greater flexibility: priority cycles can be used across many nodes at once, and there is an entire allocation period to use them. Dedicated hardware however would need to be in use 24/7 in order to get the most out of it. Researchers might want dedicated nodes if they have particular requirements which mean they can only run their work on their own nodes; e.g., they have purchased non-standard nodes, or the software they are using requires a static licence tied to a particular node. Will my 3-month priority cycle allocation roll over to the next quarter if I don\u2019t use it? \u00a7 No. I want the flexibility of priority cycles, but my funder requires an invoice for specific hardware. \u00a7 Even if you require an invoice for specific hardware, you can still convert the physical hardware into priority cycles. We will add the nodes you purchased to the general pool and give you the equivalent in priority cycles. What happens to nodes I have purchased once they\u2019ve reached the end of warranty? \u00a7 The hardware is run for the life-time of the service, however if you buy dedicated nodes and they run out of warranty, they will not be replaced.","title":"Purchasing in Myriad"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#purchasing-in-myriad","text":"Researchers may purchase additional resources to be used as part of the Myriad High Performance Computing cluster if the free service does not meet their needs. These resources can be made available in one of two ways: Nodes purchased by researchers can be converted into a quarterly allocation of \u201cpriority cycles\u201d equivalent to the amount of computation provided by the nodes, but usable across the whole cluster. We calculate how much time exists on your nodes for three months, and every three months you receive an allocation of that much priority time to use however you want on Myriad (GPU/large memory nodes cost more to use, and give you more if you buy them). We recommend this route. The purchaser may request to buy nodes to be reserved for their group or department, restricting usage to the owned nodes. There may be an additional cost implication to this option (price on application). Costs will include backend infrastructure \u2013 racks, switches, cables etc \u2013 needed to integrate the compute nodes into the facility. Both options can be costed into research proposals. These costs will be stated in an agreed Statement of Work document giving details of the number of each node type to be purchased, which must be approved by ARC and the purchaser before the purchase can go ahead.","title":"Purchasing in Myriad"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#deadline","text":"The deadline for making requests to purchase Myriad nodes is the end of April. Before this date, researchers wishing to buy compute nodes must approve an agreed Statement of Work and transfer the funds to ARC. We can't place orders after this date because the hardware might not arrive before the end of UCL's financial year.","title":"Deadline"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#faqs","text":"","title":"FAQs"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#can-i-add-the-cost-of-purchasing-nodes-to-a-grant-application","text":"If you are putting together a grant application and think that you may need to ask for the cost of additional computing resources to be covered, please contact us. We will be able to assess your requirements, recommend appropriate hardware, and then provide an estimate and a supporting statement.","title":"Can I add the cost of purchasing nodes to a grant application?"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#can-you-give-me-advice-on-what-hardware-to-buy","text":"Yes, we\u2019d be happy to discuss this with you. Please contact rc-support@ucl.ac.uk .","title":"Can you give me advice on what hardware to buy?"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#what-type-of-nodes-can-we-purchase","text":"We currently have three types of node in Myriad, which are well tested and work reliably. These are: Standard compute nodes: 36 Cascade Lake Xeon cores, 192GB RAM GPU nodes: 36 Cascade Lake Xeon cores, 192GB RAM, 4x nVidia A100 High memory: 36 Cascade Lake Xeon cores, 1.5TB RAM If you require an alternative/custom specification, we can\u2019t guarantee that we will be able to accommodate this on the cluster, but we\u2019re happy to look into it.","title":"What type of nodes can we purchase?"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#i-want-to-apply-for-more-than-50k-worth-of-equipment-will-we-have-to-go-through-a-tender-process","text":"No. We have a framework agreement with the vendor which covers all hardware purchases.","title":"I want to apply for more than \u00a350k worth of equipment, will we have to go through a tender process?"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#i-know-what-hardware-i-need-can-you-send-me-a-quote","text":"Even if you know what hardware you need, before we can send you a quote, we will need to agree on a detailed specification. Please email rc-support@ucl.ac.uk with the following information: Budget holder: name and contact details Type and number of nodes you\u2019d like to purchase We will then either send you a specification to approve, or ask to meet to discuss your requirements further. Once this is agreed, we aim to get back to you with a quote within two weeks.","title":"I know what hardware I need. Can you send me a quote?"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#how-do-i-manage-who-has-permission-to-use-our-nodespriority-queue","text":"When you purchase nodes or priority cycles, we will ask you for a list of usernames of people who have permission to use the resource \u2014 access is managed using access control lists on Myriad. If your list of users is an entire department, we can automatically generate this list nightly. Resource owners or designated resource administrators can request a change of membership of these groups by submitting a ticket in Remedy Force or emailing rc-support@ucl.ac.uk .","title":"How do I manage who has permission to use our nodes/priority queue?"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#what-is-the-difference-between-paying-for-priority-cycles-and-purchasing-dedicated-nodes","text":"Priority cycles is the better option for most people as it provides greater flexibility: priority cycles can be used across many nodes at once, and there is an entire allocation period to use them. Dedicated hardware however would need to be in use 24/7 in order to get the most out of it. Researchers might want dedicated nodes if they have particular requirements which mean they can only run their work on their own nodes; e.g., they have purchased non-standard nodes, or the software they are using requires a static licence tied to a particular node.","title":"What is the difference between paying for priority cycles and purchasing dedicated nodes?"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#will-my-3-month-priority-cycle-allocation-roll-over-to-the-next-quarter-if-i-dont-use-it","text":"No.","title":"Will my 3-month priority cycle allocation roll over to the next quarter if I don\u2019t use it?"},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#i-want-the-flexibility-of-priority-cycles-but-my-funder-requires-an-invoice-for-specific-hardware","text":"Even if you require an invoice for specific hardware, you can still convert the physical hardware into priority cycles. We will add the nodes you purchased to the general pool and give you the equivalent in priority cycles.","title":"I want the flexibility of priority cycles, but my funder requires an invoice for specific hardware."},{"location":"Paid-For_Resources/Purchasing_in_Myriad/#what-happens-to-nodes-i-have-purchased-once-theyve-reached-the-end-of-warranty","text":"The hardware is run for the life-time of the service, however if you buy dedicated nodes and they run out of warranty, they will not be replaced.","title":"What happens to nodes I have purchased once they\u2019ve reached the end of warranty?"},{"location":"Software_Guides/ANSYS/","text":"ANSYS \u00a7 License checking Current as of Dec 2021, the -ac app=cfx license check does not work after ANSYS renamed all products and licenses. Remove this line from your jobscripts for the time being or jobs will not be able to start. ANSYS/CFX and ANSYS/Fluent are commercial fluid dynamics packages. The most recent version of ANSYS we have installed on the clusters is ANSYS 2021.R2 including ANSYS/CFX, ANSYS/Fluent, ANSYS Mechanical and the ANSYS Electromagnetics Suite (AnsysEM). Some other products included in the ANSYS Campus Agreement are also available including Autodyn. Older versions of some ANSYS products including ANSYS/CFX and ANSYS/Fluent are also available - 2019.R3, 19.1 for example. However ANSYS Inc changed the way they license their software at the beginning of 2021, causing some products from versions before 2020 to have issues getting a valid license from the lciense server. Before these applications can be run, the user needs to go though a number of set up steps. These are detailed here. To see the versions available, type module avail ansys The desired ANSYS module needs to be loaded by issuing a command like: module load ansys/2021.r2 This will set up various necessary config directories for you. The ANSYS applications are intended to be run primarily within batch jobs however you may run short (less than 5 minutes execution time) interactive tests on the Login Nodes and longer (up to two hours) on an interactive session on a compute node using qrsh. Interactive work can be done using the ANSYS interactive tools provided you have X-windows functionality enabled though your ssh connection. See our User Guide for more information about enabling X-windows functionality and using the qrsh command to start interactive sessions. UCL's campus-wide license covers 125 instances with 512 HPC licenses (for parallel jobs) available for running CFX, Fluent and AnsysEM jobs and in order to make sure that jobs only run if there are licenses available, it is necessary for users to request ANSYS licenses with their jobs, by adding -ac app=cfx to their job submission. ANSYS/CFX \u00a7 CFX handles its own parallelisation, so a number of complex options need to be passed in job scripts to make it run correctly. Example single node multi-threaded ANSYS/CFX jobscript \u00a7 Here is an example runscript for running cfx5solve multi-threaded on a given .def file. #!/bin/bash -l # ANSYS 2021.R2: Batch script to run cfx5solve on the StaticMixer.def example # file, single node multi-threaded (12 threads), # Force bash as the executing shell. #$ -S /bin/bash # Request 15 munutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:15:0 # Request 1 gigabyte of RAM per core. #$ -l mem=1G # Set the name of the job. #$ -N StaticMixer_thread_12 # Select 12 threads. #$ -pe smp 12 # Request ANSYS licences # Dec 2021: comment out this check as not currently working ###$ -ac app=cfx # Set the working directory to somewhere in your scratch space. In this # case the subdirectory cfxtests-2021.R2 #$ -wd /home/<your_UCL_id>/Scratch/cfxtests-2021.R2 # Load the ANSYS module to set up your environment module load ansys/2021.r2 # Copy the .def file into the working (current) directory cp /home/<your userid>/cfx_examples/StaticMixer.def . # Run cfx5solve - Note: -max-elapsed-time needs to be set to the same # time as defined by 2 above. cfx5solve -max-elapsed-time \"15 [min]\" -def StaticMixer.def -par-local -partition $OMP_NUM_THREADS You will need to change the -wd /home/<your_UCL_id>/Scratch/cfxtests-2021.R2 location and may need to change the memory, wallclock time, number of threads and job name directives as well. Replace the .def file with your one and modify the -max-elapsed-time value if needed. The simplest form of qsub command can be used to submit the job eg: qsub run-StaticMixer-thr.sh Output files will be saved in the job's working directory. Example multi-node MPI ANSYS/CFX jobscript \u00a7 Here is an example runscript for running cfx5solve on more than one node (using MPI) on a given .def file. #!/bin/bash -l # ANSYS 2021.R2: Batch script to run cfx5solve on the StaticMixer.def example # file, distributed parallel (80 cores). # Using ANSYS 2021 licence manager running on UCL central licence server. # 1. Force bash as the executing shell. #$ -S /bin/bash # 2. Request one hour of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:60:0 # 3. Request 2 gigabyte of RAM per core. #$ -l mem=2G # 4. Set the name of the job. #$ -N StaticMixer_P_dist_80_NLC # 5. Select the MPI parallel environment and 80 processors. #$ -pe mpi 80 # 6. Request ANSYS licences $ not inserted so currently inactive. Job will queue until # suficient licenses are available when active. # -ac app=cfx # 7. Set the working directory to somewhere in your scratch space. In this # case the subdirectory cfxtests-18.0 #$ -wd /home/<your_UCL_id>/Scratch/cfxtests-2021.R2 # 8. Load the ANSYS module to set up your environment module load ansys/2021.r2 # 9. Copy the .def file into the working (current) directory cp /home/<your_UCL_id>/Software/ANSYS/cfx_examples/StaticMixer.def . # 10. SGE puts the machine file in $TMPDIR/machines. Use this to generate the # string CFX_NODES needed by cfx5solve export CFX_NODES=`cfxnodes $TMPDIR/machines` # 11. Run cfx5solve - Note: -max-elapsed-time needs to be set to the same # time as defined by 2 above. # Run with default MPI. cfx5solve -max-elapsed-time \"60 [min]\" -def StaticMixer.def -par-dist $CFX_NODES Please copy if you wish and edit it to suit your jobs. You will need to change the -wd /home/<your_UCL_userid>/Scratch/cfxtests-19.1 location and may need to change the memory, wallclock time, number of MPI processors and job name directives as well. Replace the .def file with your one and modify the -max-elapsed-time value if needed. The simplest form of qsub command can be used to submit the job eg: qsub run-StaticMixer-par.sh Output files will be saved in the job's working directory. Running CFX with MPI on Myriad \u00a7 The default supplied Intel MPI doesn't work on Myriad. Instead you need to use the supplied IBM MPI. This can be done by adding: -start-method \"IBM MPI Distributed Parallel\" to the cfx5solve command. Also the maximum number of MPI processors you can request is 36. Troubleshooting CFX \u00a7 If you are getting licensing errors when trying to run a parallel job and you have an older version's ~/.ansys/v161/licensing/license.preferences.xml file, delete it. It does not work with the newer license server. (This applies to all older versions, not just v161 ). ANSYS/Fluent \u00a7 Fluent handles its own parallelisation, so a number of complex options need to be passed in job scripts to make it run correctly. The .in file mentioned in the scripts below is a Fluent journal file , giving it the list of commands to carry out in batch mode. Example serial ANSYS/Fluent jobscript \u00a7 Here is an example jobscript for running Fluent in serial mode (1 core). #!/bin/bash -l # ANSYS 2021.R2: Batch script to run ANSYS/fluent in serial mode # (1 core). # Request 2 hours of wallclock time (format hours:minutes:seconds). #$ -l h_rt=2:0:0 # Request 2 gigabytes of RAM. #$ -l mem=2G # Set the name of the job. #$ -N Fluent_ser1 # Request ANSYS licences # Dec 2021: comment out this check as not currently working ###$ -ac app=cfx # Set the working directory to somewhere in your scratch space. In this # case the subdirectory fluent-tests-19.1 #$ -wd /home/<your_UCL_userid>/Scratch/fluent-tests-2021.R2 # Load the ANSYS module to set up your environment module load ansys/2021.r2 # Copy Fluent input files into the working (current) directory cp <path to your input files>/test-1.cas . cp <path to your input files>/test-1.in . # Run fluent in 2D single precision (-g no GUI). For double precision use # 2ddp. For 3D use 3d or 3ddp. fluent 2d -g < test-1.in Please copy if you wish and edit it to suit your jobs. You will need to change the -wd /home/<your_UCL_id>/Scratch/fluent-tests-2021.R2 location and may need to change the memory, wallclock time, and job name as well. Replace the .cas and .in files with your ones. The simplest form of qsub command can be used to submit the job eg: qsub run-ANSYS-fluent-ser.sh Output files will be saved in the job's working directory. Example parallel (MPI) ANSYS/Fluent jobscript \u00a7 Here is an example runscript for running Fluent in parallel potentially across more than one node. #!/bin/bash -l # ANSYS 2021.R2: Batch script to run ANSYS/fluent distributed parallel # (80 cores). # Request 2 hours of wallclock time (format hours:minutes:seconds). #$ -l h_rt=2:0:0 # Request 2 gigabytes of RAM per core. #$ -l mem=2G # Set the name of the job. #$ -N Fluent_par80 # Select the MPI parallel environment and 80 processors. #$ -pe mpi 80 # Request 25 Gb TMPDIR space (if on a cluster that supports this) #$ -l tmpfs=25G # Request ANSYS licences # Dec 2021: comment out this check as not currently working ###$ -ac app=cfx # Set the working directory to somewhere in your scratch space. In this # case the subdirectory fluent-tests-19.1 #$ -wd /home/<your_UCL_userid>/Scratch/fluent-tests-2021.R2 # Load the ANSYS module to set up your environment module load ansys/2021.r2 # Copy Fluent input files into the working (current) directory cp <path to your input files>/test-1.cas . cp <path to your input files>/test-1.in . # Run fluent in 3D single precision (-g no GUI). For double precision use # 3ddp. For 2D use 2d or 2ddp. # Do not change -t, -mpi, -pinfiniband and -cnf options. fluent 3ddp -t$NSLOTS -mpi=intelmpi -cnf=$TMPDIR/machines -g < test-1.in Please copy if you wish and edit it to suit your jobs. You will need to change the -wd /home/<your_UCL_id>/Scratch/fluent-tests-2021.r2 location and may need to change the memory, wallclock time, number of MPI processors and job name as well. Replace the .cas and .in files with your ones. The simplest form of qsub command can be used to submit the job eg: qsub run-ANSYS-fluent-par-80.sh Output files will be saved in the job's working directory. If you want to use IBM Platform MPI instead of Intel MPI, then replace the -mpi=intelmpi with -mpi=ibmmpi . Troubleshooting Fluent \u00a7 If you are getting licensing errors when trying to run a parallel job and you have an older version's ~/.ansys/v161/licensing/license.preferences.xml file, delete it. It does not work with the newer license server. (This applies to all older versions, not just v161 ). Fluent 14 required -mpi=pcmpi -pinfiniband in the parallel options: if you have older scripts remember to remove this. ANSYS Mechanical \u00a7 ANSYS Mechanical handles its own parallelisation, and needs an additional setting to work on our clusters. It also only appears to work with Intel MPI. Here is an example jobscript for running in parallel potentially across more than one node, for example on the Kathleen cluster. #!/bin/bash -l # ANSYS 2021.R2: Batch script to run ANSYS Mechanical solver # file, distributed parallel (80 cores). # Using ANSYS 2021.R2 licence manager running on UCL central licence server. # Force bash as the executing shell. #$ -S /bin/bash # Request one hour of wallclock time (format hours:minutes:seconds). #$ -l h_rt=1:00:0 # Request 2 gigabyte of RAM per core. (Must be an integer) #$ -l mem=2G # Set the name of the job. #$ -N Mech_P_dist_80 # Select the MPI parallel environment and 80 processors. #$ -pe mpi 80 # Request ANSYS licences $ inserted so currently active.Job will queue until # suficient licences are available. # Dec 2021: comment out this check as not currently working ###$ -ac app=cfx # Set the working directory to somewhere in your scratch space. In this # case the subdirectory ANSYS_Mech #$ -wd /home/<your_UCL_username>/Scratch/ANSYS_Mech # Load the ANSYS module to set up your environment module load ansys/2021.r2 # Copy the .in file into the working (current) directory cp ~/ANSYS/steady_state_input_file.dat . # 10. SGE puts the machine file in $TMPDIR/machines. Use this to generate the # string CFX_NODES needed by ansys195 which requires : as the separator. export CFX_NODES=`cfxnodes_cs $TMPDIR/machines` echo $CFX_NODES # Need to set KMP_AFFINTY to get round error: OMP: System error #22: Invalid argument export KMP_AFFINITY=disabled # Run ansys mechanical - Note: use ansys195 instead of ansys and -p argument # needed to switch to a valid UCL license. ansys212 -dis -mpi intelmpi -machines $CFX_NODES -b < steady_state_input_file.dat Please copy if you wish and edit it to suit your jobs. You will need to change the -wd /home/<your_UCL_id>/Scratch/ANSYS_Mech location and may need to change the memory, wallclock time, number of MPI processors and job name as well. Replace the .dat file with your one. The simplest form of qsub command can be used to submit the job eg: qsub ansys-mech-2021.R2-ex.sh Output files will be saved in the job's working directory. If you have access to Kathleen, this test input and jobscript are available at /home/ccaabaa/Software/ANSYS/steady_state_input_file.dat and /home/ccaabaa/Software/ANSYS/ansys-mech-2021.R2-ex.sh ANSYS Electromagnetic Suite (AnsysEM) \u00a7 The AnsysEM products handle their own parallelisation so a number of complex options need to be passed in job scripts to make it run correctly. Also additional module commands are required. Here is an example jobscript for running in parallel potentially across more than one node, for example on the Kathleen cluster. #!/bin/bash -l # AnsysEM 2021 R2: Batch script to run one of the Ansys Electromagnetics Products # example simulations on Kathleen - distributed parallel (80 cores) # 1. Force bash as the executing shell. #$ -S /bin/bash # 2. Request one hour of wallclock time (format hours:minutes:seconds). #$ -l h_rt=1:00:0 # 3. Request 2 gigabyte of RAM per core. #$ -l mem=2G # 4. Set the name of the job. #$ -N DiffSL_P_dist_80 # 5. Select the MPI parallel environment and 80 processors - two nodes. #$ -pe mpi 80 # 7. Request ANSYS licences $ inserted so currently active. Job will queue until # suficient licenses are available. Not currently active. # -ac app=cfx # 8. Set the working directory to somewhere in your scratch space. In this # case the directory the job was submitted from, #$ -cwd # 9. Load the ANSYS module to set up your environment module load ansys/2021.r2 module load xorg-utils/X11R7.7 module load giflib/5.1.1 # 10. Run ansysedt ansysedt -ng -Distributed -machinelist num=$NSLOTS -batchoptions 'HFSS/MPIVendor'='Intel' -batchoptions 'TempDirectory'=\"${TMPDIR}\" -batchoptions 'HFSS/HPCLicenseType'='pool' -batchoptions 'HFSS-IE/HPCLicenseType'='pool' -BatchSolve differential_stripline.aedt","title":"ANSYS"},{"location":"Software_Guides/ANSYS/#ansys","text":"License checking Current as of Dec 2021, the -ac app=cfx license check does not work after ANSYS renamed all products and licenses. Remove this line from your jobscripts for the time being or jobs will not be able to start. ANSYS/CFX and ANSYS/Fluent are commercial fluid dynamics packages. The most recent version of ANSYS we have installed on the clusters is ANSYS 2021.R2 including ANSYS/CFX, ANSYS/Fluent, ANSYS Mechanical and the ANSYS Electromagnetics Suite (AnsysEM). Some other products included in the ANSYS Campus Agreement are also available including Autodyn. Older versions of some ANSYS products including ANSYS/CFX and ANSYS/Fluent are also available - 2019.R3, 19.1 for example. However ANSYS Inc changed the way they license their software at the beginning of 2021, causing some products from versions before 2020 to have issues getting a valid license from the lciense server. Before these applications can be run, the user needs to go though a number of set up steps. These are detailed here. To see the versions available, type module avail ansys The desired ANSYS module needs to be loaded by issuing a command like: module load ansys/2021.r2 This will set up various necessary config directories for you. The ANSYS applications are intended to be run primarily within batch jobs however you may run short (less than 5 minutes execution time) interactive tests on the Login Nodes and longer (up to two hours) on an interactive session on a compute node using qrsh. Interactive work can be done using the ANSYS interactive tools provided you have X-windows functionality enabled though your ssh connection. See our User Guide for more information about enabling X-windows functionality and using the qrsh command to start interactive sessions. UCL's campus-wide license covers 125 instances with 512 HPC licenses (for parallel jobs) available for running CFX, Fluent and AnsysEM jobs and in order to make sure that jobs only run if there are licenses available, it is necessary for users to request ANSYS licenses with their jobs, by adding -ac app=cfx to their job submission.","title":"ANSYS"},{"location":"Software_Guides/ANSYS/#ansyscfx","text":"CFX handles its own parallelisation, so a number of complex options need to be passed in job scripts to make it run correctly.","title":"ANSYS/CFX"},{"location":"Software_Guides/ANSYS/#example-single-node-multi-threaded-ansyscfx-jobscript","text":"Here is an example runscript for running cfx5solve multi-threaded on a given .def file. #!/bin/bash -l # ANSYS 2021.R2: Batch script to run cfx5solve on the StaticMixer.def example # file, single node multi-threaded (12 threads), # Force bash as the executing shell. #$ -S /bin/bash # Request 15 munutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:15:0 # Request 1 gigabyte of RAM per core. #$ -l mem=1G # Set the name of the job. #$ -N StaticMixer_thread_12 # Select 12 threads. #$ -pe smp 12 # Request ANSYS licences # Dec 2021: comment out this check as not currently working ###$ -ac app=cfx # Set the working directory to somewhere in your scratch space. In this # case the subdirectory cfxtests-2021.R2 #$ -wd /home/<your_UCL_id>/Scratch/cfxtests-2021.R2 # Load the ANSYS module to set up your environment module load ansys/2021.r2 # Copy the .def file into the working (current) directory cp /home/<your userid>/cfx_examples/StaticMixer.def . # Run cfx5solve - Note: -max-elapsed-time needs to be set to the same # time as defined by 2 above. cfx5solve -max-elapsed-time \"15 [min]\" -def StaticMixer.def -par-local -partition $OMP_NUM_THREADS You will need to change the -wd /home/<your_UCL_id>/Scratch/cfxtests-2021.R2 location and may need to change the memory, wallclock time, number of threads and job name directives as well. Replace the .def file with your one and modify the -max-elapsed-time value if needed. The simplest form of qsub command can be used to submit the job eg: qsub run-StaticMixer-thr.sh Output files will be saved in the job's working directory.","title":"Example single node multi-threaded ANSYS/CFX jobscript"},{"location":"Software_Guides/ANSYS/#example-multi-node-mpi-ansyscfx-jobscript","text":"Here is an example runscript for running cfx5solve on more than one node (using MPI) on a given .def file. #!/bin/bash -l # ANSYS 2021.R2: Batch script to run cfx5solve on the StaticMixer.def example # file, distributed parallel (80 cores). # Using ANSYS 2021 licence manager running on UCL central licence server. # 1. Force bash as the executing shell. #$ -S /bin/bash # 2. Request one hour of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:60:0 # 3. Request 2 gigabyte of RAM per core. #$ -l mem=2G # 4. Set the name of the job. #$ -N StaticMixer_P_dist_80_NLC # 5. Select the MPI parallel environment and 80 processors. #$ -pe mpi 80 # 6. Request ANSYS licences $ not inserted so currently inactive. Job will queue until # suficient licenses are available when active. # -ac app=cfx # 7. Set the working directory to somewhere in your scratch space. In this # case the subdirectory cfxtests-18.0 #$ -wd /home/<your_UCL_id>/Scratch/cfxtests-2021.R2 # 8. Load the ANSYS module to set up your environment module load ansys/2021.r2 # 9. Copy the .def file into the working (current) directory cp /home/<your_UCL_id>/Software/ANSYS/cfx_examples/StaticMixer.def . # 10. SGE puts the machine file in $TMPDIR/machines. Use this to generate the # string CFX_NODES needed by cfx5solve export CFX_NODES=`cfxnodes $TMPDIR/machines` # 11. Run cfx5solve - Note: -max-elapsed-time needs to be set to the same # time as defined by 2 above. # Run with default MPI. cfx5solve -max-elapsed-time \"60 [min]\" -def StaticMixer.def -par-dist $CFX_NODES Please copy if you wish and edit it to suit your jobs. You will need to change the -wd /home/<your_UCL_userid>/Scratch/cfxtests-19.1 location and may need to change the memory, wallclock time, number of MPI processors and job name directives as well. Replace the .def file with your one and modify the -max-elapsed-time value if needed. The simplest form of qsub command can be used to submit the job eg: qsub run-StaticMixer-par.sh Output files will be saved in the job's working directory.","title":"Example multi-node MPI ANSYS/CFX jobscript"},{"location":"Software_Guides/ANSYS/#running-cfx-with-mpi-on-myriad","text":"The default supplied Intel MPI doesn't work on Myriad. Instead you need to use the supplied IBM MPI. This can be done by adding: -start-method \"IBM MPI Distributed Parallel\" to the cfx5solve command. Also the maximum number of MPI processors you can request is 36.","title":"Running CFX with MPI on Myriad"},{"location":"Software_Guides/ANSYS/#troubleshooting-cfx","text":"If you are getting licensing errors when trying to run a parallel job and you have an older version's ~/.ansys/v161/licensing/license.preferences.xml file, delete it. It does not work with the newer license server. (This applies to all older versions, not just v161 ).","title":"Troubleshooting CFX"},{"location":"Software_Guides/ANSYS/#ansysfluent","text":"Fluent handles its own parallelisation, so a number of complex options need to be passed in job scripts to make it run correctly. The .in file mentioned in the scripts below is a Fluent journal file , giving it the list of commands to carry out in batch mode.","title":"ANSYS/Fluent"},{"location":"Software_Guides/ANSYS/#example-serial-ansysfluent-jobscript","text":"Here is an example jobscript for running Fluent in serial mode (1 core). #!/bin/bash -l # ANSYS 2021.R2: Batch script to run ANSYS/fluent in serial mode # (1 core). # Request 2 hours of wallclock time (format hours:minutes:seconds). #$ -l h_rt=2:0:0 # Request 2 gigabytes of RAM. #$ -l mem=2G # Set the name of the job. #$ -N Fluent_ser1 # Request ANSYS licences # Dec 2021: comment out this check as not currently working ###$ -ac app=cfx # Set the working directory to somewhere in your scratch space. In this # case the subdirectory fluent-tests-19.1 #$ -wd /home/<your_UCL_userid>/Scratch/fluent-tests-2021.R2 # Load the ANSYS module to set up your environment module load ansys/2021.r2 # Copy Fluent input files into the working (current) directory cp <path to your input files>/test-1.cas . cp <path to your input files>/test-1.in . # Run fluent in 2D single precision (-g no GUI). For double precision use # 2ddp. For 3D use 3d or 3ddp. fluent 2d -g < test-1.in Please copy if you wish and edit it to suit your jobs. You will need to change the -wd /home/<your_UCL_id>/Scratch/fluent-tests-2021.R2 location and may need to change the memory, wallclock time, and job name as well. Replace the .cas and .in files with your ones. The simplest form of qsub command can be used to submit the job eg: qsub run-ANSYS-fluent-ser.sh Output files will be saved in the job's working directory.","title":"Example serial ANSYS/Fluent jobscript"},{"location":"Software_Guides/ANSYS/#example-parallel-mpi-ansysfluent-jobscript","text":"Here is an example runscript for running Fluent in parallel potentially across more than one node. #!/bin/bash -l # ANSYS 2021.R2: Batch script to run ANSYS/fluent distributed parallel # (80 cores). # Request 2 hours of wallclock time (format hours:minutes:seconds). #$ -l h_rt=2:0:0 # Request 2 gigabytes of RAM per core. #$ -l mem=2G # Set the name of the job. #$ -N Fluent_par80 # Select the MPI parallel environment and 80 processors. #$ -pe mpi 80 # Request 25 Gb TMPDIR space (if on a cluster that supports this) #$ -l tmpfs=25G # Request ANSYS licences # Dec 2021: comment out this check as not currently working ###$ -ac app=cfx # Set the working directory to somewhere in your scratch space. In this # case the subdirectory fluent-tests-19.1 #$ -wd /home/<your_UCL_userid>/Scratch/fluent-tests-2021.R2 # Load the ANSYS module to set up your environment module load ansys/2021.r2 # Copy Fluent input files into the working (current) directory cp <path to your input files>/test-1.cas . cp <path to your input files>/test-1.in . # Run fluent in 3D single precision (-g no GUI). For double precision use # 3ddp. For 2D use 2d or 2ddp. # Do not change -t, -mpi, -pinfiniband and -cnf options. fluent 3ddp -t$NSLOTS -mpi=intelmpi -cnf=$TMPDIR/machines -g < test-1.in Please copy if you wish and edit it to suit your jobs. You will need to change the -wd /home/<your_UCL_id>/Scratch/fluent-tests-2021.r2 location and may need to change the memory, wallclock time, number of MPI processors and job name as well. Replace the .cas and .in files with your ones. The simplest form of qsub command can be used to submit the job eg: qsub run-ANSYS-fluent-par-80.sh Output files will be saved in the job's working directory. If you want to use IBM Platform MPI instead of Intel MPI, then replace the -mpi=intelmpi with -mpi=ibmmpi .","title":"Example parallel (MPI) ANSYS/Fluent jobscript"},{"location":"Software_Guides/ANSYS/#troubleshooting-fluent","text":"If you are getting licensing errors when trying to run a parallel job and you have an older version's ~/.ansys/v161/licensing/license.preferences.xml file, delete it. It does not work with the newer license server. (This applies to all older versions, not just v161 ). Fluent 14 required -mpi=pcmpi -pinfiniband in the parallel options: if you have older scripts remember to remove this.","title":"Troubleshooting Fluent"},{"location":"Software_Guides/ANSYS/#ansys-mechanical","text":"ANSYS Mechanical handles its own parallelisation, and needs an additional setting to work on our clusters. It also only appears to work with Intel MPI. Here is an example jobscript for running in parallel potentially across more than one node, for example on the Kathleen cluster. #!/bin/bash -l # ANSYS 2021.R2: Batch script to run ANSYS Mechanical solver # file, distributed parallel (80 cores). # Using ANSYS 2021.R2 licence manager running on UCL central licence server. # Force bash as the executing shell. #$ -S /bin/bash # Request one hour of wallclock time (format hours:minutes:seconds). #$ -l h_rt=1:00:0 # Request 2 gigabyte of RAM per core. (Must be an integer) #$ -l mem=2G # Set the name of the job. #$ -N Mech_P_dist_80 # Select the MPI parallel environment and 80 processors. #$ -pe mpi 80 # Request ANSYS licences $ inserted so currently active.Job will queue until # suficient licences are available. # Dec 2021: comment out this check as not currently working ###$ -ac app=cfx # Set the working directory to somewhere in your scratch space. In this # case the subdirectory ANSYS_Mech #$ -wd /home/<your_UCL_username>/Scratch/ANSYS_Mech # Load the ANSYS module to set up your environment module load ansys/2021.r2 # Copy the .in file into the working (current) directory cp ~/ANSYS/steady_state_input_file.dat . # 10. SGE puts the machine file in $TMPDIR/machines. Use this to generate the # string CFX_NODES needed by ansys195 which requires : as the separator. export CFX_NODES=`cfxnodes_cs $TMPDIR/machines` echo $CFX_NODES # Need to set KMP_AFFINTY to get round error: OMP: System error #22: Invalid argument export KMP_AFFINITY=disabled # Run ansys mechanical - Note: use ansys195 instead of ansys and -p argument # needed to switch to a valid UCL license. ansys212 -dis -mpi intelmpi -machines $CFX_NODES -b < steady_state_input_file.dat Please copy if you wish and edit it to suit your jobs. You will need to change the -wd /home/<your_UCL_id>/Scratch/ANSYS_Mech location and may need to change the memory, wallclock time, number of MPI processors and job name as well. Replace the .dat file with your one. The simplest form of qsub command can be used to submit the job eg: qsub ansys-mech-2021.R2-ex.sh Output files will be saved in the job's working directory. If you have access to Kathleen, this test input and jobscript are available at /home/ccaabaa/Software/ANSYS/steady_state_input_file.dat and /home/ccaabaa/Software/ANSYS/ansys-mech-2021.R2-ex.sh","title":"ANSYS Mechanical"},{"location":"Software_Guides/ANSYS/#ansys-electromagnetic-suite-ansysem","text":"The AnsysEM products handle their own parallelisation so a number of complex options need to be passed in job scripts to make it run correctly. Also additional module commands are required. Here is an example jobscript for running in parallel potentially across more than one node, for example on the Kathleen cluster. #!/bin/bash -l # AnsysEM 2021 R2: Batch script to run one of the Ansys Electromagnetics Products # example simulations on Kathleen - distributed parallel (80 cores) # 1. Force bash as the executing shell. #$ -S /bin/bash # 2. Request one hour of wallclock time (format hours:minutes:seconds). #$ -l h_rt=1:00:0 # 3. Request 2 gigabyte of RAM per core. #$ -l mem=2G # 4. Set the name of the job. #$ -N DiffSL_P_dist_80 # 5. Select the MPI parallel environment and 80 processors - two nodes. #$ -pe mpi 80 # 7. Request ANSYS licences $ inserted so currently active. Job will queue until # suficient licenses are available. Not currently active. # -ac app=cfx # 8. Set the working directory to somewhere in your scratch space. In this # case the directory the job was submitted from, #$ -cwd # 9. Load the ANSYS module to set up your environment module load ansys/2021.r2 module load xorg-utils/X11R7.7 module load giflib/5.1.1 # 10. Run ansysedt ansysedt -ng -Distributed -machinelist num=$NSLOTS -batchoptions 'HFSS/MPIVendor'='Intel' -batchoptions 'TempDirectory'=\"${TMPDIR}\" -batchoptions 'HFSS/HPCLicenseType'='pool' -batchoptions 'HFSS-IE/HPCLicenseType'='pool' -BatchSolve differential_stripline.aedt","title":"ANSYS Electromagnetic Suite (AnsysEM)"},{"location":"Software_Guides/Installing_Software/","text":"Installing software \u00a7 If you want to request that software be installed centrally, you can email us at rc-support@ucl.ac.uk. When you send in a request please address the following questions so that the install can be properly prioitised and planned, Can you provide some details as to why and give an idea of the timeline you would like us to build it in? Do you have an idea of the user base for this software within your community? If you are asking for some software on the MMM machines this can be the wider community and for UCL machines users in your ecosystem. If the software is only required by you would you be open to trying to install the software in your home space? We can provide some assistance here if you tell us what problems you are encountering. The requests will be added to the issues in our buildscripts repository . The buildscripts themselves are there too, so you can see how we built and installed our central software stack. You can install software yourself in your space on the cluster. Below are some tips for installing packages for languages such as Python or Perl as well as compiling software. No sudo! \u00a7 You cannot install anything using sudo (and neither can we!). If the instructions tell you to do that, read further to see if they also have instructions for installing in user space, or for doing an install from source if they are RPMs. Alternatively, just leave off the sudo from the command they tell you to run and look for an alternative way to give it an install location if it tries to install somewhere that isn't in your space (examples for some common build systems are below). Download source code \u00a7 Use wget or curl to download the source code for the software you want to install to your account on the cluster. You can use tar to extract source archives named like tar.gz or .tgz or .tar.bz2 among others and unzip for .zip files. xz --decompress will expand .xz files. wget https://www.example.com/program.tar.gz tar -xvf program.tar.gz You will not be able to use a package manager like yum , and will need to follow the manual installation instructions for a user-space install (not using sudo ). Set up modules \u00a7 Before you start compiling, you need to make sure you have the right compilers, libraries and other tools available for your software. If you haven't changed anything, you will have the default modules loaded. Check what the instructions for your software tell you about compiling it. If the website doesn't say much, the source code will hopefully have a README or INSTALL file. You may want to use a different compiler - the default is the Intel compiler. module avail compilers will show you all the compiler modules available. Most Open Source software tends to assume you're using GCC and OpenMPI (if it uses MPI) and is most tested with that combination, so if it doesn't tell you otherwise you may want to begin there (do check what the newest modules available are - the below is correct at time of writing): # unload your current compiler and mpi modules module unload compilers mpi # load the GNU compiler and OpenMPI module load compilers/gnu/4.9.2 module load mpi/openmpi/4.0.3/gnu-4.9.2 Newer versions of GCC and GLIBCXX \u00a7 The software you want to run may require newer compilers or a precompiled binary may say that it needs a newer GLIBCXX to be able to run. You can access these as follows: # make all the newer versions visible module load beta-modules # unload current compiler, mpi and gcc-libs modules module unload -f compilers mpi gcc-libs # load GCC 10.2.0 module load gcc-libs/10.2.0 module load compilers/gnu/10.2.0 The gcc-libs module contains the actual compiler and libraries, while the compilers/gnu module sets environment variables that are likely to be picked up by build systems, telling them what the C, C++ and Fortran compilers are called. GLIBC version error \u00a7 If you get an error saying that a precompiled binary that you are installing needs a newer GLIBC (not GLIBCXX) then this has been compiled on a newer operating system and will not work on our clusters. Look for a binary that was created for CentOS 7 (we have RHEL 7) or build the program from source if possible. Build systems \u00a7 Most software will use some kind of build system to manage how files are compiled and linked and in what order. Here are a few common ones. Automake configure \u00a7 Automake will generate the Makefile for you and hopefully pick up sensible options through configuration. You can give it an install prefix to tell it where to install (or you can build it in place and not use make install at all). ./configure --prefix=/home/username/place/you/want/to/install make # if it has a test suite, good idea to use it make test make install If it has more configuration flags, you can use ./configure --help to view them. Usually configure will create a config.log: you can look in there to find if any tests have failed or things you think should have been picked up haven't. CMake \u00a7 CMake is another build system. It will have a CMakeFile or the instructions will ask you to use cmake or ccmake rather than make. It also generates Makefiles for you. ccmake is a terminal-based interactive interface where you can see what variables are set to and change them, then repeatedly configure until everything is correct, generate the Makefile and quit. cmake is the commandline version. The interactive process tends to go like this: ccmake CMakeLists.txt # press c to configure - will pick up some options # press t to toggle advanced options # keep making changes and configuring until no more errors or changes # press g to generate and exit make # if it has a test suite, good idea to use it make test make install The options that you set using ccmake can also be passed on the commandline to cmake with -D . This allows you to script an install and run it again later. CMAKE_INSTALL_PREFIX is how you tell it where to install. # making a build directory allows you to clean it up more easily mkdir build cd build cmake .. -DCMAKE_INSTALL_PREFIX=/home/username/place/you/want/to/install If you need to rerun cmake/ccmake and reconfigure, remember to delete the CMakeCache.txt file first or it will still use your old options. Turning on verbose Makefiles in cmake is also useful if your code didn't compile first time - you'll be able to see what flags the compiler or linker is actually being given when it fails. Make \u00a7 Your code may come with a Makefile and have no configure, in which case the generic way to compile it is as follows: make targetname There's usually a default target, which make on its own will use. make all is also frequently used. If you need to change any configuration options, you'll need to edit those sections of the Makefile (usually near the top, where the variables/flags are defined). Here are some typical variables you may want to change in a Makefile. These are what compilers/mpi wrappers to use - these are also defined by the compiler modules, so you can see what they should be. Intel would be icc , icpc , ifort , while the GNU compiler would be gcc , g++ , gfortran . If this is a program that can be compiled using MPI and only has a variable for CC, then set that to mpicc. CC=gcc CXX=g++ FC=gfortran MPICC=mpicc MPICXX=mpicxx MPIF90=mpif90 CFLAGS and LDFLAGS are flags for the compiler and linker respectively, and there might be LIBS or INCLUDE in the Makefile as well. When linking a library with the name libfoo, use -lfoo . CFLAGS=\"-I/path/to/include\" LDFLAGS=\"-L/path/to/foo/lib -L/path/to/bar/lib\" LDLIBS=\"-lfoo -lbar\" Remember to make clean first if you are recompiling with new options. This will delete object files from previous attempts. BLAS and LAPACK \u00a7 BLAS and LAPACK are linear algebra libraries that are provided as part of MKL, OpenBLAS or ATLAS. There are several different OpenBLAS and ATLAS modules for different compilers. MKL is available as part of each Intel compiler module. Your code may try to link -lblas -llapack : this isn't the right way to use BLAS and LAPACK with MKL or ATLAS (though our OpenBLAS now has symlinks that mean this will work). MKL \u00a7 When you have an Intel compiler module loaded, typing echo $MKLROOT will show you that MKL is available. Easy linking of MKL \u00a7 If you can, try to use -mkl as a compiler flag - if that works, it should get all the correct libraries linked in the right order. Some build systems do not work with this however and need explicit linking. Intel MKL link line advisor \u00a7 It can be complicated to get the correct link line for MKL, so Intel has provided a tool which will give you the link line with the libraries in the right order. https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor Pick the version of MKL you are using (for the Intel 2018 compiler it should be Intel(R) MKL 2018.0), and these options: OS: Linux Pick your compiler. BLAS and LAPACK are Fortran95 interfaces, to select them pick a Fortran compiler. Architecture: Intel(R) 64 You can choose what type of linking you prefer. Dynamic linking means the libraries are linked at runtime and use the .so library, while static means they are linked at compile time and use the .a library. The Single Dynamic Library for later MKL versions will mean MKL will do clever things to work out which parts of it you are using. Interface layer: 64-bit integer Threading layer: You probably want sequential threading in most cases. Select additional libraries (ScaLAPACK) if required. Select Intel MPI if required. Select 'Link with Intel MKL libraries explicitly' You'll get something like this: ${MKLROOT}/lib/intel64/libmkl_blas95_ilp64.a ${MKLROOT}/lib/intel64/libmkl_lapack95_ilp64.a -L${MKLROOT}/lib/intel64 -lmkl_scalapack_ilp64 -lmkl_intel_ilp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_ilp64 -lpthread -lm -ldl and compiler options: -i8 -I${MKLROOT}/include/intel64/ilp64 -I${MKLROOT}/include It is a good idea to double check the library locations given by the tool are correct: do an ls ${MKLROOT}/lib/intel64 and make sure the directory exists and contains the libraries. In the past there have been slight path differences between tool and install for some versions. OpenBLAS \u00a7 We have native threads, OpenMP and serial versions of OpenBLAS. Type module avail openblas to see the available versions. Linking OpenBLAS \u00a7 Our OpenBLAS modules now contain symlinks for libblas and liblapack that both point to libopenblas . This means that the default -lblas -llapack will in fact work. This is how you would normally link OpenBLAS: -L${OPENBLASROOT}/lib -lopenblas If code you are compiling requires separate entries for BLAS and LAPACK, set them both to -lopenblas . Troubleshooting: OpenMP loop warning \u00a7 If you are running a threaded program and get this warning: OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option. Then tell OpenBLAS to use only one thread by adding the below to your jobscript (this overrides $OMP_NUM_THREADS for OpenBLAS only): export OPENBLAS_NUM_THREADS=1 If it is your own code, you can also set it in the code with the function void openblas_set_num_threads(int num_threads); You can avoid this error by compiling with one of the native-threads or serial OpenBLAS modules instead of the openmp one. ATLAS \u00a7 We would generally recommend using OpenBLAS instead at present, but we do have ATLAS modules. Dynamic linking ATLAS \u00a7 There is one combined library each for serial and threaded ATLAS (in most circumstances you probably want the serial version). Serial: -L${ATLASROOT}/lib -lsatlas Threaded: -L${ATLASROOT}/lib -ltatlas Static linking ATLAS \u00a7 There are multiple libraries to link. Serial: -L${ATLASROOT}/lib -llapack -lf77blas -lcblas -latlas Threaded: -L${ATLASROOT}/lib -llapack -lptf77blas -lptcblas -latlas Troubleshooting: libgfortran or lifcore cannot be found \u00a7 If you get a runtime error saying that libgfortran.so cannot be found, you need to add -lgfortran to your link line. The Intel equivalent is -lifcore . You can do a module show on the compiler module you are using to see where the Fortran libraries are located if you need to give a full path to them. Installing additional packages for an existing scripting language \u00a7 Python \u00a7 There are python2/recommended and python3/recommended module bundles you will see if you type module avail python . These use a virtualenv, have a lot of Python packages installed already, like numpy and scipy (see the Python package list ) and have pip set up for you. Load the GNU compiler \u00a7 Our Python installs were built with GCC. You can run them without problems with the default Intel compilers loaded because it also depends on the gcc-libs/4.9.2 module. However, when you are installing your own Python packages you should make sure you have the GNU compiler module loaded. This is to avoid the situation where you build your package with the Intel compiler and then try to run it with our GNU-based Python. If it compiled any C code, it will be unable to find Intel-specific instructions and give you errors. Change your compiler module: module unload compilers module load compilers/gnu/4.9.2 If you get an error like this when trying to run something, you built a package with the Intel compiler. undefined symbol: __intel_sse2_strrchr Install your own packages in the same virtualenv \u00a7 This will use our central virtualenv and the packages we have already installed. # for Python 2 pip install --user <python2pkg> # for Python 3 pip3 install --user <python3pkg> These will install into .python2local or .python3local in your home directory. If your own installed Python packages get into a mess, you can delete (or rename) the whole .python3local and start again. Using your own virtualenv \u00a7 If you need different packages that are not compatible with the centrally installed versions (eg. what you are trying to install depends on a different version of something we have already installed) then you can create a new virtualenv and only packages you are installing yourself will be in it. In this case, you do not want our virtualenv with our packages to also be active. We have two types of Python modules. If you type module avail python there are \"bundles\" which are named like python3/3.7 - these include our virtualenv and packages. Then there are the base modules for just python itself, like python/3.7.4 . When using your own virtualenv, you want to load one of the base python modules. # load a base python module (you will always need to do this) module load python/3.7.4 # create the new virtualenv, with any name you want virtualenv <DIR> # activate it source <DIR>/bin/activate Your bash prompt will change to show you that a different virtualenv is active. (This one is called venv ). (venv) [uccacxx@login03 ~]$ deactivate will deactivate your virtualenv and your prompt will return to normal. You only need to create the virtualenv the first time. Error while loading shared libraries \u00a7 You will always need to load the base python module before activating your virtualenv or you will get an error like this: python3: error while loading shared libraries: libpython3.7m.so.1.0: cannot open shared object file: No such file or directory Installing via setup.py \u00a7 If you need to install by downloading a package and using setup.py , you can use the --user flag and as long as one of our python module bundles are loaded, it will install into the same .python2local or .python3local as pip does and your packages will be found automatically. python setup.py install --user If you want to install to a different directory in your space to keep this package separate, you can use --prefix instead. You'll need to add that location to your $PYTHONPATH and $PATH as well so it can be found. Some install methods won't create the prefix directory you requested for you automatically, so you would need to create it yourself first. This type of install makes it easier for you to only have this package in your paths when you want to use it, which is helpful if it conflicts with something else. # add location to PYTHONPATH so Python can find it export PYTHONPATH=/home/username/your/path/lib/python3.7/site-packages:$PYTHONPATH # if necessary, create lib/pythonx.x/site-packages in your desired install location mkdir -p /home/username/your/path/lib/python3.7/site-packages # do the install python setup.py install --prefix=/home/username/your/path It will tend to tell you at install time if you need to change or create the $PYTHONPATH directory. To use this package, you'll need to add it to your paths in your jobscript or .bashrc . Check that the PATH is where your Python executables were installed. export PYTHONPATH=/home/username/your/path/lib/python3.7/site-packages:$PYTHONPATH export PATH=/home/username/your/path/bin:$PATH It is very important that you keep the :$PYTHONPATH or :$PATH at the end of these - you are putting your location at the front of the existing contents of the path. If you leave them out, then only your package location will be found and nothing else. Troubleshooting: remove your pip cache \u00a7 If you built something and it went wrong, and are trying to reinstall it with pip and keep getting errors that you think you should have fixed, you may still be using a previous cached version. The cache is in .cache/pip in your home directory, and you can delete it. You can prevent caching entirely by installing using pip3 install --user --no-cache-dir <python3pkg> Troubleshooting: Python script executable paths \u00a7 If you have an executable Python script (eg. something you run using pyutility and not python pyutility.py ) that begins like this: #!/usr/bin/python2.6 and fails because that Python doesn't exist in that location or isn't the one that has the additional packages installed, then you should change it so it uses the first Python found in your environment instead, which will be the one from the Python module you've loaded. #!/usr/bin/env python","title":"Installing Software"},{"location":"Software_Guides/Installing_Software/#installing-software","text":"If you want to request that software be installed centrally, you can email us at rc-support@ucl.ac.uk. When you send in a request please address the following questions so that the install can be properly prioitised and planned, Can you provide some details as to why and give an idea of the timeline you would like us to build it in? Do you have an idea of the user base for this software within your community? If you are asking for some software on the MMM machines this can be the wider community and for UCL machines users in your ecosystem. If the software is only required by you would you be open to trying to install the software in your home space? We can provide some assistance here if you tell us what problems you are encountering. The requests will be added to the issues in our buildscripts repository . The buildscripts themselves are there too, so you can see how we built and installed our central software stack. You can install software yourself in your space on the cluster. Below are some tips for installing packages for languages such as Python or Perl as well as compiling software.","title":"Installing software"},{"location":"Software_Guides/Installing_Software/#no-sudo","text":"You cannot install anything using sudo (and neither can we!). If the instructions tell you to do that, read further to see if they also have instructions for installing in user space, or for doing an install from source if they are RPMs. Alternatively, just leave off the sudo from the command they tell you to run and look for an alternative way to give it an install location if it tries to install somewhere that isn't in your space (examples for some common build systems are below).","title":"No sudo!"},{"location":"Software_Guides/Installing_Software/#download-source-code","text":"Use wget or curl to download the source code for the software you want to install to your account on the cluster. You can use tar to extract source archives named like tar.gz or .tgz or .tar.bz2 among others and unzip for .zip files. xz --decompress will expand .xz files. wget https://www.example.com/program.tar.gz tar -xvf program.tar.gz You will not be able to use a package manager like yum , and will need to follow the manual installation instructions for a user-space install (not using sudo ).","title":"Download source code"},{"location":"Software_Guides/Installing_Software/#set-up-modules","text":"Before you start compiling, you need to make sure you have the right compilers, libraries and other tools available for your software. If you haven't changed anything, you will have the default modules loaded. Check what the instructions for your software tell you about compiling it. If the website doesn't say much, the source code will hopefully have a README or INSTALL file. You may want to use a different compiler - the default is the Intel compiler. module avail compilers will show you all the compiler modules available. Most Open Source software tends to assume you're using GCC and OpenMPI (if it uses MPI) and is most tested with that combination, so if it doesn't tell you otherwise you may want to begin there (do check what the newest modules available are - the below is correct at time of writing): # unload your current compiler and mpi modules module unload compilers mpi # load the GNU compiler and OpenMPI module load compilers/gnu/4.9.2 module load mpi/openmpi/4.0.3/gnu-4.9.2","title":"Set up modules"},{"location":"Software_Guides/Installing_Software/#newer-versions-of-gcc-and-glibcxx","text":"The software you want to run may require newer compilers or a precompiled binary may say that it needs a newer GLIBCXX to be able to run. You can access these as follows: # make all the newer versions visible module load beta-modules # unload current compiler, mpi and gcc-libs modules module unload -f compilers mpi gcc-libs # load GCC 10.2.0 module load gcc-libs/10.2.0 module load compilers/gnu/10.2.0 The gcc-libs module contains the actual compiler and libraries, while the compilers/gnu module sets environment variables that are likely to be picked up by build systems, telling them what the C, C++ and Fortran compilers are called.","title":"Newer versions of GCC and GLIBCXX"},{"location":"Software_Guides/Installing_Software/#glibc-version-error","text":"If you get an error saying that a precompiled binary that you are installing needs a newer GLIBC (not GLIBCXX) then this has been compiled on a newer operating system and will not work on our clusters. Look for a binary that was created for CentOS 7 (we have RHEL 7) or build the program from source if possible.","title":"GLIBC version error"},{"location":"Software_Guides/Installing_Software/#build-systems","text":"Most software will use some kind of build system to manage how files are compiled and linked and in what order. Here are a few common ones.","title":"Build systems"},{"location":"Software_Guides/Installing_Software/#automake-configure","text":"Automake will generate the Makefile for you and hopefully pick up sensible options through configuration. You can give it an install prefix to tell it where to install (or you can build it in place and not use make install at all). ./configure --prefix=/home/username/place/you/want/to/install make # if it has a test suite, good idea to use it make test make install If it has more configuration flags, you can use ./configure --help to view them. Usually configure will create a config.log: you can look in there to find if any tests have failed or things you think should have been picked up haven't.","title":"Automake configure"},{"location":"Software_Guides/Installing_Software/#cmake","text":"CMake is another build system. It will have a CMakeFile or the instructions will ask you to use cmake or ccmake rather than make. It also generates Makefiles for you. ccmake is a terminal-based interactive interface where you can see what variables are set to and change them, then repeatedly configure until everything is correct, generate the Makefile and quit. cmake is the commandline version. The interactive process tends to go like this: ccmake CMakeLists.txt # press c to configure - will pick up some options # press t to toggle advanced options # keep making changes and configuring until no more errors or changes # press g to generate and exit make # if it has a test suite, good idea to use it make test make install The options that you set using ccmake can also be passed on the commandline to cmake with -D . This allows you to script an install and run it again later. CMAKE_INSTALL_PREFIX is how you tell it where to install. # making a build directory allows you to clean it up more easily mkdir build cd build cmake .. -DCMAKE_INSTALL_PREFIX=/home/username/place/you/want/to/install If you need to rerun cmake/ccmake and reconfigure, remember to delete the CMakeCache.txt file first or it will still use your old options. Turning on verbose Makefiles in cmake is also useful if your code didn't compile first time - you'll be able to see what flags the compiler or linker is actually being given when it fails.","title":"CMake"},{"location":"Software_Guides/Installing_Software/#make","text":"Your code may come with a Makefile and have no configure, in which case the generic way to compile it is as follows: make targetname There's usually a default target, which make on its own will use. make all is also frequently used. If you need to change any configuration options, you'll need to edit those sections of the Makefile (usually near the top, where the variables/flags are defined). Here are some typical variables you may want to change in a Makefile. These are what compilers/mpi wrappers to use - these are also defined by the compiler modules, so you can see what they should be. Intel would be icc , icpc , ifort , while the GNU compiler would be gcc , g++ , gfortran . If this is a program that can be compiled using MPI and only has a variable for CC, then set that to mpicc. CC=gcc CXX=g++ FC=gfortran MPICC=mpicc MPICXX=mpicxx MPIF90=mpif90 CFLAGS and LDFLAGS are flags for the compiler and linker respectively, and there might be LIBS or INCLUDE in the Makefile as well. When linking a library with the name libfoo, use -lfoo . CFLAGS=\"-I/path/to/include\" LDFLAGS=\"-L/path/to/foo/lib -L/path/to/bar/lib\" LDLIBS=\"-lfoo -lbar\" Remember to make clean first if you are recompiling with new options. This will delete object files from previous attempts.","title":"Make"},{"location":"Software_Guides/Installing_Software/#blas-and-lapack","text":"BLAS and LAPACK are linear algebra libraries that are provided as part of MKL, OpenBLAS or ATLAS. There are several different OpenBLAS and ATLAS modules for different compilers. MKL is available as part of each Intel compiler module. Your code may try to link -lblas -llapack : this isn't the right way to use BLAS and LAPACK with MKL or ATLAS (though our OpenBLAS now has symlinks that mean this will work).","title":"BLAS and LAPACK"},{"location":"Software_Guides/Installing_Software/#mkl","text":"When you have an Intel compiler module loaded, typing echo $MKLROOT will show you that MKL is available.","title":"MKL"},{"location":"Software_Guides/Installing_Software/#easy-linking-of-mkl","text":"If you can, try to use -mkl as a compiler flag - if that works, it should get all the correct libraries linked in the right order. Some build systems do not work with this however and need explicit linking.","title":"Easy linking of MKL"},{"location":"Software_Guides/Installing_Software/#intel-mkl-link-line-advisor","text":"It can be complicated to get the correct link line for MKL, so Intel has provided a tool which will give you the link line with the libraries in the right order. https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor Pick the version of MKL you are using (for the Intel 2018 compiler it should be Intel(R) MKL 2018.0), and these options: OS: Linux Pick your compiler. BLAS and LAPACK are Fortran95 interfaces, to select them pick a Fortran compiler. Architecture: Intel(R) 64 You can choose what type of linking you prefer. Dynamic linking means the libraries are linked at runtime and use the .so library, while static means they are linked at compile time and use the .a library. The Single Dynamic Library for later MKL versions will mean MKL will do clever things to work out which parts of it you are using. Interface layer: 64-bit integer Threading layer: You probably want sequential threading in most cases. Select additional libraries (ScaLAPACK) if required. Select Intel MPI if required. Select 'Link with Intel MKL libraries explicitly' You'll get something like this: ${MKLROOT}/lib/intel64/libmkl_blas95_ilp64.a ${MKLROOT}/lib/intel64/libmkl_lapack95_ilp64.a -L${MKLROOT}/lib/intel64 -lmkl_scalapack_ilp64 -lmkl_intel_ilp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_ilp64 -lpthread -lm -ldl and compiler options: -i8 -I${MKLROOT}/include/intel64/ilp64 -I${MKLROOT}/include It is a good idea to double check the library locations given by the tool are correct: do an ls ${MKLROOT}/lib/intel64 and make sure the directory exists and contains the libraries. In the past there have been slight path differences between tool and install for some versions.","title":"Intel MKL link line advisor"},{"location":"Software_Guides/Installing_Software/#openblas","text":"We have native threads, OpenMP and serial versions of OpenBLAS. Type module avail openblas to see the available versions.","title":"OpenBLAS"},{"location":"Software_Guides/Installing_Software/#linking-openblas","text":"Our OpenBLAS modules now contain symlinks for libblas and liblapack that both point to libopenblas . This means that the default -lblas -llapack will in fact work. This is how you would normally link OpenBLAS: -L${OPENBLASROOT}/lib -lopenblas If code you are compiling requires separate entries for BLAS and LAPACK, set them both to -lopenblas .","title":"Linking OpenBLAS"},{"location":"Software_Guides/Installing_Software/#troubleshooting-openmp-loop-warning","text":"If you are running a threaded program and get this warning: OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option. Then tell OpenBLAS to use only one thread by adding the below to your jobscript (this overrides $OMP_NUM_THREADS for OpenBLAS only): export OPENBLAS_NUM_THREADS=1 If it is your own code, you can also set it in the code with the function void openblas_set_num_threads(int num_threads); You can avoid this error by compiling with one of the native-threads or serial OpenBLAS modules instead of the openmp one.","title":"Troubleshooting: OpenMP loop warning"},{"location":"Software_Guides/Installing_Software/#atlas","text":"We would generally recommend using OpenBLAS instead at present, but we do have ATLAS modules.","title":"ATLAS"},{"location":"Software_Guides/Installing_Software/#dynamic-linking-atlas","text":"There is one combined library each for serial and threaded ATLAS (in most circumstances you probably want the serial version). Serial: -L${ATLASROOT}/lib -lsatlas Threaded: -L${ATLASROOT}/lib -ltatlas","title":"Dynamic linking ATLAS"},{"location":"Software_Guides/Installing_Software/#static-linking-atlas","text":"There are multiple libraries to link. Serial: -L${ATLASROOT}/lib -llapack -lf77blas -lcblas -latlas Threaded: -L${ATLASROOT}/lib -llapack -lptf77blas -lptcblas -latlas","title":"Static linking ATLAS"},{"location":"Software_Guides/Installing_Software/#troubleshooting-libgfortran-or-lifcore-cannot-be-found","text":"If you get a runtime error saying that libgfortran.so cannot be found, you need to add -lgfortran to your link line. The Intel equivalent is -lifcore . You can do a module show on the compiler module you are using to see where the Fortran libraries are located if you need to give a full path to them.","title":"Troubleshooting: libgfortran or lifcore cannot be found"},{"location":"Software_Guides/Installing_Software/#installing-additional-packages-for-an-existing-scripting-language","text":"","title":"Installing additional packages for an existing scripting language"},{"location":"Software_Guides/Installing_Software/#python","text":"There are python2/recommended and python3/recommended module bundles you will see if you type module avail python . These use a virtualenv, have a lot of Python packages installed already, like numpy and scipy (see the Python package list ) and have pip set up for you.","title":"Python"},{"location":"Software_Guides/Installing_Software/#load-the-gnu-compiler","text":"Our Python installs were built with GCC. You can run them without problems with the default Intel compilers loaded because it also depends on the gcc-libs/4.9.2 module. However, when you are installing your own Python packages you should make sure you have the GNU compiler module loaded. This is to avoid the situation where you build your package with the Intel compiler and then try to run it with our GNU-based Python. If it compiled any C code, it will be unable to find Intel-specific instructions and give you errors. Change your compiler module: module unload compilers module load compilers/gnu/4.9.2 If you get an error like this when trying to run something, you built a package with the Intel compiler. undefined symbol: __intel_sse2_strrchr","title":"Load the GNU compiler"},{"location":"Software_Guides/Installing_Software/#install-your-own-packages-in-the-same-virtualenv","text":"This will use our central virtualenv and the packages we have already installed. # for Python 2 pip install --user <python2pkg> # for Python 3 pip3 install --user <python3pkg> These will install into .python2local or .python3local in your home directory. If your own installed Python packages get into a mess, you can delete (or rename) the whole .python3local and start again.","title":"Install your own packages in the same virtualenv"},{"location":"Software_Guides/Installing_Software/#using-your-own-virtualenv","text":"If you need different packages that are not compatible with the centrally installed versions (eg. what you are trying to install depends on a different version of something we have already installed) then you can create a new virtualenv and only packages you are installing yourself will be in it. In this case, you do not want our virtualenv with our packages to also be active. We have two types of Python modules. If you type module avail python there are \"bundles\" which are named like python3/3.7 - these include our virtualenv and packages. Then there are the base modules for just python itself, like python/3.7.4 . When using your own virtualenv, you want to load one of the base python modules. # load a base python module (you will always need to do this) module load python/3.7.4 # create the new virtualenv, with any name you want virtualenv <DIR> # activate it source <DIR>/bin/activate Your bash prompt will change to show you that a different virtualenv is active. (This one is called venv ). (venv) [uccacxx@login03 ~]$ deactivate will deactivate your virtualenv and your prompt will return to normal. You only need to create the virtualenv the first time.","title":"Using your own virtualenv"},{"location":"Software_Guides/Installing_Software/#error-while-loading-shared-libraries","text":"You will always need to load the base python module before activating your virtualenv or you will get an error like this: python3: error while loading shared libraries: libpython3.7m.so.1.0: cannot open shared object file: No such file or directory","title":"Error while loading shared libraries"},{"location":"Software_Guides/Installing_Software/#installing-via-setuppy","text":"If you need to install by downloading a package and using setup.py , you can use the --user flag and as long as one of our python module bundles are loaded, it will install into the same .python2local or .python3local as pip does and your packages will be found automatically. python setup.py install --user If you want to install to a different directory in your space to keep this package separate, you can use --prefix instead. You'll need to add that location to your $PYTHONPATH and $PATH as well so it can be found. Some install methods won't create the prefix directory you requested for you automatically, so you would need to create it yourself first. This type of install makes it easier for you to only have this package in your paths when you want to use it, which is helpful if it conflicts with something else. # add location to PYTHONPATH so Python can find it export PYTHONPATH=/home/username/your/path/lib/python3.7/site-packages:$PYTHONPATH # if necessary, create lib/pythonx.x/site-packages in your desired install location mkdir -p /home/username/your/path/lib/python3.7/site-packages # do the install python setup.py install --prefix=/home/username/your/path It will tend to tell you at install time if you need to change or create the $PYTHONPATH directory. To use this package, you'll need to add it to your paths in your jobscript or .bashrc . Check that the PATH is where your Python executables were installed. export PYTHONPATH=/home/username/your/path/lib/python3.7/site-packages:$PYTHONPATH export PATH=/home/username/your/path/bin:$PATH It is very important that you keep the :$PYTHONPATH or :$PATH at the end of these - you are putting your location at the front of the existing contents of the path. If you leave them out, then only your package location will be found and nothing else.","title":"Installing via setup.py"},{"location":"Software_Guides/Installing_Software/#troubleshooting-remove-your-pip-cache","text":"If you built something and it went wrong, and are trying to reinstall it with pip and keep getting errors that you think you should have fixed, you may still be using a previous cached version. The cache is in .cache/pip in your home directory, and you can delete it. You can prevent caching entirely by installing using pip3 install --user --no-cache-dir <python3pkg>","title":"Troubleshooting: remove your pip cache"},{"location":"Software_Guides/Installing_Software/#troubleshooting-python-script-executable-paths","text":"If you have an executable Python script (eg. something you run using pyutility and not python pyutility.py ) that begins like this: #!/usr/bin/python2.6 and fails because that Python doesn't exist in that location or isn't the one that has the additional packages installed, then you should change it so it uses the first Python found in your environment instead, which will be the one from the Python module you've loaded. #!/usr/bin/env python","title":"Troubleshooting: Python script executable paths"},{"location":"Software_Guides/Matlab/","text":"MATLAB is a numerical computing environment and proprietary programming language developed by MathWorks. Our MATLAB installs include all the toolboxes included in UCL's Total Academic Headcount-Campus licence plus the MATLAB Parallel Server. We also have the NAG toolbox for Matlab available. You can submit single node multi-threaded MATLAB jobs, single node jobs which use the Parallel Computing Toolbox and the MATLAB Parallel Server (MPS) and MATLAB GPU jobs. Currently MATLAB jobs can only be run on Myriad however we are working with MathWorks to allow the submission of multi-node MPS jobs on Kathleen. You can also submit jobs to Myriad from MATLAB running on your own desktop or laptop. Setup \u00a7 You need to load MATLAB once from a login node before you can submit any jobs. This allows it to set up your ~/.matlab directory as a symbolic link to ~/Scratch/.matlab so that the compute nodes can write to it. # on a login node module load xorg-utils/X11R7.7 module load matlab/full/r2021a/9.10 We have other versions of MATLAB installed. You can run module avail matlab to see all the available installed versions. Single node multi-threaded batch jobs \u00a7 This is the simplest way to start using MATLAB on the cluster. You will need a .m file containing the MATLAB commands you want to carry out. Here is an example jobscript which you would submit using the qsub command, after you have loaded the MATLAB module once on a login node as mentioned in Setup : #!/bin/bash -l # Batch script to run a multi-threaded MATLAB job under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per core. #$ -l mem=1G # Request 15 gigabytes of TMPDIR space (default is 10 GB) #$ -l tmpfs=15G # Request a number of threads (which will use that number of cores). # On Myriad you can set the number of threads to a maximum of 36. #$ -pe smp 36 # Request one MATLAB licence - makes sure your job doesn't start # running until sufficient licenses are free. #$ -l matlab=1 # Set the name of the job. #$ -N Matlab_multiThreadedJob1 # Set the working directory to somewhere in your scratch space. # This is a necessary step as compute nodes cannot write to $HOME. # Replace \"<your_UCL_id>\" with your UCL user ID. # This directory must already exist. #$ -wd /home/<your_UCL_id>/Scratch/Matlab_examples # Your work should be done in $TMPDIR cd $TMPDIR module load xorg-utils/X11R7.7 module load matlab/full/r2021a/9.10 # outputs the modules you have loaded module list # Optional: copy your script and any other files into $TMPDIR. # This is only practical if you have a small number of files. # If you do not copy them in, you must always refer to them using a # full path so they can be found, eg. ~/Scratch/Matlab_examples/analyse.m cp ~/Scratch/Matlab_examples/myMatlabJob.m $TMPDIR cp ~/Scratch/Matlab_examples/initialise.m $TMPDIR cp ~/Scratch/Matlab_examples/analyse.m $TMPDIR # These echoes output what you are about to run echo \"\" echo \"Running matlab -nosplash -nodisplay < myMatlabJob.m ...\" echo \"\" matlab -nosplash -nodesktop -nodisplay < myMatlabJob.m # Or if you did not copy your files: # matlab -nosplash -nodesktop -nodisplay < ~/Scratch/Matlab_examples/myMatlabJob.m # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/Matlab_examples/files_from_job_${JOB_ID}.tgz $TMPDIR # Make sure you have given enough time for the copy to complete! Alternative syntax: Instead of using Unix input redirection like this: matlab -nosplash -nodesktop -nodisplay < $Matlab_infile you can also do: matlab -nosplash -nodesktop -nodisplay -r $Matlab_infile Run without the JVM to reduce overhead \u00a7 You can give the -nojvm option to tell MATLAB to run without the Java Virtual Machine. This will speed up startup time, possibly execution time, and remove some memory overhead, but will prevent you using any tools that require Java (eg, tools that use the Java API for I/O and networking like URLREAD, or call Java object methods). Run single-threaded \u00a7 Most of the time, MATLAB will create many threads and use them as it wishes. If you know your job is entirely single-threaded, you can force MATLAB to run with only one thread on one core, which will allow you to have more jobs running at once. To request one core only, set #$ -pe smp 1 in your jobscript. Run MATLAB like this: matlab -nosplash -nodesktop -nodisplay -nojvm -singleCompThread < $Matlab_infile The -singleCompThread forces MATLAB to run single-threaded, and the -nojvm tells it to run without the Java Virtual Machine, as above. Using the MATLAB GUI interactively \u00a7 You can run MATLAB interactively for short amounts of time on the login nodes (please do not do this if your work will be resource-intensive). You can also run it interactively in a qrsh session on the compute nodes. Launching with matlab will give you the full graphical user interface - you will need to have logged in to the cluster with X-forwarding on for this to work. Launching with matlab -nodesktop -nodisplay will give you the MATLAB terminal. [//]: # Up to this point on revision. Submitting jobs using the MATLAB Parallel Server (MPS) \u00a7 You must have loaded the MATLAB module once from a login node as described in Setup before you can submit any MATLAB MPS jobs. MATLAB PCS jobs must be submitted from an interactive or scripted Matlab session which can be running on the cluster login nodes, from another MATLAB job or on your own machine . MATLAB MPS jobs will currently only work inside a single node on our clusters. On Myriad this means a maximum of 36 workers can be used per job. Importing the cluster profile \u00a7 You need to import the cluster profile into your MATLAB environment and set it as the default before you can submit DCS jobs. This only needs doing once. The imported profile will be saved in your MATLAB settings directory. Importing the profile can be done either by calling MATLAB functions or via the graphical interface. The profile is stored here (for R2021a): /shared/ucl/apps/Matlab/toolbox_local/R2021a/myriad_R2021a.mlsettings Import using MATLAB functions \u00a7 Run these functions from a MATLAB session: profile_Myriad = parallel.importProfile ('/shared/ucl/apps/Matlab/toolbox_local/R2021a/myriad_R2021a.mlsettings'); parallel.defaultClusterProfile ('myriad_R2021a'); Import from MATLAB GUI \u00a7 To import using the graphical interface instead, do this. From the Home tab select the Parallel menu and click Create and Manage Clusters... . The Cluster Profile Manager window will open. Select Import and in the Import Profiles from file window navigate to the myriad_R2021a.mlsettings file shown above and select Open. Select the resulting myriad_R2021a profile and click Set as Default . The Cluster Profile Manager window should now look like this: In both cases after you exit MATLAB your cluster profile is saved for future use. Environment variables needed for job submission \u00a7 We have set up four Grid Engine environment variables to assist with job submission from within MATLAB. These are needed to pass in job resource parameters that aren't supported by the internal MATLAB job submission mechanism. SGE_CONTEXT : a comma-separated list of variables treated as if added via the -ac option, eg. exclusive SGE_OPT : a comma-separated list of resources treated as if added via the -l option, eg. h_rt=0:10:0,mem=1G,tmpfs=15G and two project and Gold related variables. Most users will not need to use either of these: SGE_PROJECT : a project treated as if added via the -P option. SGE_ACCOUNT : a Gold project as if added via the -A option. When using this your SGE_PROJECT needs to be set to Gold . -ac exclusive prevents anything else running on the same node as your job, even if you aren't using all the cores. This is no longer a necessary option for MATLAB jobs. There are two ways to set these: 1) Before starting your MATLAB session, using the usual Bash method of exporting environment variables: export SGE_CONTEXT=exclusive export SGE_OPT=h_rt=0:15:0,mem=2G,tmpfs=15G export SGE_PROJECT=<your project ID> export SGE_ACCOUNT=<your Gold project> 2) Inside your MATLAB session, using MATLAB's setenv function: setenv ('SGE_CONTEXT', 'exclusive'); setenv ('SGE_OPT', 'h_rt=0:15:0,mem=2G,tmpfs=15G'); setenv ('SGE_PROJECT', '<your project ID>'); setenv ('SGE_ACCOUNT', '<your Gold project>'); Example: a simple MPS job \u00a7 This submits a job from inside a MATLAB session running on a login node. You need to start MATLAB from a directory in Scratch - jobs will inherit this as their working directory. This is an example where you have only one MATLAB source file. 1) Change to the directory in Scratch you want the job to run from and set the SGE environment variables. cd ~/Scratch/Matlab_examples export SGE_OPT=h_rt=0:10:0,mem=2G,tmpfs=15G 2) Either start the MATLAB GUI: matlab or start a MATLAB terminal session: matlab -nodesktop -nodisplay 3) Inside MATLAB, create a cluster object using the cluster profile: c = parcluster ('myriad_R2021a'); 4) Use your cluster object to create a job object of the type you need. For this example the job is a parallel job with communication between MATLAB workers of type \"Single Program Multiple Data\": myJob = createCommunicatingJob (c, 'Type', 'SPMD'); 5) Set the number of workers: num_workers = 8; The maximum value you can set here on Myriad is 36. 6) Tell the job the files needed to be made available to each worker - in this example there is only one file: myJob.AttachedFiles = {'colsum.m'}; colsum.m contains the simple magic square example from the MATLAB manual \"Parallel Computing Toolbox User's Guide\". 7) Set the minimum and maximum number of workers for the job (we are asking for an exact number here by setting them the same): myJob.NumWorkersRange = [num_workers, num_workers]; 8) Create a MATLAB task to be executed as part of the job. Here it consists of executing the MATLAB function colsum . The other arguments say that the task returns one parameter and there are no input arguments to the colsum function: task = createTask (myJob, @colsum, 1, {}); 9) Submit the job: submit (myJob); Your job is now submitted to the scheduler and you can see its queue status in qstat as normal. If you were using the MATLAB GUI you can also monitor jobs by selecting Monitor Jobs from the Parallel menu on the Home tab. 10) When the job has completed get the results using: results = fetchOutputs(myJob) You can access the job log from MATLAB using: logMess = getDebugLog (c, myJob); Example: a MPS job with more than one input file \u00a7 This example has several input files. The job type is \"MATLAB Pool\". A \"Pool\" job runs the specified task function with a MATLAB pool available to run the body of parfor loops or spmd blocks and is the default job type. This example was kindly supplied to assist in testing MATLAB by colleagues from CoMPLEX. The first part of creating the job is the same as the above example apart from the longer runtime and larger amount of memory per core: 1) Change into a directory in Scratch, set the SGE variables and launch MATLAB: cd ~/Scratch/Matlab_examples export SGE_OPT=h_rt=1:0:0,mem=4G,tmpfs=15G matlab to launch the GUI or: matlab -nodesktop -nodisplay to start a terminal session. c = parcluster ('myriad_R2021a'); 2) Using our cluster object create a job object of type \"Pool\": myJob2 = createCommunicatingJob (c, 'Type', 'Pool'); 3) Set the number of workers and another variable used by the example: num_workers = 8; simulation_duration_ms = 1000; 4) Tell the job all the input files needed to be made available to each worker as a cell array: myJob2.AttachedFiles = { 'AssemblyFiniteDifferencesMatrix.m' 'AssemblyFiniteDifferencesRightHandSide.m' 'CellModelsComputeIonicCurrents.m' 'CellModelsGetVoltage.m' 'CellModelsInitialise.m' 'CellModelsSetVoltage.m' 'GetStimuliForTimeStep.m' 'SubmitMonodomainJob.m' 'RegressionTest.m' 'RunAndVisualiseMonodomainSimulation.m' 'SolveLinearSystem.m' 'luo_rudy_1991_iionic.m' 'luo_rudy_1991_time_deriv.m'}; 5) Set the minimum and maximum number of workers for the job: myJob2.NumWorkersRange = [num_workers, num_workers]; 6) Create a MATLAB task to be executed as part of the job. For this example it will consist of executing the MATLAB function RunAndVisualiseMonodomainSimulation . The rest of the arguments indicate that the task returns three parameters and there are five input arguments to the function. These are passed as a cell array: task = createTask (myJob2, @RunAndVisualiseMonodomainSimulation, 3, {5000, simulation_duration_ms, 1.4, 1.4, false}); 7) Submit the job: submit (myJob2); As before use fetchOutputs to collect the results. If you closed your session, you can get your results by: c = parcluster ('myriad_R2021a'); # get a cluster object jobs = findJob(c) # get a list of jobs submitted to that cluster job = jobs(3); # pick a particular job results = fetchOutputs(job) You can get other information: diary(job) will give you the job diary, and load(job) will load the workspace. Further reading \u00a7 There is a lot more information about using the MATLAB Distributed Computing Server in the MATLAB manual: Parallel Computing Toolbox User\u2019s Guide . Submitting MATLAB jobs from your workstation/laptop \u00a7 You can submit MATLAB jobs to Myriad from MATLAB sessions running on your own desktop workstation or laptop systems provided they are running the same version of MATLAB and your computer is within the UCL firewall. With MATLAB R2021a you can currently submit jobs to Myriad. Support for R2018b is also still available. Prerequisites \u00a7 You must already have an account on the clusters! Have MATLAB R2021a (or R2018b) installed on your local workstation/laptop. The local version must match the version running jobs. MATLAB R2021a can be downloaded from the UCL Software Database . Your local workstation/laptop installation of MATLAB must include the Parallel Computing toolbox. This is included in the UCL TAH MATLAB license and may be installed automatically. Home tab > Add-Ons > Get Add-Ons You will find the Parallel Computing Toolbox in the Workflows category. If your local workstation/laptop is not directly connected to the UCL network (at home for example), you need to have the UCL VPN client installed and running on it. Remote setup \u00a7 1) On the cluster you are using (Myriad in this case) create a directory to hold remotely submitted job details. For example: mkdir ~/Scratch/Matlab_remote_jobs This directory needs to be in your Scratch directory as compute nodes need to be able to write to it. You should not use this directory for anything else. 2) On your local workstation/laptop create a directory to hold information about jobs that have been submitted to the cluster. Again you should not use this directory for anything else. 3) Download either the the support files for remote submission to Myriad for R2021a or support files for remote submission to Myriad for R2018b . Make sure you download the correct one for your version of MATLAB! 4) This step MUST be done while Matlab is shut down. Unzip the archive into MATLAB's local toolbox directory. Default locations for the local toolbox directory are: Linux: The default local toolbox location is /usr/local/MATLAB/R2021a/toolbox/local for R2021a. Navigate to this directory and use unzip -x archive_name . Mac OS X: The default local toolbox location is /Applications/MATLAB_R2021a.app/toolbox/local for R2021a. In order to view or change the contents of an application package, open /Applications in a Finder window. Then right-click the application and select \"View Package Contents.\" Then navigate to the appropriate directory. Note: if you don't have access to /Applications/MATLAB_R2021a.app/toolbox/local , you can unzip the support files into ~/Documents/MATLAB/ instead. Windows: The default local toolbox location is C:\\Program Files\\MATLAB\\R2021a\\toolbox\\local for R2021a. Extract the archive here. You can unzip the support files into Documents\\MATLAB\\ instead. 5) Download the parallelProfileMyriad function to your local workstation/laptop. It will need to be unzipped. This function create a cluster profile for Myriad for R2021a or R2018b. 6) Start MATLAB, navigate to where you saved the parallelProfileMyriad.m file and run the function by typing: parallelProfileMyriad at your MATLAB prompt (in your MATLAB Command Window if running the MATLAB GUI) and answer the questions. Submitting a job to the cluster \u00a7 1) You need to set the Grid Engine support environment variables on your local computer. Eg. in your MATLAB session set: setenv ('SGE_CONTEXT', 'exclusive'); # optional setenv ('SGE_OPT', 'h_rt=0:15:0,mem=2G,tmpfs=15G'); setenv ('SGE_PROJECT', '<your project ID>'); # optional setenv ('SGE_ACCOUNT', '<your Gold project>'); # optional 2) In your MATLAB session create a cluster object using the cluster profile created by the parallelProfile... functions. For Myriad: c = parcluster ('myriad_R2021a'); 3) You can now create and submit jobs in a similar way to that shown in the MPS examples above starting from step 4 in the simple MPS job example or step 2 in the MPS job with multiple input files example . Viewing your results \u00a7 After submitting your job remotely from your desktop, you can close MATLAB and come back later. To see your jobs: Click \"Parallel > Monitor jobs\" This will bring up the job monitor where you can see the status of your jobs and whether they are finished. MATLAB numbers the jobs sequentially. Right-click on a job and choose \"fetch outputs\". This is what will be executed (for job4 on Myriad): myCluster = parcluster('myriad_R2021a'); job4 = myCluster.findJob('ID',4); job4_output = fetchOutputs(job4); The Workspace will show the available data and you can view your results. The data is fetched from the Matlab_remote_jobs directory you created on Myriad (or Legion) in Remote setup step 1, so that will also have files and directories in it called job1, job2 and so on. If you have already fetched the data, you can view the results straight away by selecting that job. If you need to reload everything, you can right-click on the job and the option will be to load variables instead. Writing intermediate results \u00a7 If you want to explicitly write out intermediate results, you need to provide a full path to somewhere in Scratch otherwise MATLAB will try to write them in your home, which isn't writable by the compute nodes. Troubleshooting remote jobs \u00a7 If you get a message like this when retrieving your outputs then something has gone wrong in your job: Task with ID xxx returned 0 outputs but 1 were expected You need to retrieve the debug log to find out what happened. Example: myCluster = parcluster('myriad_R2021a'); job4 = myCluster.findJob('ID',4); jobLog = getDebugLog (myCluster, job4); jobLog There will be a lot of output. Look for lines related to errors happening in your own code. Running MATLAB on GPUs \u00a7 This uses MATLAB's Mandelbrot Set GPU example . #!/bin/bash -l # Batch script to run a GPU MATLAB job on Myriad. # Request 15 minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:15:0 # Request 2 gigabytes of RAM per core. #$ -l mem=2G # Request 15 gigabytes of TMPDIR space (default is 10 GB) #$ -l tmpfs=15G # Request 1 GPU #$ -l gpu=1 # Request 1 CPU core. (Max on Myriad is 36) #$ -pe smp 1 # Request one MATLAB licence - makes sure your job doesn't start # running until sufficient licenses are free. #$ -l matlab=1 # Set the name of the job. #$ -N Matlab_GPU_Job1 # Set the working directory to somewhere in your scratch space. # This is a necessary step as compute nodes cannot write to $HOME. # Replace \"<your_UCL_id>\" with your UCL user ID. # This directory must already exist. #$ -wd /home/<your_UCL_id>/Scratch/Matlab_examples # Your work should be done in $TMPDIR cd $TMPDIR # Optional: Copy your script and any other files into $TMPDIR. # If not, you must always refer to them using a full path. cp /home/ccaabaa/Software/Matlab/Mandelbrot_GPU.m $TMPDIR module unload compilers mpi module load compilers/gnu/4.9.2 module load xorg-utils/X11R7.7 module load matlab/full/r2021a/9.10 module list # These echoes output what you are about to run echo \"\" echo \"Running matlab -nosplash -nodisplay < Mandelbrot_GPU.m ...\" echo \"\" matlab -nosplash -nodesktop -nodisplay < Mandelbrot_GPU.m # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/Matlab_examples/files_from_job_${JOB_ID}.tgz $TMPDIR # Make sure you have given enough time for the copy to complete!","title":"MATLAB"},{"location":"Software_Guides/Matlab/#setup","text":"You need to load MATLAB once from a login node before you can submit any jobs. This allows it to set up your ~/.matlab directory as a symbolic link to ~/Scratch/.matlab so that the compute nodes can write to it. # on a login node module load xorg-utils/X11R7.7 module load matlab/full/r2021a/9.10 We have other versions of MATLAB installed. You can run module avail matlab to see all the available installed versions.","title":"Setup"},{"location":"Software_Guides/Matlab/#single-node-multi-threaded-batch-jobs","text":"This is the simplest way to start using MATLAB on the cluster. You will need a .m file containing the MATLAB commands you want to carry out. Here is an example jobscript which you would submit using the qsub command, after you have loaded the MATLAB module once on a login node as mentioned in Setup : #!/bin/bash -l # Batch script to run a multi-threaded MATLAB job under SGE. # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per core. #$ -l mem=1G # Request 15 gigabytes of TMPDIR space (default is 10 GB) #$ -l tmpfs=15G # Request a number of threads (which will use that number of cores). # On Myriad you can set the number of threads to a maximum of 36. #$ -pe smp 36 # Request one MATLAB licence - makes sure your job doesn't start # running until sufficient licenses are free. #$ -l matlab=1 # Set the name of the job. #$ -N Matlab_multiThreadedJob1 # Set the working directory to somewhere in your scratch space. # This is a necessary step as compute nodes cannot write to $HOME. # Replace \"<your_UCL_id>\" with your UCL user ID. # This directory must already exist. #$ -wd /home/<your_UCL_id>/Scratch/Matlab_examples # Your work should be done in $TMPDIR cd $TMPDIR module load xorg-utils/X11R7.7 module load matlab/full/r2021a/9.10 # outputs the modules you have loaded module list # Optional: copy your script and any other files into $TMPDIR. # This is only practical if you have a small number of files. # If you do not copy them in, you must always refer to them using a # full path so they can be found, eg. ~/Scratch/Matlab_examples/analyse.m cp ~/Scratch/Matlab_examples/myMatlabJob.m $TMPDIR cp ~/Scratch/Matlab_examples/initialise.m $TMPDIR cp ~/Scratch/Matlab_examples/analyse.m $TMPDIR # These echoes output what you are about to run echo \"\" echo \"Running matlab -nosplash -nodisplay < myMatlabJob.m ...\" echo \"\" matlab -nosplash -nodesktop -nodisplay < myMatlabJob.m # Or if you did not copy your files: # matlab -nosplash -nodesktop -nodisplay < ~/Scratch/Matlab_examples/myMatlabJob.m # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/Matlab_examples/files_from_job_${JOB_ID}.tgz $TMPDIR # Make sure you have given enough time for the copy to complete! Alternative syntax: Instead of using Unix input redirection like this: matlab -nosplash -nodesktop -nodisplay < $Matlab_infile you can also do: matlab -nosplash -nodesktop -nodisplay -r $Matlab_infile","title":"Single node multi-threaded batch jobs"},{"location":"Software_Guides/Matlab/#run-without-the-jvm-to-reduce-overhead","text":"You can give the -nojvm option to tell MATLAB to run without the Java Virtual Machine. This will speed up startup time, possibly execution time, and remove some memory overhead, but will prevent you using any tools that require Java (eg, tools that use the Java API for I/O and networking like URLREAD, or call Java object methods).","title":"Run without the JVM to reduce overhead"},{"location":"Software_Guides/Matlab/#run-single-threaded","text":"Most of the time, MATLAB will create many threads and use them as it wishes. If you know your job is entirely single-threaded, you can force MATLAB to run with only one thread on one core, which will allow you to have more jobs running at once. To request one core only, set #$ -pe smp 1 in your jobscript. Run MATLAB like this: matlab -nosplash -nodesktop -nodisplay -nojvm -singleCompThread < $Matlab_infile The -singleCompThread forces MATLAB to run single-threaded, and the -nojvm tells it to run without the Java Virtual Machine, as above.","title":"Run single-threaded"},{"location":"Software_Guides/Matlab/#using-the-matlab-gui-interactively","text":"You can run MATLAB interactively for short amounts of time on the login nodes (please do not do this if your work will be resource-intensive). You can also run it interactively in a qrsh session on the compute nodes. Launching with matlab will give you the full graphical user interface - you will need to have logged in to the cluster with X-forwarding on for this to work. Launching with matlab -nodesktop -nodisplay will give you the MATLAB terminal. [//]: # Up to this point on revision.","title":"Using the MATLAB GUI interactively"},{"location":"Software_Guides/Matlab/#submitting-jobs-using-the-matlab-parallel-server-mps","text":"You must have loaded the MATLAB module once from a login node as described in Setup before you can submit any MATLAB MPS jobs. MATLAB PCS jobs must be submitted from an interactive or scripted Matlab session which can be running on the cluster login nodes, from another MATLAB job or on your own machine . MATLAB MPS jobs will currently only work inside a single node on our clusters. On Myriad this means a maximum of 36 workers can be used per job.","title":"Submitting jobs using the MATLAB Parallel Server (MPS)"},{"location":"Software_Guides/Matlab/#importing-the-cluster-profile","text":"You need to import the cluster profile into your MATLAB environment and set it as the default before you can submit DCS jobs. This only needs doing once. The imported profile will be saved in your MATLAB settings directory. Importing the profile can be done either by calling MATLAB functions or via the graphical interface. The profile is stored here (for R2021a): /shared/ucl/apps/Matlab/toolbox_local/R2021a/myriad_R2021a.mlsettings","title":"Importing the cluster profile"},{"location":"Software_Guides/Matlab/#import-using-matlab-functions","text":"Run these functions from a MATLAB session: profile_Myriad = parallel.importProfile ('/shared/ucl/apps/Matlab/toolbox_local/R2021a/myriad_R2021a.mlsettings'); parallel.defaultClusterProfile ('myriad_R2021a');","title":"Import using MATLAB functions"},{"location":"Software_Guides/Matlab/#import-from-matlab-gui","text":"To import using the graphical interface instead, do this. From the Home tab select the Parallel menu and click Create and Manage Clusters... . The Cluster Profile Manager window will open. Select Import and in the Import Profiles from file window navigate to the myriad_R2021a.mlsettings file shown above and select Open. Select the resulting myriad_R2021a profile and click Set as Default . The Cluster Profile Manager window should now look like this: In both cases after you exit MATLAB your cluster profile is saved for future use.","title":"Import from MATLAB GUI"},{"location":"Software_Guides/Matlab/#environment-variables-needed-for-job-submission","text":"We have set up four Grid Engine environment variables to assist with job submission from within MATLAB. These are needed to pass in job resource parameters that aren't supported by the internal MATLAB job submission mechanism. SGE_CONTEXT : a comma-separated list of variables treated as if added via the -ac option, eg. exclusive SGE_OPT : a comma-separated list of resources treated as if added via the -l option, eg. h_rt=0:10:0,mem=1G,tmpfs=15G and two project and Gold related variables. Most users will not need to use either of these: SGE_PROJECT : a project treated as if added via the -P option. SGE_ACCOUNT : a Gold project as if added via the -A option. When using this your SGE_PROJECT needs to be set to Gold . -ac exclusive prevents anything else running on the same node as your job, even if you aren't using all the cores. This is no longer a necessary option for MATLAB jobs. There are two ways to set these: 1) Before starting your MATLAB session, using the usual Bash method of exporting environment variables: export SGE_CONTEXT=exclusive export SGE_OPT=h_rt=0:15:0,mem=2G,tmpfs=15G export SGE_PROJECT=<your project ID> export SGE_ACCOUNT=<your Gold project> 2) Inside your MATLAB session, using MATLAB's setenv function: setenv ('SGE_CONTEXT', 'exclusive'); setenv ('SGE_OPT', 'h_rt=0:15:0,mem=2G,tmpfs=15G'); setenv ('SGE_PROJECT', '<your project ID>'); setenv ('SGE_ACCOUNT', '<your Gold project>');","title":"Environment variables needed for job submission"},{"location":"Software_Guides/Matlab/#example-a-simple-mps-job","text":"This submits a job from inside a MATLAB session running on a login node. You need to start MATLAB from a directory in Scratch - jobs will inherit this as their working directory. This is an example where you have only one MATLAB source file. 1) Change to the directory in Scratch you want the job to run from and set the SGE environment variables. cd ~/Scratch/Matlab_examples export SGE_OPT=h_rt=0:10:0,mem=2G,tmpfs=15G 2) Either start the MATLAB GUI: matlab or start a MATLAB terminal session: matlab -nodesktop -nodisplay 3) Inside MATLAB, create a cluster object using the cluster profile: c = parcluster ('myriad_R2021a'); 4) Use your cluster object to create a job object of the type you need. For this example the job is a parallel job with communication between MATLAB workers of type \"Single Program Multiple Data\": myJob = createCommunicatingJob (c, 'Type', 'SPMD'); 5) Set the number of workers: num_workers = 8; The maximum value you can set here on Myriad is 36. 6) Tell the job the files needed to be made available to each worker - in this example there is only one file: myJob.AttachedFiles = {'colsum.m'}; colsum.m contains the simple magic square example from the MATLAB manual \"Parallel Computing Toolbox User's Guide\". 7) Set the minimum and maximum number of workers for the job (we are asking for an exact number here by setting them the same): myJob.NumWorkersRange = [num_workers, num_workers]; 8) Create a MATLAB task to be executed as part of the job. Here it consists of executing the MATLAB function colsum . The other arguments say that the task returns one parameter and there are no input arguments to the colsum function: task = createTask (myJob, @colsum, 1, {}); 9) Submit the job: submit (myJob); Your job is now submitted to the scheduler and you can see its queue status in qstat as normal. If you were using the MATLAB GUI you can also monitor jobs by selecting Monitor Jobs from the Parallel menu on the Home tab. 10) When the job has completed get the results using: results = fetchOutputs(myJob) You can access the job log from MATLAB using: logMess = getDebugLog (c, myJob);","title":"Example: a simple MPS job"},{"location":"Software_Guides/Matlab/#example-a-mps-job-with-more-than-one-input-file","text":"This example has several input files. The job type is \"MATLAB Pool\". A \"Pool\" job runs the specified task function with a MATLAB pool available to run the body of parfor loops or spmd blocks and is the default job type. This example was kindly supplied to assist in testing MATLAB by colleagues from CoMPLEX. The first part of creating the job is the same as the above example apart from the longer runtime and larger amount of memory per core: 1) Change into a directory in Scratch, set the SGE variables and launch MATLAB: cd ~/Scratch/Matlab_examples export SGE_OPT=h_rt=1:0:0,mem=4G,tmpfs=15G matlab to launch the GUI or: matlab -nodesktop -nodisplay to start a terminal session. c = parcluster ('myriad_R2021a'); 2) Using our cluster object create a job object of type \"Pool\": myJob2 = createCommunicatingJob (c, 'Type', 'Pool'); 3) Set the number of workers and another variable used by the example: num_workers = 8; simulation_duration_ms = 1000; 4) Tell the job all the input files needed to be made available to each worker as a cell array: myJob2.AttachedFiles = { 'AssemblyFiniteDifferencesMatrix.m' 'AssemblyFiniteDifferencesRightHandSide.m' 'CellModelsComputeIonicCurrents.m' 'CellModelsGetVoltage.m' 'CellModelsInitialise.m' 'CellModelsSetVoltage.m' 'GetStimuliForTimeStep.m' 'SubmitMonodomainJob.m' 'RegressionTest.m' 'RunAndVisualiseMonodomainSimulation.m' 'SolveLinearSystem.m' 'luo_rudy_1991_iionic.m' 'luo_rudy_1991_time_deriv.m'}; 5) Set the minimum and maximum number of workers for the job: myJob2.NumWorkersRange = [num_workers, num_workers]; 6) Create a MATLAB task to be executed as part of the job. For this example it will consist of executing the MATLAB function RunAndVisualiseMonodomainSimulation . The rest of the arguments indicate that the task returns three parameters and there are five input arguments to the function. These are passed as a cell array: task = createTask (myJob2, @RunAndVisualiseMonodomainSimulation, 3, {5000, simulation_duration_ms, 1.4, 1.4, false}); 7) Submit the job: submit (myJob2); As before use fetchOutputs to collect the results. If you closed your session, you can get your results by: c = parcluster ('myriad_R2021a'); # get a cluster object jobs = findJob(c) # get a list of jobs submitted to that cluster job = jobs(3); # pick a particular job results = fetchOutputs(job) You can get other information: diary(job) will give you the job diary, and load(job) will load the workspace.","title":"Example: a MPS job with more than one input file"},{"location":"Software_Guides/Matlab/#further-reading","text":"There is a lot more information about using the MATLAB Distributed Computing Server in the MATLAB manual: Parallel Computing Toolbox User\u2019s Guide .","title":"Further reading"},{"location":"Software_Guides/Matlab/#submitting-matlab-jobs-from-your-workstationlaptop","text":"You can submit MATLAB jobs to Myriad from MATLAB sessions running on your own desktop workstation or laptop systems provided they are running the same version of MATLAB and your computer is within the UCL firewall. With MATLAB R2021a you can currently submit jobs to Myriad. Support for R2018b is also still available.","title":"Submitting MATLAB jobs from your workstation/laptop"},{"location":"Software_Guides/Matlab/#prerequisites","text":"You must already have an account on the clusters! Have MATLAB R2021a (or R2018b) installed on your local workstation/laptop. The local version must match the version running jobs. MATLAB R2021a can be downloaded from the UCL Software Database . Your local workstation/laptop installation of MATLAB must include the Parallel Computing toolbox. This is included in the UCL TAH MATLAB license and may be installed automatically. Home tab > Add-Ons > Get Add-Ons You will find the Parallel Computing Toolbox in the Workflows category. If your local workstation/laptop is not directly connected to the UCL network (at home for example), you need to have the UCL VPN client installed and running on it.","title":"Prerequisites"},{"location":"Software_Guides/Matlab/#remote-setup","text":"1) On the cluster you are using (Myriad in this case) create a directory to hold remotely submitted job details. For example: mkdir ~/Scratch/Matlab_remote_jobs This directory needs to be in your Scratch directory as compute nodes need to be able to write to it. You should not use this directory for anything else. 2) On your local workstation/laptop create a directory to hold information about jobs that have been submitted to the cluster. Again you should not use this directory for anything else. 3) Download either the the support files for remote submission to Myriad for R2021a or support files for remote submission to Myriad for R2018b . Make sure you download the correct one for your version of MATLAB! 4) This step MUST be done while Matlab is shut down. Unzip the archive into MATLAB's local toolbox directory. Default locations for the local toolbox directory are: Linux: The default local toolbox location is /usr/local/MATLAB/R2021a/toolbox/local for R2021a. Navigate to this directory and use unzip -x archive_name . Mac OS X: The default local toolbox location is /Applications/MATLAB_R2021a.app/toolbox/local for R2021a. In order to view or change the contents of an application package, open /Applications in a Finder window. Then right-click the application and select \"View Package Contents.\" Then navigate to the appropriate directory. Note: if you don't have access to /Applications/MATLAB_R2021a.app/toolbox/local , you can unzip the support files into ~/Documents/MATLAB/ instead. Windows: The default local toolbox location is C:\\Program Files\\MATLAB\\R2021a\\toolbox\\local for R2021a. Extract the archive here. You can unzip the support files into Documents\\MATLAB\\ instead. 5) Download the parallelProfileMyriad function to your local workstation/laptop. It will need to be unzipped. This function create a cluster profile for Myriad for R2021a or R2018b. 6) Start MATLAB, navigate to where you saved the parallelProfileMyriad.m file and run the function by typing: parallelProfileMyriad at your MATLAB prompt (in your MATLAB Command Window if running the MATLAB GUI) and answer the questions.","title":"Remote setup"},{"location":"Software_Guides/Matlab/#submitting-a-job-to-the-cluster","text":"1) You need to set the Grid Engine support environment variables on your local computer. Eg. in your MATLAB session set: setenv ('SGE_CONTEXT', 'exclusive'); # optional setenv ('SGE_OPT', 'h_rt=0:15:0,mem=2G,tmpfs=15G'); setenv ('SGE_PROJECT', '<your project ID>'); # optional setenv ('SGE_ACCOUNT', '<your Gold project>'); # optional 2) In your MATLAB session create a cluster object using the cluster profile created by the parallelProfile... functions. For Myriad: c = parcluster ('myriad_R2021a'); 3) You can now create and submit jobs in a similar way to that shown in the MPS examples above starting from step 4 in the simple MPS job example or step 2 in the MPS job with multiple input files example .","title":"Submitting a job to the cluster"},{"location":"Software_Guides/Matlab/#viewing-your-results","text":"After submitting your job remotely from your desktop, you can close MATLAB and come back later. To see your jobs: Click \"Parallel > Monitor jobs\" This will bring up the job monitor where you can see the status of your jobs and whether they are finished. MATLAB numbers the jobs sequentially. Right-click on a job and choose \"fetch outputs\". This is what will be executed (for job4 on Myriad): myCluster = parcluster('myriad_R2021a'); job4 = myCluster.findJob('ID',4); job4_output = fetchOutputs(job4); The Workspace will show the available data and you can view your results. The data is fetched from the Matlab_remote_jobs directory you created on Myriad (or Legion) in Remote setup step 1, so that will also have files and directories in it called job1, job2 and so on. If you have already fetched the data, you can view the results straight away by selecting that job. If you need to reload everything, you can right-click on the job and the option will be to load variables instead.","title":"Viewing your results"},{"location":"Software_Guides/Matlab/#writing-intermediate-results","text":"If you want to explicitly write out intermediate results, you need to provide a full path to somewhere in Scratch otherwise MATLAB will try to write them in your home, which isn't writable by the compute nodes.","title":"Writing intermediate results"},{"location":"Software_Guides/Matlab/#troubleshooting-remote-jobs","text":"If you get a message like this when retrieving your outputs then something has gone wrong in your job: Task with ID xxx returned 0 outputs but 1 were expected You need to retrieve the debug log to find out what happened. Example: myCluster = parcluster('myriad_R2021a'); job4 = myCluster.findJob('ID',4); jobLog = getDebugLog (myCluster, job4); jobLog There will be a lot of output. Look for lines related to errors happening in your own code.","title":"Troubleshooting remote jobs"},{"location":"Software_Guides/Matlab/#running-matlab-on-gpus","text":"This uses MATLAB's Mandelbrot Set GPU example . #!/bin/bash -l # Batch script to run a GPU MATLAB job on Myriad. # Request 15 minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:15:0 # Request 2 gigabytes of RAM per core. #$ -l mem=2G # Request 15 gigabytes of TMPDIR space (default is 10 GB) #$ -l tmpfs=15G # Request 1 GPU #$ -l gpu=1 # Request 1 CPU core. (Max on Myriad is 36) #$ -pe smp 1 # Request one MATLAB licence - makes sure your job doesn't start # running until sufficient licenses are free. #$ -l matlab=1 # Set the name of the job. #$ -N Matlab_GPU_Job1 # Set the working directory to somewhere in your scratch space. # This is a necessary step as compute nodes cannot write to $HOME. # Replace \"<your_UCL_id>\" with your UCL user ID. # This directory must already exist. #$ -wd /home/<your_UCL_id>/Scratch/Matlab_examples # Your work should be done in $TMPDIR cd $TMPDIR # Optional: Copy your script and any other files into $TMPDIR. # If not, you must always refer to them using a full path. cp /home/ccaabaa/Software/Matlab/Mandelbrot_GPU.m $TMPDIR module unload compilers mpi module load compilers/gnu/4.9.2 module load xorg-utils/X11R7.7 module load matlab/full/r2021a/9.10 module list # These echoes output what you are about to run echo \"\" echo \"Running matlab -nosplash -nodisplay < Mandelbrot_GPU.m ...\" echo \"\" matlab -nosplash -nodesktop -nodisplay < Mandelbrot_GPU.m # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/Matlab_examples/files_from_job_${JOB_ID}.tgz $TMPDIR # Make sure you have given enough time for the copy to complete!","title":"Running MATLAB on GPUs"},{"location":"Software_Guides/Other_Software/","text":"We maintain a large software stack that is available across all our clusters (licenses permitting). We use environment modules to let you manage which specific versions of software packages you are using. General use of environment modules \u00a7 We have a default set of modules that everyone has loaded when they log in: these include the current default compiler and MPI, some utili ties to make your life easier and some text editors. Summary of module commands \u00a7 module avail # shows available modules module whatis # shows available modules with brief explanations module list # shows your currently loaded modules module load <module> # load this module module unload <module> # unload this module module purge # unload all modules module show <module> # Shows what the module requires and what it sets up module help <module> # Shows a longer text description for the software Find out if a software package is installed and load it \u00a7 Generically, the way you find out if a piece of software is installed is to run module load beta-modules module avail packagename By loading beta-modules you will also be able to see newer versions of GCC and the software that has been built using them. Then module avail gives you a list of all the modules we have that match the name you searched for. You can then type module show packagename and it will show you the other software dependencies this module has: these have to be loaded first. It also shows where the software is installed and what environment variables it sets up. Once you have found the modules you want to load, it is good practice to refer to them using their full name, including the version. If you use the short form ( package rather than package/5.1.2/gnu-4.9.2 ) then a matching module will be loaded, but if we install a different version, your jobs may begin using the new one and you would not know which version created your results. Different software versions may not be compatible or may have different default settings, so this is undesirable. You may need to unload current modules in order to load some requirements (eg different compiler, different MPI). This example switches from Intel compiler and MPI modules to GNU ones. module unload -f compilers mpi module load compilers/gnu/4.9.2 module load mpi/openmpi/3.1.4/gnu-4.9.2 You can use the short name when unloading things because there is usually only one match in your current modules. The last part of a module name usually tells you what compiler it was built with and which version of that compiler. There may be GNU compiler versions and Intel compiler versions of the same software available. Once the module is loaded, you should have all the usual executables in your path, and can use its commands. You load modules in exactly the same way inside a jobscript. Notes on how to run specific packages \u00a7 The packages below have slightly complex commands needed to run them, or different settings needed on our clusters. These are examples of what should be added to your jobscripts. Change the module load command to the version you want to load and check that the dependencies are the same. The top of a jobscript should contain your resource requests . See also examples of full jobscripts . ABAQUS \u00a7 ABAQUS is a commercial software suite for finite element analysis and computer-aided engineering. You must be authorised by the Mech Eng Department before you can be added to the group controlling access to ABAQUS (legabq). A serial interactive analysis can be run on the compute nodes (via a qrsh session) like this: abaqus interactive job=myJobSerial input=myInputFile.inp A parallel job can be run like this (fill in your own username): module load abaqus/2017 INPUT_FILE=/home/<username>/ABAQUS/heattransfermanifold_cavity_parallel.inp ABAQUS_ARGS= ABAQUS_PARALLELSCRATCH=/home/<username>/Scratch/Abaqus/parallelscratch # creates a parallel scratch dir and a new working dir for this job mkdir -p $ABAQUS_PARALLELSCRATCH mkdir -p $JOB_NAME.$JOB_ID cd $JOB_NAME.$JOB_ID cp $INPUT_FILE . INPUT=$(basename $INPUT_FILE) abaqus interactive cpus=$NSLOTS mp_mode=mpi job=$INPUT.$JOB_ID input=$INPUT \\ scratch=$ABAQUS_PARALLELSCRATCH $ABAQUS_ARGS BEAST \u00a7 BEAST is an application for Bayesian MCMC analysis of molecular sequences orientated towards rooted, time-measured phylogenies inferred using strict or relaxed molecular clock models. Note that FigTree and Tracer are available as standalone modules. The addons DISSECT, MODEL_SELECTION, and SNAPP are installed for BEAST. cd $TMPDIR module load java/1.8.0_45 module load beast/2.3.0 beast -threads $OMP_NUM_THREADS ~/Scratch/BEAST/gopher.xml # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/BEAST/files_from_job_$JOB_ID.tar.gz $TMPDIR Bowtie \u00a7 Bowtie 1 and 2 are tools for aligning sequencing reads to their reference sequences. Bowtie 1 and 2 are available. For reads longer than about 50 bp Bowtie 2 is generally faster, more sensitive, and uses less memory than Bowtie 1. For relatively short reads (e.g. less than 50 bp) Bowtie 1 is sometimes faster and/or more sensitive. For further differences, see How is Bowtie 2 different from Bowtie 1? . Bowtie sets $BT1_HOME and Bowtie2 sets $BT2_HOME . You can have both modules loaded at once. cd $TMPDIR module load bowtie2/2.2.5 # Run Bowtie2 example from getting started guide: # http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#getting-started-with-bowtie-2-lambda-phage-example bowtie2-build $BT2_HOME/example/reference/lambda_virus.fa lambda_virus bowtie2 -x lambda_virus -U $BT2_HOME/example/reads/reads_1.fq -S eg1.sam # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/Bowtie2_output/files_from_job_$JOB_ID.tgz $TMPDIR CASTEP \u00a7 CASTEP is a full-featured materials modelling code based on a first-principles quantum mechanical description of electrons and nuclei. module load castep/17.21/intel-2017 # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun castep.mpi input CASTEP 19 has different pre-reqs: module unload -f compilers mpi module load compilers/intel/2019/update4 module load mpi/intel/2019/update4/intel module load castep/19.1.1/intel-2019 # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun castep.mpi input If you have access to the source code and wish to build your own copy, it has been suggested that compiling with these options (on Grace) gave a build that ran about 10% faster than the default compilation options: make COMMS_ARCH=mpi SUBARCH=mpi FFT=mkl MATHLIBS=mkl10 BUILD=fast Do check for numerical accuracy with any optimisations you carry out. Cctools \u00a7 Provides the Parrot connector to CVMFS, the CernVM File System. By default, the cctools module sets the following: export PARROT_CVMFS_REPO=<default-repositories> export PARROT_ALLOW_SWITCHING_CVMFS_REPOSITORIES=yes export HTTP_PROXY=DIRECT; export PARROT_HTTP_PROXY=DIRECT; Example usage - will list the contents of the repository then exit: module load cctools/7.0.11/gnu-4.9.2 parrot_run bash ls /cvmfs/alice.cern.ch exit That will create the cache in /tmp/parrot.xxxxx on the login nodes when run interactively. To use in a job, you will want to put the cache somewhere in your space that the compute nodes can access. You can set the cache to be in your Scratch, or to $TMPDIR on the nodes if it just needs to exist for the duration of that job. export PARROT_CVMFS_ALIEN_CACHE=</path/to/cache> CFD-ACE \u00a7 CFD-ACE+ is a commercial computational fluid dynamics solver developed by ESI Group. It solves the conservation equations of mass, momentum, energy, chemical species and other scalar transport equations using the finite volume method. These equations enable coupled simulations of fluid, thermal, chemical, biological, electrical and mechanical phenomena. The license is owned by the Department of Mechanical Engineering who must give permission for users to be added to the group lgcfdace . module load cfd-ace/2018.0 CFD-SOLVER -model 3Dstepchannel_060414.DTF -num $NSLOTS -wd `pwd` \\ -hosts $TMPDIR/machines -rsh=ssh -decomp -metis -sim 1 -platformmpi -job COMSOL \u00a7 COMSOL Multiphysics is a cross-platform finite element analysis, solver and multiphysics simulation software. Electrical Engineering have a group license for version 52 and must give permission for users to be added to the group legcomsl . Chemical Engineering have a Departmental License for version 53 and members of that department may be added to the group lgcomsol . # Run a parallel COMSOL job # Versions 52 and 52a have this additional module prerequisite module load xulrunner/3.6.28/gnu-4.9.2 # pick the version to load module load comsol/53a # Parallel multinode options: # $NHOSTS gets the number of nodes the job is running on and # $TMPDIR/machines is the machinefile that tells it which nodes. # These are automatically set up in a \"-pe mpi\" job environment. comsol -nn $NHOSTS -clustersimple batch -f $TMPDIR/machines -inputfile micromixer_batch.mph \\ -outputfile micromixer_batch_output_${JOB_ID}.mph # On Myriad you need to specify the fabric: comsol batch -f $TMPDIR/machines -np $NSLOTS -mpifabrics shm:tcp \\ -inputfile micromixer_batch.mph -outputfile micromixer_batch_output_${JOB_ID}.mph CP2K \u00a7 CP2K performs atomistic and molecular simulations. To see all available versions type module load beta-modules module avail cp2k To load CP2K 8.2: module unload -f compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load compilers/gnu/10.2.0 # These three modules only needed on Myriad module load numactl/2.0.12 module load binutils/2.36.1/gnu-10.2.0 module load ucx/1.9.0/gnu-10.2.0 module load mpi/openmpi/4.0.5/gnu-10.2.0 module load openblas/0.3.13-openmp/gnu-10.2.0 module load cp2k/8.2/ompi/gnu-10.2.0 # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun cp2k.popt < input.in > output.out For CP2K 4.1 there is also a Chemistry department version with submission script generator. To access it: module load chemistry-modules module load submission-scripts The command submitters will then list the submitters available. You can then run cp2k.submit which will ask you questions in order to create a suitable jobscript. The cp2k.submit submitter takes up to 6 arguments, and any omitted will be asked for interactively: cp2k.submit \u00abinput_file\u00bb \u00abcores\u00bb \u00abversion\u00bb \u00abmaximum_run_time\u00bb \u00abmemory_per_core\u00bb \u00abjob_name\u00bb So, for example: cp2k.submit water.inp 8 4.1 2:00:00 4G mywatermolecule would request a job running CP2K 4.1 with the input file water.inp , on 8 cores, with a maximum runtime of 2 hours, with 4 gigabytes of memory per core, and a job name of mywatermolecule . CRYSTAL \u00a7 CRYSTAL is a general-purpose program for the study of crystalline solids. The CRYSTAL program computes the electronic structure of periodic systems within Hartree Fock, density functional or various hybrid approximations. CRYSTAL is commercial software which is available free of charge to UK academics. You must obtain a license from Crystal Solutions: How to get CRYSTAL - Academic UK license . You need to create an account and then request to be upgraded to Academic UK. Access to CRYSTAL is enabled by being a member of the reserved application group legcryst . For proof of access we accept emails from CRYSTAL saying your account has been upgraded to \"Academic UK\", or a screenshot of your account page showing you have the full download available rather than just the demo version. module unload mpi module load mpi/openmpi/2.1.2/intel-2017 module load crystal17/v1.0.1 # 9. Create a directory for this job and copy the input file into it. mkdir test00 cd test00 cp ~/Scratch/Crystal17/test_cases/inputs/test00.d12 INPUT # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. # The CRYSTAL module sets $CRYxx_EXEDIR and $VERSION environment variables. gerun $CRY17_EXEDIR/$VERSION/Pcrystal # Similarly, for Pproperties the command would be gerun $CRY17_EXEDIR/$VERSION/Pproperties For CRYSTAL 17 v1.0.2, the modules and path are slightly different and you would do this instead: module unload -f compilers mpi module load compilers/intel/2017/update4 module load mpi/openmpi/2.1.2/intel-2017 module load crystal17/v1.0.2/intel-2017 # Create a directory for this job and copy the input file into it. mkdir test00 cd test00 cp ~/Scratch/Crystal17/test_cases/inputs/test00.d12 INPUT # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. # The CRYSTAL module sets $CRYxx_EXEDIR and $VERSION environment variables. gerun $CRY17_EXEDIR/Pcrystal FreeSurfer \u00a7 FreeSurfer is a set of tools for analysis and visualization of structural and functional brain imaging data. Freesurfer can use threads to run on multiple cores in one node: request the number with -pe smp in the resource-request part of your jobscript. #$ -pe smp 4 module load xorg-utils/X11R7.7 module load freesurfer/6.0.0 export SUBJECTS_DIR=~/Scratch/FreeSurfer_examples/subjects # -openmp $NSLOTS runs with the number of threads you requested recon-all -openmp $NSLOTS -i sample-001.nii.gz -s bert -all GAMESS \u00a7 The General Atomic and Molecular Electronic Structure System (GAMESS) is a general ab initio quantum chemistry package. The GAMESS module should be loaded once from a login node before submitting a job - this creates the ~/Scratch/gamess directory for you which is used as USERSCR to write some scratch files during the job. If you don't want to keep these files and would prefer them to be written to $TMPDIR instead, you can put export $GAMESS_USERSCR=$TMPDIR in your jobscript after the module load command. module unload compilers mpi module load compilers/intel/2015/update2 module load mpi/intel/2015/update3/intel module load gamess/5Dec2014_R1/intel-2015-update2 # Optional: set where the USERSCR files go. # By default, the module sets it to ~/Scratch/gamess export $GAMESS_USERSCR=$TMPDIR rungms exam01.inp 00 $NSLOTS $(ppn) GATK \u00a7 The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Version 4 of GATK is BSD-licensed so does not require a group to control access to the software. Version 3 of GATK requires you to agree to the GATK license before we can add you to the leggatk group which gives you access: you can do this by downloading GATK 3 from The Broad Institute GATK download page , reading the license, and telling us you agree to it. You may need to create a gatkforums account before you can download. GATK 3 uses Java 1.7 (the system Java) so you do not need to load a Java module. GATK 4 uses 1.8 so you need to load java/1.8.0_92 first. GATK 4.2.5.0 or newer uses the newest version of Java 8, so you need to load java/temurin-8 . Load the version you want, then to run GATK you should either prefix the .jar you want to run with $GATKPATH : java -Xmx2g -jar $GATKPATH/GenomeAnalysisTK.jar OPTION1=value1 OPTION2=value2... Or we provide wrappers, so you can run it one of these ways instead: GenomeAnalysisTK OPTION1=value1 OPTION2=value2... gatk OPTION1=value1 OPTION2=value2... If you want to use some of the newer tools in GATK 4 which rely on Python/Conda, you must use GATK >= 4.2.5.0 and additionally set up your miniconda environment. With 4.2.5.0 this means: module load java/temurin-8 module load gatk/4.2.5.0 module load python/miniconda3/4.10.3 source $UCL_CONDA_PATH/etc/profile.d/conda.sh conda activate $GATK_CONDA (For newer versions of GATK it will tell you which version of miniconda to load) Gaussian \u00a7 Access to Gaussian 09 or Gaussian 16 are controlled by membership of separate groups. UCL has a site license so UCL users can be added on request. Gaussian is too resource-intensive to ever be run on the login nodes. Multithreaded shared memory Gaussian jobs \u00a7 The main Gaussian executable lets you run jobs that use from 1 core up to a full node. When using more than one core, make sure your input file contains %NProcShared= with the number of cores your job is requesting. $GAUSS_SCRDIR is where Gaussian puts temporary files which can use a lot of space. On Myriad in a job this is created inside $TMPDIR by default. On diskless clusters, this is set this to a directory in your Scratch instead: loading one of the Gaussian modules will handle this automatically and show where it has created the directory. # Example for Gaussian 16 # Set up runtime environment module load gaussian/g16-a03/pgi-2016.5 source $g16root/g16/bsd/g16.profile # Run g16 job g16 input.com # Example for Gaussian 09 # Setup runtime environment module load gaussian/g09-d01/pgi-2015.7 source $g09root/g09/bsd/g09.profile # Run g09 job g09 input.com Linda parallel Gaussian jobs \u00a7 Only currently working for Gaussian 09. Gaussian Linda jobs can run across multiple nodes. # Select the MPI parallel environment and 80 cores total #$ -pe mpi 80 # 8. Select number of threads per Linda worker (value of NProcShared in your # Gaussian input file. This will give 80/40 = 2 Linda workers. export OMP_NUM_THREADS=40 # Setup g09 runtime environment module load gaussian/g09-d01/pgi-2015.7 source $g09root/g09/bsd/g09.profile # Pre-process g09 input file to include nodes allocated to job echo \"Running: lindaConv testdata.com $JOB_ID $TMPDIR/machines\" echo '' $lindaConv testdata.com $JOB_ID $TMPDIR/machines # Run g09 job echo \"Running: g09 \\\"job$JOB_ID.com\\\"\" # communication needs to be via ssh not the Linda default export GAUSS_LFLAGS='-v -opt \"Tsnet.Node.lindarsharg: ssh\"' g09 \"job$JOB_ID.com\" Troubleshooting: Memory errors \u00a7 If you encounter errors like: Out-of-memory error in routine ShPair-LoodLd2 (IEnd= 257724 MxCore= 242934) Use %mem=48MW to provide the minimum amount of memory required to complete this step. Try adding this to your jobscript: export GAUSS_MEMDEF=48000000 You may need to increase this value even more to allow it to run. Troubleshooting: No space left on device \u00a7 If you get this error g_write: No space left on device The $GAUSS_SCRDIR is probably full - if it was on a cluster that has local disks and is using $TMPDIR you should increase the amount of tmpfs you are requesting in your jobscript. Otherwise check lquota for your data usage and potentially request a larger Scratch. GROMACS \u00a7 We have many versions of GROMACS installed, some built with Plumed. The module name will indicate this. Which executable you should run depends on the problem you wish to solve. For both single and double precision version builds, serial binaries and an MPI binary for mdrun ( mdrun_mpi for newer versions, gmx_mpi for Plumed and some older versions) are provided. Double precision binaries have a _d suffix (so gmx_d , mdrun_mpi_d , gmx_mpi_d etc). You can see what the executable names are by running module show gromacs/2021.2/gnu-7.3.0 for example and then running the ls command on the bin directory that the module tells you that version is installed in. # Example for GPU gromacs/2021.5/cuda-11.3 module load beta-modules module unload -f compilers mpi gcc-libs module load gcc-libs/10.2.0 module load compilers/gnu/10.2.0 module load python3/3.9-gnu-10.2.0 module load cuda/11.3.1/gnu-10.2.0 module load mpi/openmpi/4.0.5/gnu-10.2.0 module load gromacs/2021.5/cuda-11.3 # Run GROMACS - the executables are gmx_cuda, gmx_mpi_cuda and mdrun_mpi_cuda # Example for gromacs/2021.2/gnu-7.3.0 module load beta-modules module unload -f compilers mpi gcc-libs module load gcc-libs/7.3.0 module load compilers/gnu/7.3.0 module load mpi/openmpi/3.1.4/gnu-7.3.0 module load python3 module load gromacs/2021.2/gnu-7.3.0 # Run GROMACS - replace with mdrun command line suitable for your job! gerun mdrun_mpi -v -stepout 10000 # Example for gromacs/2019.3/intel-2018 module unload -f compilers mpi module load compilers/intel/2018/update3 module load mpi/intel/2018/update3/intel module load gromacs/2019.3/intel-2018 # Run GROMACS - replace with mdrun command line suitable for your job! gerun mdrun_mpi -v -stepout 10000 # Plumed example for gromacs/2019.3/plumed/intel-2018 module unload -f compilers mpi module load compilers/intel/2018/update3 module load mpi/intel/2018/update3/intel module load libmatheval module load flex module load plumed/2.5.2/intel-2018 module load gromacs/2019.3/plumed/intel-2018 # Run GROMACS - replace with mdrun command line suitable for your job! gerun gmx_mpi -v -stepout 10000 Passing in options to GROMACS non-interactively \u00a7 Some GROMACS executables like trjconv normally take interactive input. You can't do this in a jobscript, so you need to pass in the input you would normally type in. There are several ways of doing this, mentioned at GROMACS Documentation - Using Commands in Scripts . The simplest is to echo the input in and keep your gmx options as they would normally be. If the inputs you would normally type were 3 and 3, then you can do this: echo 3 3 | gmx whatevercommand -options Checkpoint and restart \u00a7 GROMACS has built-in checkpoint and restart ability, so you can use this if your runs will not complete in the maximum 48hr wallclock time. Have a look at the GROMACS manual for full details, as there are more options than mentioned here. You can tell GROMACS to write a checkpoint file when it is approaching the maximum wallclock time available, and then exit. In this case, we had asked for 48hrs wallclock. This tells GROMACS to start from the last checkpoint if there is one, and write a new checkpoint just before it reaches 47 hrs runtime. gerun mdrun_mpi -cpi -maxh 47 <options> The next job you submit with the same script will carry on from the checkpoint the last job wrote. You could use job dependencies to submit two identical jobs at the same time and have one dependent on the other, so it won't start until the first finishes - have a look at man qsub for the -hold_jid option. You can also write checkpoints at given intervals: # Write checkpoints every 120 mins, start from checkpoint if there is one. gerun mdrun_mpi -cpi -cpt 120 <options> Hammock \u00a7 Hammock is a tool for peptide sequence clustering. It is able to cluster extremely large amounts of short peptide sequences into groups sharing sequence motifs. Typical Hammock applications are NGS-based experiments using large combinatorial peptide libraries, e.g. Phage display. Hammock has to be installed in your own space to function, so we provide a hammock module that contains the main dependencies and creates a quick-install alias: # on the login nodes module unload compilers module load hammock/1.0.5 do-hammock-install This will install Hammock 1.0.5 in your home, edit settings.prop to use clustal-omega and hmmer from our modules and tell it to write temporary files in your Scratch directory (in the form Hammock_temp_time ). # in your jobscript module unload compilers module load hammock/1.0.5 # This copies the MUSI example that comes with Hammock into your working # directory and runs it. The module sets $HAMMOCKPATH for you. # You must set the output directory to somewhere in Scratch with -d. # Below makes a different outputdir per job so multiple runs don't overwrite files. cp $HAMMOCKPATH/../examples/MUSI/musi.fa . outputdir=~/Scratch/hammock-examples/musi_$JOB_ID mkdir -p $outputdir echo \"Running java -jar $HAMMOCKPATH/Hammock.jar full -i musi.fa -d $outputdir\" java -jar $HAMMOCKPATH/Hammock.jar full -i musi.fa -d $outputdir HOPSPACK \u00a7 HOPSPACK (Hybrid Optimization Parallel Search PACKage) solves derivative-free optimization problems using an open source, C++ software framework. We have versions of HOPSPACK built using the GNU compiler and OpenMPI, and the Intel compiler and MPI. This example shows the GNU version. Serial and parallel versions are available, HOPSPACK_main_mpi and HOPSPACK_main_serial . module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/openmpi/1.8.4/gnu-4.9.2 module load atlas/3.10.2/gnu-4.9.2 module load hopspack/2.0.2/gnu-4.9.2 # Add the examples directory we are using to our path. # Replace this with the path to your own executables. export PATH=$PATH:~/Scratch/examples/1-var-bnds-only/ # Run parallel HOPSPACK. # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun HOPSPACK_main_mpi ~/Scratch/examples/1-var-bnds-only/example1_params.txt > example1_output.txt IDL \u00a7 IDL is a complete environment and language for the analysis and visualisation of scientific and other technical data. It can be used for everything from quick interactive data exploration to building complex applications. Single-threaded jobscript: cd $TMPDIR module load idl/8.4.1 # Copy IDL source files to $TMPDIR cp ~/Scratch/IDL/fib.pro $TMPDIR cp ~/Scratch/IDL/run1.pro $TMPDIR idl -queue -e @run1.pro # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/IDL_output/files_from_job_$JOB_ID.tgz $TMPDIR Parallel jobscript: cd $TMPDIR module load idl/8.1 # this sets the IDL thread pool: do not change this export IDL_CPU_TPOOL_NTHREADS=$OMP_NUM_THREADS # Copy IDL source files to $TMPDIR cp ~/Scratch/IDL/fib.pro $TMPDIR cp ~/Scratch/IDL/run2mp.pro $TMPDIR idl -queue -e @run2mp.pro # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/IDL_output/files_from_job_$JOB_ID.tgz $TMPDIR JAGS \u00a7 JAGS (Just Another Gibbs Sampler) is a program for analysis of Bayesian hierarchical models using Markov Chain Monte Carlo (MCMC) simulation not wholly unlike BUGS. Use this to use JAGS in standalone command line mode: module unload compilers mpi module load compilers/gnu/4.9.2 module load openblas/0.2.14/gnu-4.9.2 module load jags/4.2.0/gnu.4.9.2-openblas We have also added JAGS support to r/recommended using the rjags and R2jags R packages. LAMMPS \u00a7 LAMMPS is an open source parallel molecular dynamics code which exhibits good scaling in a wide range of environments. The LAMMPS binaries are called lmp_$cluster and all have an lmp_default symlink which can be used. LAMMPS-8Dec15 and later were built with additional packages kspace , replica , rigid , and class2 . The versions from lammps-16Mar18-basic_install onwards (not lammps/16Mar18/intel-2017 ) have most of the included packages built. There are also userintel and gpu versions from this point. We do not install the LAMMPS user packages as part of our central install, but you can build your own version with the ones that you want in your space. module -f unload compilers mpi module load compilers/intel/2018 module load mpi/intel/2018 module load lammps/16Mar18/basic/intel-2018 # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun $(which lmp_default) -in inputfile For the latest version of LAMMPS we have installed which is 29th September 2021 Update 2 where the binaries are called lmp_mpi for the MPI version and lmp_gpu for the GPU version: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load compilers/gnu/10.2.0 module load mpi/openmpi/4.0.5/gnu-10.2.0 module load python3/3.9-gnu-10.2.0 module load lammps/29sep21up2/basic/gnu-10.2.0 gerun lmp_mpi -in inputfile for the basic MPI version and: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load compilers/gnu/10.2.0 # these three modules for Myriad only module load numactl/2.0.12 module load binutils/2.36.1/gnu-10.2.0 module load ucx/1.9.0/gnu-10.2.0 module load mpi/openmpi/4.0.5/gnu-10.2.0 module load cuda/11.3.1/gnu-10.2.0 module load python3/3.9-gnu-10.2.0 module load lammps/29sep21up2/gpu/gnu-10.2.0 gerun lmp_gpu -sf gpu -pk gpu 1 -in inputfile for the version with GPU support which is only available on clusters with GPUs. The MPI version is available on all clusters. On Myriad the numactl , binutils and ucx modules are additionally needed by OpenMPI. LAMMPS 29th September 2021 Update 2 has been built with the GNU compilers, OpenMPI and CUDA for the GPU version. We also have Intel installs: # LAMMPS 29 Sep 2021 Update 2 with Intel compilers and INTEL package module unload -f compilers mpi module load compilers/intel/2020/release module load mpi/intel/2019/update6/intel module load python/3.9.10 module load lammps/29sep21up2/userintel/intel-2020 gerun lmp_mpi -in inputfile # LAMMPS 29 Sep 2021 Update 2 for GPU with Intel compilers module unload -f compilers mpi module load beta-modules module load compilers/intel/2020/release module load mpi/intel/2019/update6/intel module load python/3.9.10 module load cuda/11.3.1/gnu-10.2.0 module load lammps/29sep21up2/gpu/intel-2020 gerun lmp_gpu -sf gpu -pk gpu 1 -in inputfile MEME Suite \u00a7 MEME Suite: Motif-based sequence analysis tools. This install is for the command-line tools and connects to their website for further analysis. module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/openmpi/1.8.4/gnu-4.9.2 module load perl/5.22.0 module load python2/recommended module load ghostscript/9.16/gnu-4.9.2 module load meme/4.10.1_4 miRDeep2 \u00a7 Discovering known and novel miRNAs from deep sequencing data, miRDeep2 is a completely overhauled tool which discovers microRNA genes by analyzing sequenced RNAs. The tool reports known and hundreds of novel microRNAs with high accuracy in seven species representing the major animal clades. module load squid/1.9g module load randfold/2.0 module load perl/5.22.0 module load bowtie/1.1.2 module load python/2.7.9 module load viennarna/2.1.9 module load mirdeep/2.0.0.7 MISO/misopy \u00a7 MISO (Mixture of Isoforms) is a probabilistic framework that quantitates the expression level of alternatively spliced genes from RNA-Seq data, and identifies differentially regulated isoforms or exons across samples. misopy is available as part of the python2/recommended bundle. MISO can run multithreaded on one node, or can submit multiple independent single-core jobs at once using the --use-cluster option. If you want to use MISO's ability to create and submit jobs itself, you need a MISO settings file like the one shown below. You give your job options as arguments to the qsub command in the cluster_command line. Settings files can be used with the --settings-filename=SETTINGS_FILENAME option. You will also need to put your module unload and load commands in your .bashrc if using MISO's own job submission, because you are no longer including them in a jobscript. Example miso_settings.txt . Multithreaded jobs will use num_processors . num_processors is ignored if --use-cluster is specified: [data] filter_results = True min_event_reads = 20 [cluster] cluster_command = \"qsub -l h_rt=00:10:00 -l mem=1GB -wd ~/Scratch\" [sampler] burn_in = 500 lag = 10 num_iters = 5000 num_chains = 6 num_processors = 4 MOLPRO \u00a7 Molpro is a complete system of ab initio programs for molecular electronic structure calculations. Molpro 2015.1.3 was provided as binary only and supports communication over Ethernet and not Infiniband - use this one on single-node jobs primarily. Molpro 2015.1.5 was built from source with the Intel compilers and Intel MPI, so can be run multi-node. Molpro 2020.1 is a more recent binary install and supports both. module load molpro/2015.1.5/intel-2015-update2 # Example files available in /shared/ucl/apps/molpro/2015.1.5/intel-2015-update2/molprop_2015_1_linux_x86_64_i8/examples/ # If this is a multi-node job you need to set the wavefunction directory to # somewhere in Scratch with -W. For a single-node job -W should be in $TMPDIR. # You can use $SGE_O_WORKDIR to refer to the directory you set with -wd in your jobscript. # $NSLOTS will use the number of cores you requested with -pe mpi. echo \"Running molpro -n $NSLOTS -W $TMPDIR h2o_scf.com\" molpro -n $NSLOTS -W $TMPDIR h2o_scf.com On Myriad, if you get this error with the MPI 2015 install, please use the binary 2015.1.3 install. libi40iw-i40iw_ucreate_qp: failed to create QP, unsupported QP type: 0x4 Output: MOLPRO can end up writing very many small output files, and this is detrimental to the performance of a parallel filesystem like Lustre. If you are running jobs on Myriad then you should set your -I -d and (especially) -W directories to be in $TMPDIR so they can be accessed quickly and not slow down other jobs. At the end of the job, copy back the data you want to keep into your Scratch. If you are running parallel multi-node jobs and the directories need to be readable by all the nodes, then you need to write to Scratch. MRtrix \u00a7 MRtrix provides a set of tools to perform diffusion-weighted MRI white matter tractography in the presence of crossing fibres. module load python3/recommended module load qt/4.8.6/gnu-4.9.2 module load eigen/3.2.5/gnu-4.9.2 module load fftw/3.3.6-pl2/gnu-4.9.2 module load mrtrix/3.0rc3/gnu-4.9.2/nogui You must load these modules once from a login node before submitting a job. It copies a .mrtrix.conf to your home directory the first time you run this module from a login node, which sets: Analyse.LeftToRight: false NumberOfThreads: 4 You need to alter NumberOfThreads to what you are using in your job script before you submit a job. The MRtrix GUI tools are unavailable: mrview and shview in MRtrix 3 cannot be run over a remote X11 connection so are not usable on our clusters. To use these tools you will need a local install on your own computer. MuTect \u00a7 MuTect is a tool developed at the Broad Institute for the reliable and accurate identification of somatic point mutations in next generation sequencing data of cancer genomes. It is built on top of the GenomeAnalysisToolkit (GATK), which is also developed at the Broad Institute, so it uses the same command-line conventions and (almost all) the same input and output file formats. MuTect requires you to agree to the GATK license before we can add you to the lgmutect group which gives you access: you can do this by downloading MuTect from The Broad Institute CGA page . You may need to create a gatkforums account before you can download. MuTect is currently not compatible with Java 1.8, so you need to use the system Java 1.7. Set up your modules as follows: module load mutect/1.1.7 Then to run MuTect, you should either prefix the .jar you want to run with $MUTECTPATH : java -Xmx2g -jar $MUTECTPATH/mutect-1.1.7.jar OPTION1=value1 OPTION2=value2... Or we provide wrappers, so you can run it this way instead: mutect OPTION1=value1 OPTION2=value2... NAMD \u00a7 NAMD is a parallel molecular dynamics code designed for high-performance simulation of large biomolecular systems. We have several different types of install, some of them suited to particular clusters only. To see all the versions, type module avail namd . These examples are running the apoa1 benchmark, available from the NAMD website . Multicore GPU \u00a7 This version of NAMD runs within one GPU node. It can run on multiple GPUs on that node, but not across multiple different nodes. NAMD uses the CPUs and GPUs together so it is recommended you request all the cores on the node if you are requesting all the GPUs. For best performance of simulations it is recommended that you use an entire node, all the CPUs and all the available GPUs. # request a number of CPU cores and GPUs #$ -pe smp 10 #$ -l gpu=1 module load namd/2.14/multicore-gpu # ${NSLOTS} will get the number of cores you asked for with -pe smp. # +setcpuaffinity is recommended to make sure threads are assigned to specific CPUs. namd2 +p${NSLOTS} +setcpuaffinity apoa1_nve_cuda.namd OFI \u00a7 This version of NAMD is for clusters with OmniPath interconnects (not Myriad). It can run across multiple nodes. The OFI versions should use significantly less memory than the older MPI-based installs. module unload -f compilers mpi module load compilers/intel/2019/update5 module load mpi/intel/2019/update5/intel module load namd/2.14/ofi/intel-2019 # ${NSLOTS} will get the number of cores you asked for with -pe. charmrun +p${NSLOTS} namd2 apoa1.namd OFI-SMP \u00a7 This version of NAMD runs with threads (smp) and processes and is for clusters with OmniPath interconnects (not Myriad). It can run across multiple nodes. The OFI versions should use significantly less memory than the older MPI-based installs. module unload -f compilers mpi module load compilers/intel/2019/update5 module load mpi/intel/2019/update5/intel module load namd/2.14/ofi-smp/intel-2019 # ${NSLOTS} will get the number of cores you asked for with -pe. # +setcpuaffinity is recommended to make sure threads are assigned to specific CPUs. # ++ppn is the number of PEs (or worker threads) to create for each process. charmrun +p${NSLOTS} namd2 apoa1.namd ++ppn2 +setcpuaffinity OFI-SMP-GPU \u00a7 This version of NAMD runs with threads (smp) and processes and is for clusters with OmniPath interconnects as well as GPUs (not Myriad). It can run across multiple nodes. # request a number of CPU cores and GPUs #$ -pe smp 24 #$ -l gpu=2 module unload -f compilers mpi gcc-libs module load beta-modules module load gcc-libs/7.3.0 module load compilers/intel/2019/update5 module load mpi/intel/2019/update5/intel module load cuda/11.3.1/gnu-10.2.0 module load namd/2.14/ofi-smp-gpu/intel-2019 # ${NSLOTS} will get the number of cores you asked for with -pe. # +setcpuaffinity is recommended to make sure threads are assigned to specific CPUs. # ++ppn is the number of PEs (or worker threads) to create for each process. # The number of GPU devices must be a multiple of the number of NAMD processes # since processes cannot share GPUs. # Here we have ++ppn12 for 12 threads, and charmrun works out we have 2 NAMD processes # available for the 2 GPUs. charmrun +p${NSLOTS} namd2 apoa1_nve_cuda.namd ++ppn12 +setcpuaffinity MPI \u00a7 These are older versions. It is recommended to run the OFI versions above instead if possible. module load fftw/2.1.5/intel-2015-update2 module load namd/2.13/intel-2018-update3 # GErun is our mpirun wrapper that gets $NSLOTS and the machinefile for you. gerun namd2 apoa1.namd NONMEM \u00a7 NONMEM\u00ae is a nonlinear mixed effects modelling tool used in population pharmacokinetic / pharmacodynamic analysis. We have one build that uses the GNU compiler and ATLAS and an Intel build using MKL. Both use Intel MPI. This example uses the Intel build. jobDir=example1_parallel_$JOB_ID mkdir $jobDir # Copy control and datafiles to jobDir cp /shared/ucl/apps/NONMEM/examples/foce_parallel.ctl $jobDir cp /shared/ucl/apps/NONMEM/examples/example1b.csv $jobDir cd $jobDir module unload compilers mpi module load compilers/intel/2015/update2 module load mpi/intel/2015/update3/intel module load nonmem/7.3.0/intel-2015-update2 # Create parafile for job using $TMPDIR/machines parafile.sh $TMPDIR/machines > example1.pnm nmfe73 foce_parallel.ctl example1.res -parafile=example1.pnm -background -maxlim=1 > example1.log NWChem \u00a7 NWChem applies theoretical techniques to predict the structure, properties, and reactivity of chemical and biological species ranging in size from tens to millions of atoms. You should load the NWChem module you wish to use once from a login node, as it will create a symlinked .nwchemrc in your home. module unload compilers mpi module load compilers/intel/2017/update4 module load mpi/intel/2017/update3/intel module load python/2.7.12 module load nwchem/6.8-47-gdf6c956/intel-2017 # $NSLOTS will get the number of processes you asked for with -pe mpi. mpirun -np $NSLOTS -machinefile $TMPDIR/machines nwchem hpcvl_sample.nw NWChem troubleshooting \u00a7 If you get errors like this { 0, 3}: On entry to PDSTEDC parameter number 10 had an illegal value then you are coming across an error in Intel MKL 2018, and should make sure you change to the Intel 2017 compiler module as shown above. (MKL versions are bundled with the corresponding Intel compiler modules). If your run terminates with an error saying ARMCI supports block process mapping only then you are probably trying to use round-robin MPI process placement, which ARMCI does not like. gerun uses round-robin for Intel MPI by default as it works better in most cases. Use mpirun instead of gerun : mpirun -np $NSLOTS -machinefile $TMPDIR/machines nwchem input.nw If you get an error complaining about $NWCHEM_NWPW_LIBRARY similar to this: warning:::::::::::::: from_compile NWCHEM_NWPW_LIBRARY is: < /dev/shm/tmp.VB3DpmjULc/nwchem-6.6/src/nwpw/libraryps/> but file does not exist or you do not have access to it ! ------------------------------------------------------------------------ nwpwlibfile: no nwpw library found 0 then your ~/.nwchemrc symlink is likely pointing to a different version that you used previously. Deleting the symlink and loading the module you want to use will recreate it correctly. ORCA \u00a7 ORCA is an ab initio, DFT, and semi-empirical SCF-MO package. module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/openmpi/3.1.4/gnu-4.9.2 module load orca/4.2.1-bindist/gnu-4.9.2 orca input.inp > output.out If you want to run ORCA in parallel using MPI, the jobscript will be the same but you will need to add the !PAL keyword to your input file to tell it how many processes to use. (You do not use mpirun or gerun with ORCA). Picard \u00a7 Picard comprises Java-based command-line utilities that manipulate SAM files, and a Java API (SAM-JDK) for creating new programs that read and write SAM files. Both SAM text format and SAM binary (BAM) format are supported. Picard requires a Java 1.8 module to be loaded. module load java/1.8.0_92 module load picard-tools/2.18.9 To run Picard you can prefix the .jar you want to run with $PICARDPATH and give the full command, or we have wrappers: java -Xmx2g -jar $PICARDPATH/picard.jar PicardCommand TMP_DIR=$TMPDIR OPTION1=value1 OPTION2=value2... The wrappers allow you to run commands like this - in this case our wrapper sets TMP_DIR for you as well: PicardCommand OPTION1=value1 OPTION2=value2... Temporary files: by default, Picard writes temporary files into /tmp rather than into $TMPDIR . These are not cleaned up after your job ends, and means future runs can fail because /tmp is full (and requesting more tmpfs in your job doesn't make it larger). If you run Picard with the full java -jar command then give Picard the TMP_DIR=$TMPDIR option as our example above does to get it to write in the correct place. Quantum Espresso \u00a7 Quantum Espresso is an integrated suite of Open-Source computer codes for electronic-structure calculations and materials modelling at the nanoscale. It is based on density-functional theory, plane waves, and pseudopotentials. module load xorg-utils module load quantum-espresso/6.1-impi/intel2017 # Set the path here to where ever you keep your pseudopotentials. export ESPRESSO_PSEUDO=$HOME/qe-psp # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun pw.x -in input.in >output.out Repast HPC \u00a7 Repast for High Performance Computing (Repast HPC) is a next generation agent-based modelling system intended for large-scale distributed computing platforms. It implements the core Repast Simphony concepts (e.g. contexts and projections), modifying them to work in a parallel distributed environment. module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load hdf/5-1.8.15/gnu-4.9.2 module load netcdf/4.3.3.1/gnu-4.9.2 module load netcdf-fortran/4.4.1/gnu-4.9.2 module load mpi/openmpi/1.8.4/gnu-4.9.2 module load python/2.7.9 module load boost/1_54_0/mpi/gnu-4.9.2 module load netcdf-c++/4.2/gnu-4.9.2 module load repast-hpc/2.1/gnu-4.9.2 The module sets the environment variables $REPAST_HPC_INCLUDE , $REPAST_HPC_LIB_DIR and $REPAST_HPC_LIB . ROOT \u00a7 ROOT provides a set of OO frameworks for handling, analysing, and visualising large amounts of data. Included are specialised storage methods, methods for histograming, curve fitting, function evaluation, minimization etc. ROOT includes a built-in CINT C++ interpreter. module unload compilers mpi module load compilers/gnu/4.9.2 module load fftw/3.3.4/gnu-4.9.2 module load gsl/1.16/gnu-4.9.2 module load root/6.04.00/gnu-4.9.2 # run root in batch mode root -b -q myMacro.C > myMacro.out SAS \u00a7 SAS is a statistics package providing a wide range of tools for data management, analysis and presentation. cd $TMPDIR module load sas/9.4/64 # copy all your input files into $TMPDIR cp ~/Scratch/sas_input/example1/* $TMPDIR sas example1.in # tar up all contents of $TMPDIR back into your space tar cvzf $HOME/Scratch/SAS_output/files_from_job_$JOB_ID.tgz $TMPDIR StarCCM+ \u00a7 StarCCM+ is a commercial CFD package that handles fluid flows, heat transfer, stress simulations, and other common applications of such. Before running any StarCCM+ jobs on the clusters you must load the StarCCM+ module on a login node. This is so the module can set up two symbolic links in your home directory to directories created in your Scratch area so that user settings etc can be written by running jobs. module load star-ccm+/13.06.012 Here is the jobscript example. # Request one license per core - makes sure your job doesn't start # running until sufficient licenses are free. #$ -l ccmpsuite=1 module load star-ccm+/13.06.012 starccm+ -np $NSLOTS -machinefile $TMPDIR/machines -rsh ssh -batch my_input.sim hfi error \u00a7 If you get an error like this: hfi_wait_for_device: The /dev/hfi1_0 device failed to appear after 15.0 seconds: Connection timed out then you need to add -fabric ibv to your options as shown in the example script. It is trying to use an OmniPath device on a cluster that has InfiniBand, so the fabric needs to be changed. If you have this left over in jobscripts from Grace, you need to remove it on Kathleen. StarCD \u00a7 StarCD is a commercial package for modelling and simulating combustion and engine dynamics. You must request access to the group controlling StarCD access (legstarc) to use it. The license is owned by the Department of Mechanical Engineering who will need to approve your access request. # Request one license per core - makes sure your job doesn't start # running until sufficient licenses are free. #$ -l starsuite=1 module load star-cd/4.28.050 # run star without its tracker process as this causes multicore jobs to die early star -notracker StarCD uses IBM Platform MPI by default. You can also run StarCD simulations using Intel MPI by changing the command line to: star -notracker -mpi=intel Simulations run using Intel MPI may run faster than they do when using IBM Platform MPI. If being run on a diskless cluster without available $TMPDIR like Kathleen, then StarCD will create a $HPC_SCRATCH location to store its temporary files when the module is loaded. In a job this is set to $HOME/Scratch/STAR_ScrDirs/[randomLabel] and it will make this directory and notify that it did this in your .e file. You can delete the randomly-named directory after the job ends. To set the location yourself, after you load the module you can set it to any other existing directory instead: export HPC_SCRATCH=/path/to/desired/location Stata/MP \u00a7 Stata is a statistics, data management, and graphics system. Stata/MP is the version of the package that runs on multiple cores. We have a sixteen user license of Stata/MP. Our license supports Stata running on up to four cores per job. # Select 4 OpenMP threads (the most possible) #$ -pe smp 4 cd $TMPDIR module load stata/15 # copy files to $TMPDIR cp myfile.do $TMPDIR stata-mp -b do myfile.do # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/Stata_output/files_from_job_$JOB_ID.tar.gz $TMPDIR Torch \u00a7 Torch is a scientific computing framework with wide support for machine learning algorithms that puts GPUs first. We provide a torch-deps module that contains the main Torch dependencies and creates a quick-install alias, do-torch-install . This uses Torch's installation script to git clone the current distribution and install LuaJIT, LuaRocks and Torch in ~/torch . module unload compilers mpi module load torch-deps do-torch-install You should load these same modules in your jobscript when using the version of torch this installs. Turbomole \u00a7 Turbomole is an ab initio computational chemistry program that implements various quantum chemistry methods. Turbomole has a Chemistry-wide license. Reserved application group legtmole for Chemistry users only. There are scripts you can use to generate Turbomole jobs for you: /shared/ucl/apps/turbomole/turbomole-mpi.submit /shared/ucl/apps/turbomole/turbomole-smp.submit They will ask you which version you want to use, how much memory, how many cores etc and set up and submit the job for you. Use the first for MPI jobs and the second for single-node shared memory threaded jobs. VarScan \u00a7 VarScan is a platform-independent mutation caller for targeted, exome, and whole-genome resequencing data generated on Illumina, SOLiD, Life/PGM, Roche/454, and similar instruments. module load java/1.8.0_45 module load varscan/2.3.9 Then to run VarScan, you should either prefix the .jar you want to run with $VARSCANPATH: java -Xmx2g -jar $VARSCANPATH/VarScan.v2.3.9.jar OPTION1=value1 OPTION2=value2... Or we provide wrappers, so you can run it this way instead: varscan OPTION1=value1 OPTION2=value2... VASP \u00a7 The Vienna Ab initio Simulation Package (VASP) is a computer program for atomic scale materials modelling, e.g. electronic structure calculations and quantum-mechanical molecular dynamics, from first principles. VASP is licensed software. To gain access, you need to email us letting us know what email address you are named on a VASP license using. You can also mention the name and email of the main VASP license holder and the license number if you have it, though this is not necessary. We will then check in the VASP portal if we can give you access. We will add you to the legvasp5 or legvasp6 reserved application groups depending on which versions you are licensed for, and remove you when VASP tell us you no longer have access. The VASP executables for current versions are named like this: vasp_gam - optimised for gamma point calculations only vasp_std - standard version vasp_ncl - for non-collinear magnetic structure and/or spin-orbit coupling calculations VASP 5 \u00a7 # vasp 5 module unload -f compilers mpi module load compilers/intel/2017/update1 module load mpi/intel/2017/update1/intel module load vasp/5.4.4-18apr2017/intel-2017-update1 # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun vasp_std > vasp_output.$JOB_ID Note: although you can run VASP using the default Intel 2018 compiler this can lead to numerical errors in some types of simulation. In those cases we recommend switching to the specific compiler and MPI version used to build that install (mentioned at the end of the module name). We do this in the example above. Building your own VASP: You may also install your own copy of VASP in your home if you have access to the source, and we provide a simple VASP individual install script (tested with VASP 5.4.4, no patches). You need to download the VASP source code into your home directory and then you can run the script following the instructions at the top. VASP 6 \u00a7 # vasp 6 module unload -f compilers mpi module load compilers/intel/2019/update5 module load mpi/intel/2019/update5/intel module load vasp/6.3.0-24Jan2022/intel-2019-update5 gerun vasp_std > vasp_output.$JOB_ID VASP 6 GPU \u00a7 This is the OpenACC GPU port of VASP. The VASP documentation has some information about suitable numbers of MPI processes vs GPUs. # vasp 6 GPU # request a gpu #$ -l gpu=1 module unload -f compilers mpi module load compilers/nvidia/hpc-sdk/22.1 module load fftw/3.3.10/nvidia-22.1 module load vasp/6.3.0-24Jan2022/nvidia-22.1-gpu gerun vasp_std > vasp_output.$JOB_ID XMDS \u00a7 XMDS allows the fast and easy solution of sets of ordinary, partial and stochastic differential equations, using a variety of efficient numerical algorithms. We have XMDS 3 and XMDS 2 installed. For XMDS 3.0.0 you will need to load the modules on a login node and run xmds3-setup to set up XMDS. module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/intel/2015/update3/gnu-4.9.2 module load python3/3.7 module load fftw/3.3.4-impi/gnu-4.9.2 module load hdf/5-1.8.15/gnu-4.9.2 module load xmds/3.0.0 # run this on a login node to set up XMDS xmds3-setup You can also build the current developmental version from SVN in your space by running create-svn-xmds3-inst . For XMDS 2.2.2 you will need to load the modules on a login node and run xmds2-setup to set up XMDS. module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/intel/2015/update3/gnu-4.9.2 module load python2/recommended module load fftw/3.3.4-impi/gnu-4.9.2 module load hdf/5-1.8.15/gnu-4.9.2 module load xmds/2.2.2 # run this on a login node to set up XMDS xmds2-setup Note that the create-svn-xmds-inst SVN install using the 2.2.2 modules will no longer work since the release of XMDS 3.0.0 (see above to use that).","title":"Other Software"},{"location":"Software_Guides/Other_Software/#general-use-of-environment-modules","text":"We have a default set of modules that everyone has loaded when they log in: these include the current default compiler and MPI, some utili ties to make your life easier and some text editors.","title":"General use of environment modules"},{"location":"Software_Guides/Other_Software/#summary-of-module-commands","text":"module avail # shows available modules module whatis # shows available modules with brief explanations module list # shows your currently loaded modules module load <module> # load this module module unload <module> # unload this module module purge # unload all modules module show <module> # Shows what the module requires and what it sets up module help <module> # Shows a longer text description for the software","title":"Summary of module commands"},{"location":"Software_Guides/Other_Software/#find-out-if-a-software-package-is-installed-and-load-it","text":"Generically, the way you find out if a piece of software is installed is to run module load beta-modules module avail packagename By loading beta-modules you will also be able to see newer versions of GCC and the software that has been built using them. Then module avail gives you a list of all the modules we have that match the name you searched for. You can then type module show packagename and it will show you the other software dependencies this module has: these have to be loaded first. It also shows where the software is installed and what environment variables it sets up. Once you have found the modules you want to load, it is good practice to refer to them using their full name, including the version. If you use the short form ( package rather than package/5.1.2/gnu-4.9.2 ) then a matching module will be loaded, but if we install a different version, your jobs may begin using the new one and you would not know which version created your results. Different software versions may not be compatible or may have different default settings, so this is undesirable. You may need to unload current modules in order to load some requirements (eg different compiler, different MPI). This example switches from Intel compiler and MPI modules to GNU ones. module unload -f compilers mpi module load compilers/gnu/4.9.2 module load mpi/openmpi/3.1.4/gnu-4.9.2 You can use the short name when unloading things because there is usually only one match in your current modules. The last part of a module name usually tells you what compiler it was built with and which version of that compiler. There may be GNU compiler versions and Intel compiler versions of the same software available. Once the module is loaded, you should have all the usual executables in your path, and can use its commands. You load modules in exactly the same way inside a jobscript.","title":"Find out if a software package is installed and load it"},{"location":"Software_Guides/Other_Software/#notes-on-how-to-run-specific-packages","text":"The packages below have slightly complex commands needed to run them, or different settings needed on our clusters. These are examples of what should be added to your jobscripts. Change the module load command to the version you want to load and check that the dependencies are the same. The top of a jobscript should contain your resource requests . See also examples of full jobscripts .","title":"Notes on how to run specific packages"},{"location":"Software_Guides/Other_Software/#abaqus","text":"ABAQUS is a commercial software suite for finite element analysis and computer-aided engineering. You must be authorised by the Mech Eng Department before you can be added to the group controlling access to ABAQUS (legabq). A serial interactive analysis can be run on the compute nodes (via a qrsh session) like this: abaqus interactive job=myJobSerial input=myInputFile.inp A parallel job can be run like this (fill in your own username): module load abaqus/2017 INPUT_FILE=/home/<username>/ABAQUS/heattransfermanifold_cavity_parallel.inp ABAQUS_ARGS= ABAQUS_PARALLELSCRATCH=/home/<username>/Scratch/Abaqus/parallelscratch # creates a parallel scratch dir and a new working dir for this job mkdir -p $ABAQUS_PARALLELSCRATCH mkdir -p $JOB_NAME.$JOB_ID cd $JOB_NAME.$JOB_ID cp $INPUT_FILE . INPUT=$(basename $INPUT_FILE) abaqus interactive cpus=$NSLOTS mp_mode=mpi job=$INPUT.$JOB_ID input=$INPUT \\ scratch=$ABAQUS_PARALLELSCRATCH $ABAQUS_ARGS","title":"ABAQUS"},{"location":"Software_Guides/Other_Software/#beast","text":"BEAST is an application for Bayesian MCMC analysis of molecular sequences orientated towards rooted, time-measured phylogenies inferred using strict or relaxed molecular clock models. Note that FigTree and Tracer are available as standalone modules. The addons DISSECT, MODEL_SELECTION, and SNAPP are installed for BEAST. cd $TMPDIR module load java/1.8.0_45 module load beast/2.3.0 beast -threads $OMP_NUM_THREADS ~/Scratch/BEAST/gopher.xml # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/BEAST/files_from_job_$JOB_ID.tar.gz $TMPDIR","title":"BEAST"},{"location":"Software_Guides/Other_Software/#bowtie","text":"Bowtie 1 and 2 are tools for aligning sequencing reads to their reference sequences. Bowtie 1 and 2 are available. For reads longer than about 50 bp Bowtie 2 is generally faster, more sensitive, and uses less memory than Bowtie 1. For relatively short reads (e.g. less than 50 bp) Bowtie 1 is sometimes faster and/or more sensitive. For further differences, see How is Bowtie 2 different from Bowtie 1? . Bowtie sets $BT1_HOME and Bowtie2 sets $BT2_HOME . You can have both modules loaded at once. cd $TMPDIR module load bowtie2/2.2.5 # Run Bowtie2 example from getting started guide: # http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#getting-started-with-bowtie-2-lambda-phage-example bowtie2-build $BT2_HOME/example/reference/lambda_virus.fa lambda_virus bowtie2 -x lambda_virus -U $BT2_HOME/example/reads/reads_1.fq -S eg1.sam # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/Bowtie2_output/files_from_job_$JOB_ID.tgz $TMPDIR","title":"Bowtie"},{"location":"Software_Guides/Other_Software/#castep","text":"CASTEP is a full-featured materials modelling code based on a first-principles quantum mechanical description of electrons and nuclei. module load castep/17.21/intel-2017 # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun castep.mpi input CASTEP 19 has different pre-reqs: module unload -f compilers mpi module load compilers/intel/2019/update4 module load mpi/intel/2019/update4/intel module load castep/19.1.1/intel-2019 # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun castep.mpi input If you have access to the source code and wish to build your own copy, it has been suggested that compiling with these options (on Grace) gave a build that ran about 10% faster than the default compilation options: make COMMS_ARCH=mpi SUBARCH=mpi FFT=mkl MATHLIBS=mkl10 BUILD=fast Do check for numerical accuracy with any optimisations you carry out.","title":"CASTEP"},{"location":"Software_Guides/Other_Software/#cctools","text":"Provides the Parrot connector to CVMFS, the CernVM File System. By default, the cctools module sets the following: export PARROT_CVMFS_REPO=<default-repositories> export PARROT_ALLOW_SWITCHING_CVMFS_REPOSITORIES=yes export HTTP_PROXY=DIRECT; export PARROT_HTTP_PROXY=DIRECT; Example usage - will list the contents of the repository then exit: module load cctools/7.0.11/gnu-4.9.2 parrot_run bash ls /cvmfs/alice.cern.ch exit That will create the cache in /tmp/parrot.xxxxx on the login nodes when run interactively. To use in a job, you will want to put the cache somewhere in your space that the compute nodes can access. You can set the cache to be in your Scratch, or to $TMPDIR on the nodes if it just needs to exist for the duration of that job. export PARROT_CVMFS_ALIEN_CACHE=</path/to/cache>","title":"Cctools"},{"location":"Software_Guides/Other_Software/#cfd-ace","text":"CFD-ACE+ is a commercial computational fluid dynamics solver developed by ESI Group. It solves the conservation equations of mass, momentum, energy, chemical species and other scalar transport equations using the finite volume method. These equations enable coupled simulations of fluid, thermal, chemical, biological, electrical and mechanical phenomena. The license is owned by the Department of Mechanical Engineering who must give permission for users to be added to the group lgcfdace . module load cfd-ace/2018.0 CFD-SOLVER -model 3Dstepchannel_060414.DTF -num $NSLOTS -wd `pwd` \\ -hosts $TMPDIR/machines -rsh=ssh -decomp -metis -sim 1 -platformmpi -job","title":"CFD-ACE"},{"location":"Software_Guides/Other_Software/#comsol","text":"COMSOL Multiphysics is a cross-platform finite element analysis, solver and multiphysics simulation software. Electrical Engineering have a group license for version 52 and must give permission for users to be added to the group legcomsl . Chemical Engineering have a Departmental License for version 53 and members of that department may be added to the group lgcomsol . # Run a parallel COMSOL job # Versions 52 and 52a have this additional module prerequisite module load xulrunner/3.6.28/gnu-4.9.2 # pick the version to load module load comsol/53a # Parallel multinode options: # $NHOSTS gets the number of nodes the job is running on and # $TMPDIR/machines is the machinefile that tells it which nodes. # These are automatically set up in a \"-pe mpi\" job environment. comsol -nn $NHOSTS -clustersimple batch -f $TMPDIR/machines -inputfile micromixer_batch.mph \\ -outputfile micromixer_batch_output_${JOB_ID}.mph # On Myriad you need to specify the fabric: comsol batch -f $TMPDIR/machines -np $NSLOTS -mpifabrics shm:tcp \\ -inputfile micromixer_batch.mph -outputfile micromixer_batch_output_${JOB_ID}.mph","title":"COMSOL"},{"location":"Software_Guides/Other_Software/#cp2k","text":"CP2K performs atomistic and molecular simulations. To see all available versions type module load beta-modules module avail cp2k To load CP2K 8.2: module unload -f compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load compilers/gnu/10.2.0 # These three modules only needed on Myriad module load numactl/2.0.12 module load binutils/2.36.1/gnu-10.2.0 module load ucx/1.9.0/gnu-10.2.0 module load mpi/openmpi/4.0.5/gnu-10.2.0 module load openblas/0.3.13-openmp/gnu-10.2.0 module load cp2k/8.2/ompi/gnu-10.2.0 # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun cp2k.popt < input.in > output.out For CP2K 4.1 there is also a Chemistry department version with submission script generator. To access it: module load chemistry-modules module load submission-scripts The command submitters will then list the submitters available. You can then run cp2k.submit which will ask you questions in order to create a suitable jobscript. The cp2k.submit submitter takes up to 6 arguments, and any omitted will be asked for interactively: cp2k.submit \u00abinput_file\u00bb \u00abcores\u00bb \u00abversion\u00bb \u00abmaximum_run_time\u00bb \u00abmemory_per_core\u00bb \u00abjob_name\u00bb So, for example: cp2k.submit water.inp 8 4.1 2:00:00 4G mywatermolecule would request a job running CP2K 4.1 with the input file water.inp , on 8 cores, with a maximum runtime of 2 hours, with 4 gigabytes of memory per core, and a job name of mywatermolecule .","title":"CP2K"},{"location":"Software_Guides/Other_Software/#crystal","text":"CRYSTAL is a general-purpose program for the study of crystalline solids. The CRYSTAL program computes the electronic structure of periodic systems within Hartree Fock, density functional or various hybrid approximations. CRYSTAL is commercial software which is available free of charge to UK academics. You must obtain a license from Crystal Solutions: How to get CRYSTAL - Academic UK license . You need to create an account and then request to be upgraded to Academic UK. Access to CRYSTAL is enabled by being a member of the reserved application group legcryst . For proof of access we accept emails from CRYSTAL saying your account has been upgraded to \"Academic UK\", or a screenshot of your account page showing you have the full download available rather than just the demo version. module unload mpi module load mpi/openmpi/2.1.2/intel-2017 module load crystal17/v1.0.1 # 9. Create a directory for this job and copy the input file into it. mkdir test00 cd test00 cp ~/Scratch/Crystal17/test_cases/inputs/test00.d12 INPUT # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. # The CRYSTAL module sets $CRYxx_EXEDIR and $VERSION environment variables. gerun $CRY17_EXEDIR/$VERSION/Pcrystal # Similarly, for Pproperties the command would be gerun $CRY17_EXEDIR/$VERSION/Pproperties For CRYSTAL 17 v1.0.2, the modules and path are slightly different and you would do this instead: module unload -f compilers mpi module load compilers/intel/2017/update4 module load mpi/openmpi/2.1.2/intel-2017 module load crystal17/v1.0.2/intel-2017 # Create a directory for this job and copy the input file into it. mkdir test00 cd test00 cp ~/Scratch/Crystal17/test_cases/inputs/test00.d12 INPUT # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. # The CRYSTAL module sets $CRYxx_EXEDIR and $VERSION environment variables. gerun $CRY17_EXEDIR/Pcrystal","title":"CRYSTAL"},{"location":"Software_Guides/Other_Software/#freesurfer","text":"FreeSurfer is a set of tools for analysis and visualization of structural and functional brain imaging data. Freesurfer can use threads to run on multiple cores in one node: request the number with -pe smp in the resource-request part of your jobscript. #$ -pe smp 4 module load xorg-utils/X11R7.7 module load freesurfer/6.0.0 export SUBJECTS_DIR=~/Scratch/FreeSurfer_examples/subjects # -openmp $NSLOTS runs with the number of threads you requested recon-all -openmp $NSLOTS -i sample-001.nii.gz -s bert -all","title":"FreeSurfer"},{"location":"Software_Guides/Other_Software/#gamess","text":"The General Atomic and Molecular Electronic Structure System (GAMESS) is a general ab initio quantum chemistry package. The GAMESS module should be loaded once from a login node before submitting a job - this creates the ~/Scratch/gamess directory for you which is used as USERSCR to write some scratch files during the job. If you don't want to keep these files and would prefer them to be written to $TMPDIR instead, you can put export $GAMESS_USERSCR=$TMPDIR in your jobscript after the module load command. module unload compilers mpi module load compilers/intel/2015/update2 module load mpi/intel/2015/update3/intel module load gamess/5Dec2014_R1/intel-2015-update2 # Optional: set where the USERSCR files go. # By default, the module sets it to ~/Scratch/gamess export $GAMESS_USERSCR=$TMPDIR rungms exam01.inp 00 $NSLOTS $(ppn)","title":"GAMESS"},{"location":"Software_Guides/Other_Software/#gatk","text":"The Genome Analysis Toolkit or GATK is a software package developed at the Broad Institute to analyze high-throughput sequencing data. Version 4 of GATK is BSD-licensed so does not require a group to control access to the software. Version 3 of GATK requires you to agree to the GATK license before we can add you to the leggatk group which gives you access: you can do this by downloading GATK 3 from The Broad Institute GATK download page , reading the license, and telling us you agree to it. You may need to create a gatkforums account before you can download. GATK 3 uses Java 1.7 (the system Java) so you do not need to load a Java module. GATK 4 uses 1.8 so you need to load java/1.8.0_92 first. GATK 4.2.5.0 or newer uses the newest version of Java 8, so you need to load java/temurin-8 . Load the version you want, then to run GATK you should either prefix the .jar you want to run with $GATKPATH : java -Xmx2g -jar $GATKPATH/GenomeAnalysisTK.jar OPTION1=value1 OPTION2=value2... Or we provide wrappers, so you can run it one of these ways instead: GenomeAnalysisTK OPTION1=value1 OPTION2=value2... gatk OPTION1=value1 OPTION2=value2... If you want to use some of the newer tools in GATK 4 which rely on Python/Conda, you must use GATK >= 4.2.5.0 and additionally set up your miniconda environment. With 4.2.5.0 this means: module load java/temurin-8 module load gatk/4.2.5.0 module load python/miniconda3/4.10.3 source $UCL_CONDA_PATH/etc/profile.d/conda.sh conda activate $GATK_CONDA (For newer versions of GATK it will tell you which version of miniconda to load)","title":"GATK"},{"location":"Software_Guides/Other_Software/#gaussian","text":"Access to Gaussian 09 or Gaussian 16 are controlled by membership of separate groups. UCL has a site license so UCL users can be added on request. Gaussian is too resource-intensive to ever be run on the login nodes.","title":"Gaussian"},{"location":"Software_Guides/Other_Software/#multithreaded-shared-memory-gaussian-jobs","text":"The main Gaussian executable lets you run jobs that use from 1 core up to a full node. When using more than one core, make sure your input file contains %NProcShared= with the number of cores your job is requesting. $GAUSS_SCRDIR is where Gaussian puts temporary files which can use a lot of space. On Myriad in a job this is created inside $TMPDIR by default. On diskless clusters, this is set this to a directory in your Scratch instead: loading one of the Gaussian modules will handle this automatically and show where it has created the directory. # Example for Gaussian 16 # Set up runtime environment module load gaussian/g16-a03/pgi-2016.5 source $g16root/g16/bsd/g16.profile # Run g16 job g16 input.com # Example for Gaussian 09 # Setup runtime environment module load gaussian/g09-d01/pgi-2015.7 source $g09root/g09/bsd/g09.profile # Run g09 job g09 input.com","title":"Multithreaded shared memory Gaussian jobs"},{"location":"Software_Guides/Other_Software/#linda-parallel-gaussian-jobs","text":"Only currently working for Gaussian 09. Gaussian Linda jobs can run across multiple nodes. # Select the MPI parallel environment and 80 cores total #$ -pe mpi 80 # 8. Select number of threads per Linda worker (value of NProcShared in your # Gaussian input file. This will give 80/40 = 2 Linda workers. export OMP_NUM_THREADS=40 # Setup g09 runtime environment module load gaussian/g09-d01/pgi-2015.7 source $g09root/g09/bsd/g09.profile # Pre-process g09 input file to include nodes allocated to job echo \"Running: lindaConv testdata.com $JOB_ID $TMPDIR/machines\" echo '' $lindaConv testdata.com $JOB_ID $TMPDIR/machines # Run g09 job echo \"Running: g09 \\\"job$JOB_ID.com\\\"\" # communication needs to be via ssh not the Linda default export GAUSS_LFLAGS='-v -opt \"Tsnet.Node.lindarsharg: ssh\"' g09 \"job$JOB_ID.com\"","title":"Linda parallel Gaussian jobs"},{"location":"Software_Guides/Other_Software/#troubleshooting-memory-errors","text":"If you encounter errors like: Out-of-memory error in routine ShPair-LoodLd2 (IEnd= 257724 MxCore= 242934) Use %mem=48MW to provide the minimum amount of memory required to complete this step. Try adding this to your jobscript: export GAUSS_MEMDEF=48000000 You may need to increase this value even more to allow it to run.","title":"Troubleshooting: Memory errors"},{"location":"Software_Guides/Other_Software/#troubleshooting-no-space-left-on-device","text":"If you get this error g_write: No space left on device The $GAUSS_SCRDIR is probably full - if it was on a cluster that has local disks and is using $TMPDIR you should increase the amount of tmpfs you are requesting in your jobscript. Otherwise check lquota for your data usage and potentially request a larger Scratch.","title":"Troubleshooting: No space left on device"},{"location":"Software_Guides/Other_Software/#gromacs","text":"We have many versions of GROMACS installed, some built with Plumed. The module name will indicate this. Which executable you should run depends on the problem you wish to solve. For both single and double precision version builds, serial binaries and an MPI binary for mdrun ( mdrun_mpi for newer versions, gmx_mpi for Plumed and some older versions) are provided. Double precision binaries have a _d suffix (so gmx_d , mdrun_mpi_d , gmx_mpi_d etc). You can see what the executable names are by running module show gromacs/2021.2/gnu-7.3.0 for example and then running the ls command on the bin directory that the module tells you that version is installed in. # Example for GPU gromacs/2021.5/cuda-11.3 module load beta-modules module unload -f compilers mpi gcc-libs module load gcc-libs/10.2.0 module load compilers/gnu/10.2.0 module load python3/3.9-gnu-10.2.0 module load cuda/11.3.1/gnu-10.2.0 module load mpi/openmpi/4.0.5/gnu-10.2.0 module load gromacs/2021.5/cuda-11.3 # Run GROMACS - the executables are gmx_cuda, gmx_mpi_cuda and mdrun_mpi_cuda # Example for gromacs/2021.2/gnu-7.3.0 module load beta-modules module unload -f compilers mpi gcc-libs module load gcc-libs/7.3.0 module load compilers/gnu/7.3.0 module load mpi/openmpi/3.1.4/gnu-7.3.0 module load python3 module load gromacs/2021.2/gnu-7.3.0 # Run GROMACS - replace with mdrun command line suitable for your job! gerun mdrun_mpi -v -stepout 10000 # Example for gromacs/2019.3/intel-2018 module unload -f compilers mpi module load compilers/intel/2018/update3 module load mpi/intel/2018/update3/intel module load gromacs/2019.3/intel-2018 # Run GROMACS - replace with mdrun command line suitable for your job! gerun mdrun_mpi -v -stepout 10000 # Plumed example for gromacs/2019.3/plumed/intel-2018 module unload -f compilers mpi module load compilers/intel/2018/update3 module load mpi/intel/2018/update3/intel module load libmatheval module load flex module load plumed/2.5.2/intel-2018 module load gromacs/2019.3/plumed/intel-2018 # Run GROMACS - replace with mdrun command line suitable for your job! gerun gmx_mpi -v -stepout 10000","title":"GROMACS"},{"location":"Software_Guides/Other_Software/#passing-in-options-to-gromacs-non-interactively","text":"Some GROMACS executables like trjconv normally take interactive input. You can't do this in a jobscript, so you need to pass in the input you would normally type in. There are several ways of doing this, mentioned at GROMACS Documentation - Using Commands in Scripts . The simplest is to echo the input in and keep your gmx options as they would normally be. If the inputs you would normally type were 3 and 3, then you can do this: echo 3 3 | gmx whatevercommand -options","title":"Passing in options to GROMACS non-interactively"},{"location":"Software_Guides/Other_Software/#checkpoint-and-restart","text":"GROMACS has built-in checkpoint and restart ability, so you can use this if your runs will not complete in the maximum 48hr wallclock time. Have a look at the GROMACS manual for full details, as there are more options than mentioned here. You can tell GROMACS to write a checkpoint file when it is approaching the maximum wallclock time available, and then exit. In this case, we had asked for 48hrs wallclock. This tells GROMACS to start from the last checkpoint if there is one, and write a new checkpoint just before it reaches 47 hrs runtime. gerun mdrun_mpi -cpi -maxh 47 <options> The next job you submit with the same script will carry on from the checkpoint the last job wrote. You could use job dependencies to submit two identical jobs at the same time and have one dependent on the other, so it won't start until the first finishes - have a look at man qsub for the -hold_jid option. You can also write checkpoints at given intervals: # Write checkpoints every 120 mins, start from checkpoint if there is one. gerun mdrun_mpi -cpi -cpt 120 <options>","title":"Checkpoint and restart"},{"location":"Software_Guides/Other_Software/#hammock","text":"Hammock is a tool for peptide sequence clustering. It is able to cluster extremely large amounts of short peptide sequences into groups sharing sequence motifs. Typical Hammock applications are NGS-based experiments using large combinatorial peptide libraries, e.g. Phage display. Hammock has to be installed in your own space to function, so we provide a hammock module that contains the main dependencies and creates a quick-install alias: # on the login nodes module unload compilers module load hammock/1.0.5 do-hammock-install This will install Hammock 1.0.5 in your home, edit settings.prop to use clustal-omega and hmmer from our modules and tell it to write temporary files in your Scratch directory (in the form Hammock_temp_time ). # in your jobscript module unload compilers module load hammock/1.0.5 # This copies the MUSI example that comes with Hammock into your working # directory and runs it. The module sets $HAMMOCKPATH for you. # You must set the output directory to somewhere in Scratch with -d. # Below makes a different outputdir per job so multiple runs don't overwrite files. cp $HAMMOCKPATH/../examples/MUSI/musi.fa . outputdir=~/Scratch/hammock-examples/musi_$JOB_ID mkdir -p $outputdir echo \"Running java -jar $HAMMOCKPATH/Hammock.jar full -i musi.fa -d $outputdir\" java -jar $HAMMOCKPATH/Hammock.jar full -i musi.fa -d $outputdir","title":"Hammock"},{"location":"Software_Guides/Other_Software/#hopspack","text":"HOPSPACK (Hybrid Optimization Parallel Search PACKage) solves derivative-free optimization problems using an open source, C++ software framework. We have versions of HOPSPACK built using the GNU compiler and OpenMPI, and the Intel compiler and MPI. This example shows the GNU version. Serial and parallel versions are available, HOPSPACK_main_mpi and HOPSPACK_main_serial . module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/openmpi/1.8.4/gnu-4.9.2 module load atlas/3.10.2/gnu-4.9.2 module load hopspack/2.0.2/gnu-4.9.2 # Add the examples directory we are using to our path. # Replace this with the path to your own executables. export PATH=$PATH:~/Scratch/examples/1-var-bnds-only/ # Run parallel HOPSPACK. # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun HOPSPACK_main_mpi ~/Scratch/examples/1-var-bnds-only/example1_params.txt > example1_output.txt","title":"HOPSPACK"},{"location":"Software_Guides/Other_Software/#idl","text":"IDL is a complete environment and language for the analysis and visualisation of scientific and other technical data. It can be used for everything from quick interactive data exploration to building complex applications. Single-threaded jobscript: cd $TMPDIR module load idl/8.4.1 # Copy IDL source files to $TMPDIR cp ~/Scratch/IDL/fib.pro $TMPDIR cp ~/Scratch/IDL/run1.pro $TMPDIR idl -queue -e @run1.pro # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/IDL_output/files_from_job_$JOB_ID.tgz $TMPDIR Parallel jobscript: cd $TMPDIR module load idl/8.1 # this sets the IDL thread pool: do not change this export IDL_CPU_TPOOL_NTHREADS=$OMP_NUM_THREADS # Copy IDL source files to $TMPDIR cp ~/Scratch/IDL/fib.pro $TMPDIR cp ~/Scratch/IDL/run2mp.pro $TMPDIR idl -queue -e @run2mp.pro # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/IDL_output/files_from_job_$JOB_ID.tgz $TMPDIR","title":"IDL"},{"location":"Software_Guides/Other_Software/#jags","text":"JAGS (Just Another Gibbs Sampler) is a program for analysis of Bayesian hierarchical models using Markov Chain Monte Carlo (MCMC) simulation not wholly unlike BUGS. Use this to use JAGS in standalone command line mode: module unload compilers mpi module load compilers/gnu/4.9.2 module load openblas/0.2.14/gnu-4.9.2 module load jags/4.2.0/gnu.4.9.2-openblas We have also added JAGS support to r/recommended using the rjags and R2jags R packages.","title":"JAGS"},{"location":"Software_Guides/Other_Software/#lammps","text":"LAMMPS is an open source parallel molecular dynamics code which exhibits good scaling in a wide range of environments. The LAMMPS binaries are called lmp_$cluster and all have an lmp_default symlink which can be used. LAMMPS-8Dec15 and later were built with additional packages kspace , replica , rigid , and class2 . The versions from lammps-16Mar18-basic_install onwards (not lammps/16Mar18/intel-2017 ) have most of the included packages built. There are also userintel and gpu versions from this point. We do not install the LAMMPS user packages as part of our central install, but you can build your own version with the ones that you want in your space. module -f unload compilers mpi module load compilers/intel/2018 module load mpi/intel/2018 module load lammps/16Mar18/basic/intel-2018 # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun $(which lmp_default) -in inputfile For the latest version of LAMMPS we have installed which is 29th September 2021 Update 2 where the binaries are called lmp_mpi for the MPI version and lmp_gpu for the GPU version: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load compilers/gnu/10.2.0 module load mpi/openmpi/4.0.5/gnu-10.2.0 module load python3/3.9-gnu-10.2.0 module load lammps/29sep21up2/basic/gnu-10.2.0 gerun lmp_mpi -in inputfile for the basic MPI version and: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load compilers/gnu/10.2.0 # these three modules for Myriad only module load numactl/2.0.12 module load binutils/2.36.1/gnu-10.2.0 module load ucx/1.9.0/gnu-10.2.0 module load mpi/openmpi/4.0.5/gnu-10.2.0 module load cuda/11.3.1/gnu-10.2.0 module load python3/3.9-gnu-10.2.0 module load lammps/29sep21up2/gpu/gnu-10.2.0 gerun lmp_gpu -sf gpu -pk gpu 1 -in inputfile for the version with GPU support which is only available on clusters with GPUs. The MPI version is available on all clusters. On Myriad the numactl , binutils and ucx modules are additionally needed by OpenMPI. LAMMPS 29th September 2021 Update 2 has been built with the GNU compilers, OpenMPI and CUDA for the GPU version. We also have Intel installs: # LAMMPS 29 Sep 2021 Update 2 with Intel compilers and INTEL package module unload -f compilers mpi module load compilers/intel/2020/release module load mpi/intel/2019/update6/intel module load python/3.9.10 module load lammps/29sep21up2/userintel/intel-2020 gerun lmp_mpi -in inputfile # LAMMPS 29 Sep 2021 Update 2 for GPU with Intel compilers module unload -f compilers mpi module load beta-modules module load compilers/intel/2020/release module load mpi/intel/2019/update6/intel module load python/3.9.10 module load cuda/11.3.1/gnu-10.2.0 module load lammps/29sep21up2/gpu/intel-2020 gerun lmp_gpu -sf gpu -pk gpu 1 -in inputfile","title":"LAMMPS"},{"location":"Software_Guides/Other_Software/#meme-suite","text":"MEME Suite: Motif-based sequence analysis tools. This install is for the command-line tools and connects to their website for further analysis. module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/openmpi/1.8.4/gnu-4.9.2 module load perl/5.22.0 module load python2/recommended module load ghostscript/9.16/gnu-4.9.2 module load meme/4.10.1_4","title":"MEME Suite"},{"location":"Software_Guides/Other_Software/#mirdeep2","text":"Discovering known and novel miRNAs from deep sequencing data, miRDeep2 is a completely overhauled tool which discovers microRNA genes by analyzing sequenced RNAs. The tool reports known and hundreds of novel microRNAs with high accuracy in seven species representing the major animal clades. module load squid/1.9g module load randfold/2.0 module load perl/5.22.0 module load bowtie/1.1.2 module load python/2.7.9 module load viennarna/2.1.9 module load mirdeep/2.0.0.7","title":"miRDeep2"},{"location":"Software_Guides/Other_Software/#misomisopy","text":"MISO (Mixture of Isoforms) is a probabilistic framework that quantitates the expression level of alternatively spliced genes from RNA-Seq data, and identifies differentially regulated isoforms or exons across samples. misopy is available as part of the python2/recommended bundle. MISO can run multithreaded on one node, or can submit multiple independent single-core jobs at once using the --use-cluster option. If you want to use MISO's ability to create and submit jobs itself, you need a MISO settings file like the one shown below. You give your job options as arguments to the qsub command in the cluster_command line. Settings files can be used with the --settings-filename=SETTINGS_FILENAME option. You will also need to put your module unload and load commands in your .bashrc if using MISO's own job submission, because you are no longer including them in a jobscript. Example miso_settings.txt . Multithreaded jobs will use num_processors . num_processors is ignored if --use-cluster is specified: [data] filter_results = True min_event_reads = 20 [cluster] cluster_command = \"qsub -l h_rt=00:10:00 -l mem=1GB -wd ~/Scratch\" [sampler] burn_in = 500 lag = 10 num_iters = 5000 num_chains = 6 num_processors = 4","title":"MISO/misopy"},{"location":"Software_Guides/Other_Software/#molpro","text":"Molpro is a complete system of ab initio programs for molecular electronic structure calculations. Molpro 2015.1.3 was provided as binary only and supports communication over Ethernet and not Infiniband - use this one on single-node jobs primarily. Molpro 2015.1.5 was built from source with the Intel compilers and Intel MPI, so can be run multi-node. Molpro 2020.1 is a more recent binary install and supports both. module load molpro/2015.1.5/intel-2015-update2 # Example files available in /shared/ucl/apps/molpro/2015.1.5/intel-2015-update2/molprop_2015_1_linux_x86_64_i8/examples/ # If this is a multi-node job you need to set the wavefunction directory to # somewhere in Scratch with -W. For a single-node job -W should be in $TMPDIR. # You can use $SGE_O_WORKDIR to refer to the directory you set with -wd in your jobscript. # $NSLOTS will use the number of cores you requested with -pe mpi. echo \"Running molpro -n $NSLOTS -W $TMPDIR h2o_scf.com\" molpro -n $NSLOTS -W $TMPDIR h2o_scf.com On Myriad, if you get this error with the MPI 2015 install, please use the binary 2015.1.3 install. libi40iw-i40iw_ucreate_qp: failed to create QP, unsupported QP type: 0x4 Output: MOLPRO can end up writing very many small output files, and this is detrimental to the performance of a parallel filesystem like Lustre. If you are running jobs on Myriad then you should set your -I -d and (especially) -W directories to be in $TMPDIR so they can be accessed quickly and not slow down other jobs. At the end of the job, copy back the data you want to keep into your Scratch. If you are running parallel multi-node jobs and the directories need to be readable by all the nodes, then you need to write to Scratch.","title":"MOLPRO"},{"location":"Software_Guides/Other_Software/#mrtrix","text":"MRtrix provides a set of tools to perform diffusion-weighted MRI white matter tractography in the presence of crossing fibres. module load python3/recommended module load qt/4.8.6/gnu-4.9.2 module load eigen/3.2.5/gnu-4.9.2 module load fftw/3.3.6-pl2/gnu-4.9.2 module load mrtrix/3.0rc3/gnu-4.9.2/nogui You must load these modules once from a login node before submitting a job. It copies a .mrtrix.conf to your home directory the first time you run this module from a login node, which sets: Analyse.LeftToRight: false NumberOfThreads: 4 You need to alter NumberOfThreads to what you are using in your job script before you submit a job. The MRtrix GUI tools are unavailable: mrview and shview in MRtrix 3 cannot be run over a remote X11 connection so are not usable on our clusters. To use these tools you will need a local install on your own computer.","title":"MRtrix"},{"location":"Software_Guides/Other_Software/#mutect","text":"MuTect is a tool developed at the Broad Institute for the reliable and accurate identification of somatic point mutations in next generation sequencing data of cancer genomes. It is built on top of the GenomeAnalysisToolkit (GATK), which is also developed at the Broad Institute, so it uses the same command-line conventions and (almost all) the same input and output file formats. MuTect requires you to agree to the GATK license before we can add you to the lgmutect group which gives you access: you can do this by downloading MuTect from The Broad Institute CGA page . You may need to create a gatkforums account before you can download. MuTect is currently not compatible with Java 1.8, so you need to use the system Java 1.7. Set up your modules as follows: module load mutect/1.1.7 Then to run MuTect, you should either prefix the .jar you want to run with $MUTECTPATH : java -Xmx2g -jar $MUTECTPATH/mutect-1.1.7.jar OPTION1=value1 OPTION2=value2... Or we provide wrappers, so you can run it this way instead: mutect OPTION1=value1 OPTION2=value2...","title":"MuTect"},{"location":"Software_Guides/Other_Software/#namd","text":"NAMD is a parallel molecular dynamics code designed for high-performance simulation of large biomolecular systems. We have several different types of install, some of them suited to particular clusters only. To see all the versions, type module avail namd . These examples are running the apoa1 benchmark, available from the NAMD website .","title":"NAMD"},{"location":"Software_Guides/Other_Software/#multicore-gpu","text":"This version of NAMD runs within one GPU node. It can run on multiple GPUs on that node, but not across multiple different nodes. NAMD uses the CPUs and GPUs together so it is recommended you request all the cores on the node if you are requesting all the GPUs. For best performance of simulations it is recommended that you use an entire node, all the CPUs and all the available GPUs. # request a number of CPU cores and GPUs #$ -pe smp 10 #$ -l gpu=1 module load namd/2.14/multicore-gpu # ${NSLOTS} will get the number of cores you asked for with -pe smp. # +setcpuaffinity is recommended to make sure threads are assigned to specific CPUs. namd2 +p${NSLOTS} +setcpuaffinity apoa1_nve_cuda.namd","title":"Multicore GPU"},{"location":"Software_Guides/Other_Software/#ofi","text":"This version of NAMD is for clusters with OmniPath interconnects (not Myriad). It can run across multiple nodes. The OFI versions should use significantly less memory than the older MPI-based installs. module unload -f compilers mpi module load compilers/intel/2019/update5 module load mpi/intel/2019/update5/intel module load namd/2.14/ofi/intel-2019 # ${NSLOTS} will get the number of cores you asked for with -pe. charmrun +p${NSLOTS} namd2 apoa1.namd","title":"OFI"},{"location":"Software_Guides/Other_Software/#ofi-smp","text":"This version of NAMD runs with threads (smp) and processes and is for clusters with OmniPath interconnects (not Myriad). It can run across multiple nodes. The OFI versions should use significantly less memory than the older MPI-based installs. module unload -f compilers mpi module load compilers/intel/2019/update5 module load mpi/intel/2019/update5/intel module load namd/2.14/ofi-smp/intel-2019 # ${NSLOTS} will get the number of cores you asked for with -pe. # +setcpuaffinity is recommended to make sure threads are assigned to specific CPUs. # ++ppn is the number of PEs (or worker threads) to create for each process. charmrun +p${NSLOTS} namd2 apoa1.namd ++ppn2 +setcpuaffinity","title":"OFI-SMP"},{"location":"Software_Guides/Other_Software/#ofi-smp-gpu","text":"This version of NAMD runs with threads (smp) and processes and is for clusters with OmniPath interconnects as well as GPUs (not Myriad). It can run across multiple nodes. # request a number of CPU cores and GPUs #$ -pe smp 24 #$ -l gpu=2 module unload -f compilers mpi gcc-libs module load beta-modules module load gcc-libs/7.3.0 module load compilers/intel/2019/update5 module load mpi/intel/2019/update5/intel module load cuda/11.3.1/gnu-10.2.0 module load namd/2.14/ofi-smp-gpu/intel-2019 # ${NSLOTS} will get the number of cores you asked for with -pe. # +setcpuaffinity is recommended to make sure threads are assigned to specific CPUs. # ++ppn is the number of PEs (or worker threads) to create for each process. # The number of GPU devices must be a multiple of the number of NAMD processes # since processes cannot share GPUs. # Here we have ++ppn12 for 12 threads, and charmrun works out we have 2 NAMD processes # available for the 2 GPUs. charmrun +p${NSLOTS} namd2 apoa1_nve_cuda.namd ++ppn12 +setcpuaffinity","title":"OFI-SMP-GPU"},{"location":"Software_Guides/Other_Software/#mpi","text":"These are older versions. It is recommended to run the OFI versions above instead if possible. module load fftw/2.1.5/intel-2015-update2 module load namd/2.13/intel-2018-update3 # GErun is our mpirun wrapper that gets $NSLOTS and the machinefile for you. gerun namd2 apoa1.namd","title":"MPI"},{"location":"Software_Guides/Other_Software/#nonmem","text":"NONMEM\u00ae is a nonlinear mixed effects modelling tool used in population pharmacokinetic / pharmacodynamic analysis. We have one build that uses the GNU compiler and ATLAS and an Intel build using MKL. Both use Intel MPI. This example uses the Intel build. jobDir=example1_parallel_$JOB_ID mkdir $jobDir # Copy control and datafiles to jobDir cp /shared/ucl/apps/NONMEM/examples/foce_parallel.ctl $jobDir cp /shared/ucl/apps/NONMEM/examples/example1b.csv $jobDir cd $jobDir module unload compilers mpi module load compilers/intel/2015/update2 module load mpi/intel/2015/update3/intel module load nonmem/7.3.0/intel-2015-update2 # Create parafile for job using $TMPDIR/machines parafile.sh $TMPDIR/machines > example1.pnm nmfe73 foce_parallel.ctl example1.res -parafile=example1.pnm -background -maxlim=1 > example1.log","title":"NONMEM"},{"location":"Software_Guides/Other_Software/#nwchem","text":"NWChem applies theoretical techniques to predict the structure, properties, and reactivity of chemical and biological species ranging in size from tens to millions of atoms. You should load the NWChem module you wish to use once from a login node, as it will create a symlinked .nwchemrc in your home. module unload compilers mpi module load compilers/intel/2017/update4 module load mpi/intel/2017/update3/intel module load python/2.7.12 module load nwchem/6.8-47-gdf6c956/intel-2017 # $NSLOTS will get the number of processes you asked for with -pe mpi. mpirun -np $NSLOTS -machinefile $TMPDIR/machines nwchem hpcvl_sample.nw","title":"NWChem"},{"location":"Software_Guides/Other_Software/#nwchem-troubleshooting","text":"If you get errors like this { 0, 3}: On entry to PDSTEDC parameter number 10 had an illegal value then you are coming across an error in Intel MKL 2018, and should make sure you change to the Intel 2017 compiler module as shown above. (MKL versions are bundled with the corresponding Intel compiler modules). If your run terminates with an error saying ARMCI supports block process mapping only then you are probably trying to use round-robin MPI process placement, which ARMCI does not like. gerun uses round-robin for Intel MPI by default as it works better in most cases. Use mpirun instead of gerun : mpirun -np $NSLOTS -machinefile $TMPDIR/machines nwchem input.nw If you get an error complaining about $NWCHEM_NWPW_LIBRARY similar to this: warning:::::::::::::: from_compile NWCHEM_NWPW_LIBRARY is: < /dev/shm/tmp.VB3DpmjULc/nwchem-6.6/src/nwpw/libraryps/> but file does not exist or you do not have access to it ! ------------------------------------------------------------------------ nwpwlibfile: no nwpw library found 0 then your ~/.nwchemrc symlink is likely pointing to a different version that you used previously. Deleting the symlink and loading the module you want to use will recreate it correctly.","title":"NWChem troubleshooting"},{"location":"Software_Guides/Other_Software/#orca","text":"ORCA is an ab initio, DFT, and semi-empirical SCF-MO package. module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/openmpi/3.1.4/gnu-4.9.2 module load orca/4.2.1-bindist/gnu-4.9.2 orca input.inp > output.out If you want to run ORCA in parallel using MPI, the jobscript will be the same but you will need to add the !PAL keyword to your input file to tell it how many processes to use. (You do not use mpirun or gerun with ORCA).","title":"ORCA"},{"location":"Software_Guides/Other_Software/#picard","text":"Picard comprises Java-based command-line utilities that manipulate SAM files, and a Java API (SAM-JDK) for creating new programs that read and write SAM files. Both SAM text format and SAM binary (BAM) format are supported. Picard requires a Java 1.8 module to be loaded. module load java/1.8.0_92 module load picard-tools/2.18.9 To run Picard you can prefix the .jar you want to run with $PICARDPATH and give the full command, or we have wrappers: java -Xmx2g -jar $PICARDPATH/picard.jar PicardCommand TMP_DIR=$TMPDIR OPTION1=value1 OPTION2=value2... The wrappers allow you to run commands like this - in this case our wrapper sets TMP_DIR for you as well: PicardCommand OPTION1=value1 OPTION2=value2... Temporary files: by default, Picard writes temporary files into /tmp rather than into $TMPDIR . These are not cleaned up after your job ends, and means future runs can fail because /tmp is full (and requesting more tmpfs in your job doesn't make it larger). If you run Picard with the full java -jar command then give Picard the TMP_DIR=$TMPDIR option as our example above does to get it to write in the correct place.","title":"Picard"},{"location":"Software_Guides/Other_Software/#quantum-espresso","text":"Quantum Espresso is an integrated suite of Open-Source computer codes for electronic-structure calculations and materials modelling at the nanoscale. It is based on density-functional theory, plane waves, and pseudopotentials. module load xorg-utils module load quantum-espresso/6.1-impi/intel2017 # Set the path here to where ever you keep your pseudopotentials. export ESPRESSO_PSEUDO=$HOME/qe-psp # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun pw.x -in input.in >output.out","title":"Quantum Espresso"},{"location":"Software_Guides/Other_Software/#repast-hpc","text":"Repast for High Performance Computing (Repast HPC) is a next generation agent-based modelling system intended for large-scale distributed computing platforms. It implements the core Repast Simphony concepts (e.g. contexts and projections), modifying them to work in a parallel distributed environment. module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load hdf/5-1.8.15/gnu-4.9.2 module load netcdf/4.3.3.1/gnu-4.9.2 module load netcdf-fortran/4.4.1/gnu-4.9.2 module load mpi/openmpi/1.8.4/gnu-4.9.2 module load python/2.7.9 module load boost/1_54_0/mpi/gnu-4.9.2 module load netcdf-c++/4.2/gnu-4.9.2 module load repast-hpc/2.1/gnu-4.9.2 The module sets the environment variables $REPAST_HPC_INCLUDE , $REPAST_HPC_LIB_DIR and $REPAST_HPC_LIB .","title":"Repast HPC"},{"location":"Software_Guides/Other_Software/#root","text":"ROOT provides a set of OO frameworks for handling, analysing, and visualising large amounts of data. Included are specialised storage methods, methods for histograming, curve fitting, function evaluation, minimization etc. ROOT includes a built-in CINT C++ interpreter. module unload compilers mpi module load compilers/gnu/4.9.2 module load fftw/3.3.4/gnu-4.9.2 module load gsl/1.16/gnu-4.9.2 module load root/6.04.00/gnu-4.9.2 # run root in batch mode root -b -q myMacro.C > myMacro.out","title":"ROOT"},{"location":"Software_Guides/Other_Software/#sas","text":"SAS is a statistics package providing a wide range of tools for data management, analysis and presentation. cd $TMPDIR module load sas/9.4/64 # copy all your input files into $TMPDIR cp ~/Scratch/sas_input/example1/* $TMPDIR sas example1.in # tar up all contents of $TMPDIR back into your space tar cvzf $HOME/Scratch/SAS_output/files_from_job_$JOB_ID.tgz $TMPDIR","title":"SAS"},{"location":"Software_Guides/Other_Software/#starccm","text":"StarCCM+ is a commercial CFD package that handles fluid flows, heat transfer, stress simulations, and other common applications of such. Before running any StarCCM+ jobs on the clusters you must load the StarCCM+ module on a login node. This is so the module can set up two symbolic links in your home directory to directories created in your Scratch area so that user settings etc can be written by running jobs. module load star-ccm+/13.06.012 Here is the jobscript example. # Request one license per core - makes sure your job doesn't start # running until sufficient licenses are free. #$ -l ccmpsuite=1 module load star-ccm+/13.06.012 starccm+ -np $NSLOTS -machinefile $TMPDIR/machines -rsh ssh -batch my_input.sim","title":"StarCCM+"},{"location":"Software_Guides/Other_Software/#hfi-error","text":"If you get an error like this: hfi_wait_for_device: The /dev/hfi1_0 device failed to appear after 15.0 seconds: Connection timed out then you need to add -fabric ibv to your options as shown in the example script. It is trying to use an OmniPath device on a cluster that has InfiniBand, so the fabric needs to be changed. If you have this left over in jobscripts from Grace, you need to remove it on Kathleen.","title":"hfi error"},{"location":"Software_Guides/Other_Software/#starcd","text":"StarCD is a commercial package for modelling and simulating combustion and engine dynamics. You must request access to the group controlling StarCD access (legstarc) to use it. The license is owned by the Department of Mechanical Engineering who will need to approve your access request. # Request one license per core - makes sure your job doesn't start # running until sufficient licenses are free. #$ -l starsuite=1 module load star-cd/4.28.050 # run star without its tracker process as this causes multicore jobs to die early star -notracker StarCD uses IBM Platform MPI by default. You can also run StarCD simulations using Intel MPI by changing the command line to: star -notracker -mpi=intel Simulations run using Intel MPI may run faster than they do when using IBM Platform MPI. If being run on a diskless cluster without available $TMPDIR like Kathleen, then StarCD will create a $HPC_SCRATCH location to store its temporary files when the module is loaded. In a job this is set to $HOME/Scratch/STAR_ScrDirs/[randomLabel] and it will make this directory and notify that it did this in your .e file. You can delete the randomly-named directory after the job ends. To set the location yourself, after you load the module you can set it to any other existing directory instead: export HPC_SCRATCH=/path/to/desired/location","title":"StarCD"},{"location":"Software_Guides/Other_Software/#statamp","text":"Stata is a statistics, data management, and graphics system. Stata/MP is the version of the package that runs on multiple cores. We have a sixteen user license of Stata/MP. Our license supports Stata running on up to four cores per job. # Select 4 OpenMP threads (the most possible) #$ -pe smp 4 cd $TMPDIR module load stata/15 # copy files to $TMPDIR cp myfile.do $TMPDIR stata-mp -b do myfile.do # tar up all contents of $TMPDIR back into your space tar zcvf $HOME/Scratch/Stata_output/files_from_job_$JOB_ID.tar.gz $TMPDIR","title":"Stata/MP"},{"location":"Software_Guides/Other_Software/#torch","text":"Torch is a scientific computing framework with wide support for machine learning algorithms that puts GPUs first. We provide a torch-deps module that contains the main Torch dependencies and creates a quick-install alias, do-torch-install . This uses Torch's installation script to git clone the current distribution and install LuaJIT, LuaRocks and Torch in ~/torch . module unload compilers mpi module load torch-deps do-torch-install You should load these same modules in your jobscript when using the version of torch this installs.","title":"Torch"},{"location":"Software_Guides/Other_Software/#turbomole","text":"Turbomole is an ab initio computational chemistry program that implements various quantum chemistry methods. Turbomole has a Chemistry-wide license. Reserved application group legtmole for Chemistry users only. There are scripts you can use to generate Turbomole jobs for you: /shared/ucl/apps/turbomole/turbomole-mpi.submit /shared/ucl/apps/turbomole/turbomole-smp.submit They will ask you which version you want to use, how much memory, how many cores etc and set up and submit the job for you. Use the first for MPI jobs and the second for single-node shared memory threaded jobs.","title":"Turbomole"},{"location":"Software_Guides/Other_Software/#varscan","text":"VarScan is a platform-independent mutation caller for targeted, exome, and whole-genome resequencing data generated on Illumina, SOLiD, Life/PGM, Roche/454, and similar instruments. module load java/1.8.0_45 module load varscan/2.3.9 Then to run VarScan, you should either prefix the .jar you want to run with $VARSCANPATH: java -Xmx2g -jar $VARSCANPATH/VarScan.v2.3.9.jar OPTION1=value1 OPTION2=value2... Or we provide wrappers, so you can run it this way instead: varscan OPTION1=value1 OPTION2=value2...","title":"VarScan"},{"location":"Software_Guides/Other_Software/#vasp","text":"The Vienna Ab initio Simulation Package (VASP) is a computer program for atomic scale materials modelling, e.g. electronic structure calculations and quantum-mechanical molecular dynamics, from first principles. VASP is licensed software. To gain access, you need to email us letting us know what email address you are named on a VASP license using. You can also mention the name and email of the main VASP license holder and the license number if you have it, though this is not necessary. We will then check in the VASP portal if we can give you access. We will add you to the legvasp5 or legvasp6 reserved application groups depending on which versions you are licensed for, and remove you when VASP tell us you no longer have access. The VASP executables for current versions are named like this: vasp_gam - optimised for gamma point calculations only vasp_std - standard version vasp_ncl - for non-collinear magnetic structure and/or spin-orbit coupling calculations","title":"VASP"},{"location":"Software_Guides/Other_Software/#vasp-5","text":"# vasp 5 module unload -f compilers mpi module load compilers/intel/2017/update1 module load mpi/intel/2017/update1/intel module load vasp/5.4.4-18apr2017/intel-2017-update1 # Gerun is our mpirun wrapper which sets the machinefile and number of # processes to the amount you requested with -pe mpi. gerun vasp_std > vasp_output.$JOB_ID Note: although you can run VASP using the default Intel 2018 compiler this can lead to numerical errors in some types of simulation. In those cases we recommend switching to the specific compiler and MPI version used to build that install (mentioned at the end of the module name). We do this in the example above. Building your own VASP: You may also install your own copy of VASP in your home if you have access to the source, and we provide a simple VASP individual install script (tested with VASP 5.4.4, no patches). You need to download the VASP source code into your home directory and then you can run the script following the instructions at the top.","title":"VASP 5"},{"location":"Software_Guides/Other_Software/#vasp-6","text":"# vasp 6 module unload -f compilers mpi module load compilers/intel/2019/update5 module load mpi/intel/2019/update5/intel module load vasp/6.3.0-24Jan2022/intel-2019-update5 gerun vasp_std > vasp_output.$JOB_ID","title":"VASP 6"},{"location":"Software_Guides/Other_Software/#vasp-6-gpu","text":"This is the OpenACC GPU port of VASP. The VASP documentation has some information about suitable numbers of MPI processes vs GPUs. # vasp 6 GPU # request a gpu #$ -l gpu=1 module unload -f compilers mpi module load compilers/nvidia/hpc-sdk/22.1 module load fftw/3.3.10/nvidia-22.1 module load vasp/6.3.0-24Jan2022/nvidia-22.1-gpu gerun vasp_std > vasp_output.$JOB_ID","title":"VASP 6 GPU"},{"location":"Software_Guides/Other_Software/#xmds","text":"XMDS allows the fast and easy solution of sets of ordinary, partial and stochastic differential equations, using a variety of efficient numerical algorithms. We have XMDS 3 and XMDS 2 installed. For XMDS 3.0.0 you will need to load the modules on a login node and run xmds3-setup to set up XMDS. module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/intel/2015/update3/gnu-4.9.2 module load python3/3.7 module load fftw/3.3.4-impi/gnu-4.9.2 module load hdf/5-1.8.15/gnu-4.9.2 module load xmds/3.0.0 # run this on a login node to set up XMDS xmds3-setup You can also build the current developmental version from SVN in your space by running create-svn-xmds3-inst . For XMDS 2.2.2 you will need to load the modules on a login node and run xmds2-setup to set up XMDS. module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/intel/2015/update3/gnu-4.9.2 module load python2/recommended module load fftw/3.3.4-impi/gnu-4.9.2 module load hdf/5-1.8.15/gnu-4.9.2 module load xmds/2.2.2 # run this on a login node to set up XMDS xmds2-setup Note that the create-svn-xmds-inst SVN install using the 2.2.2 modules will no longer work since the release of XMDS 3.0.0 (see above to use that).","title":"XMDS"},{"location":"Software_Guides/R/","text":"Type module avail r to see the currently available versions of R. The current version will always also exist as r/recommended - this is a module bundle and loading it will also load its many dependencies. module show r/recommended shows you exactly which versions loading this module will give you. R can be run on a single core or multithreaded using many cores (some commands can run threaded automatically, otherwise you may wish to look at R's parallel package). doMPI , Rmpi and snow allow multi-node parallel jobs using MPI to be run. List of additional R packages shows you what packages are installed and available for the current R version. Setup \u00a7 Before you can use R interactively, you need to load the R module using: module -f unload compilers mpi gcc-libs module load r/recommended Example serial jobscript \u00a7 This script runs R using only one core. #!/bin/bash -l # Example jobscript to run a single core R job # Request ten minutes of wallclock time (format hours:minutes:seconds). # Change this to suit your requirements. #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM. Change this to suit your requirements. #$ -l mem=1G # Set the name of the job. You can change this if you wish. #$ -N R_job_1 # Set the working directory to somewhere in your scratch space. This is # necessary because the compute nodes cannot write to your $HOME # NOTE: this directory must exist. # Replace \"<your_UCL_id>\" with your UCL user ID #$ -wd /home/<your_UCL_id>/Scratch/R_output # Your work must be done in $TMPDIR (serial jobs particularly) cd $TMPDIR # Load the R module and run your R program module -f unload compilers mpi gcc-libs module load r/recommended R --no-save < /home/username/Scratch/myR_job.R > myR_job.out # Preferably, tar-up (archive) all output files to transfer them back # to your space. This will include the R_output file above. tar zcvf $HOME/Scratch/R_output/files_from_job_$JOB_ID.tgz $TMPDIR # Make sure you have given enough time for the copy to complete! You will need to change the -wd /home/<your_UCL_id>/Scratch/R_output location and the location of your R input file, called myR_job.R here. myR_job.out is the file we are redirecting the output into. The output file is saved in the tar archive produced by the last command in the runscript and will be in $HOME/Scratch/R_output . If your jobscript is called run-R.sh then your job submission command would be: qsub run-R.sh Example shared memory threaded parallel job \u00a7 This script uses multiple cores on the same node. It cannot run across multiple nodes. #!/bin/bash -l # Example jobscript to run an OpenMP threaded R job across multiple cores on one node. # This may be using the foreach packages foreach(...) %dopar% for example. # Request ten minutes of wallclock time (format hours:minutes:seconds). # Change this to suit your requirements. #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per core. Change this to suit your requirements. #$ -l mem=1G # Set the name of the job. You can change this if you wish. #$ -N R_jobMC_2 # Select 12 threads. The number of threads here must equal the number of worker # processes in the registerDoMC call in your R program. #$ -pe smp 12 # Set the working directory to somewhere in your scratch space. This is # necessary because the compute nodes cannot write to your $HOME # NOTE: this directory must exist. # Replace \"<your_UCL_id>\" with your UCL user ID #$ -wd /home/<your_UCL_id>/Scratch/R_output # Your work must be done in $TMPDIR cd $TMPDIR # Load the R module and run your R program module -f unload compilers mpi gcc-libs module load r/recommended R --no-save < /home/username/Scratch/myR_job.R > myR_job.out # Preferably, tar-up (archive) all output files to transfer them back # to your space. This will include the R_output file above. tar zcvf $HOME/Scratch/R_output/files_from_job_$JOB_ID.tgz $TMPDIR # Make sure you have given enough time for the copy to complete! You will need to change the -wd /home/<your_UCL_id>/Scratch/R_output location and the location of your R input file, called myR_job.R here. myR_job.out is the file we are redirecting the output into. The output file is saved in the tar archive produced by the last command in the runscript and will be in $HOME/Scratch/R_output . If your jobscript is called run-R.sh then your job submission command would be: qsub run-R.sh Example multi-node parallel job using Rmpi and snow \u00a7 This script uses Rmpi and snow to allow it to run across multiple nodes using MPI. #!/bin/bash -l # Example jobscript to run an R MPI parallel job # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per process. #$ -l mem=1G # Request 15 gigabytes of TMPDIR space per node (default is 10 GB) #$ -l tmpfs=15G # Set the name of the job. #$ -N snow_monte_carlo # Select the MPI parallel environment with 32 processes #$ -pe mpi 32 # Set the working directory to somewhere in your scratch space. This is # necessary because the compute nodes cannot write to your $HOME # NOTE: this directory must exist. # Replace \"<your_UCL_id>\" with your UCL user ID #$ -wd /home/<your_UCL_id>/Scratch/R_output # Load the R module module -f unload compilers mpi gcc-libs module load r/recommended # Copy example files in to the working directory (not necessary if already there) cp ~/R/Examples/snow_example.R . cp ~/R/Examples/monte_carlo.R . # Run our MPI job. GERun is our wrapper for mpirun, which launches MPI jobs gerun RMPISNOW < snow_example.R > snow.out.${JOB_ID} The output file is saved in $HOME/Scratch/R_examples/snow/snow.out.${JOB_ID} . If your jobscript is called run-R-snow.sh then your job submission command would be: qsub run-R-snow.sh Example R script using Rmpi and snow \u00a7 This R script has been written to use Rmpi and snow and can be used with the above jobscript. It is snow_example.R above. #Load the snow and random number package. library(snow) library(Rmpi) # This example uses the already installed LEcuyers RNG library(rlecuyer) library(rlecuyer) # Set up our input/output source('./monte_carlo.R') sink('./monte_carlo_output.txt') # Get a reference to our snow cluster that has been set up by the RMPISNOW # script. cl <- getMPIcluster () # Display info about each process in the cluster print(clusterCall(cl, function() Sys.info())) # Load the random number package on each R process clusterEvalQ (cl, library (rlecuyer)) # Generate a seed for the pseudorandom number generator, unique to each # processor in the cluster. #Uncomment below line for default (unchanging) random number seed. #clusterSetupRNG(cl, type = 'RNGstream') #The lines below set up a time-based random number seed. Note that #this only demonstrates the virtues of changing the seed; no guarantee #is made that this seed is at all useful. Comment out if you uncomment #the above line. s <- sum(strtoi(charToRaw(date()), base = 32)) clusterSetupRNGstream(cl, seed=rep(s,6)) #Choose which of the following blocks best fit your own needs. # BLOCK 1 # Set up the input to our Monte Carlo function. # Input is identical across the batch, only RNG seed has changed. # For this example, both clusters will roll one die. nrolls <- 2 print(\"Roll the dice once...\") output <- clusterCall(cl, monte_carlo, nrolls) output print(\"Roll the dice again...\") output <- clusterCall(cl, monte_carlo, nrolls) output # Output should show the results of two rolls of a six-sided die. #BLOCK 2 # Input is different for each processor print(\"Second example: coin flip plus 3 dice\") input <- array(1:2) # Set up array of inputs, with each entry input[1] <- 1 # corresponding to one processor. input[2] <- 3 parameters <- array(1:2) # Set up inputs that will be used by each cluster. parameters[1] <- 2 # These will be passed to monte_carlo as its parameters[2] <- 6 # second argument. output <- clusterApply(cl, input, monte_carlo, parameters) # Output should show the results of a coin flip and the roll of three # six-sided die. # Output the output. output inputStrings <- array(1:2) inputStrings[1] <- 'abc' inputStrings[2] <- 'def' output <- clusterApply(cl, inputStrings, paste, 'foo') output #clusterEvalQ(cl, sinkWorkerOutput(\"snow_monte_carlo.out\")) # Clean up the cluster and release the relevant resources. stopCluster(cl) sink() mpi.quit() This is monte_carlo.R which is called by snow_example.R : monte_carlo <- function(x, numsides=6){ streamname <- .lec.GetStreams () dice <- .lec.uniform.int(streamname[1], n = 1, a=1, b=numsides) outp <- sum(dice) return(outp) } This example is based on SHARCNET's Using R and MPI . Using your own R packages \u00a7 If we do not have R packages installed centrally that you wish to use, you can install them in your space on the cluster and tell R where to find them. First you need to tell R where to install your package to and where to look for user-installed packages, using the R library path. Set your R library path \u00a7 There are several ways to modify your R library path so you can pick up packages that you have installed in your own space. The easiest way is to add them to the R_LIBS environment variable (insert the correct path): export R_LIBS=/your/local/R/library/path:$R_LIBS This is a colon-separated list of directories that R will search through. Setting that in your terminal will let you install to that path from inside R and should also be put in your jobscript (or your .bashrc ) when you submit a job using those libraries. This appends your directory to the existing value of $R_LIBS rather than overwriting it so the centrally-installed libraries can still be found. You can also change the library path for a session from within R: .libPaths(c('~/MyRlibs',.libPaths())) This puts your directory at the beginning of R's search path, and means that install.packages() will automatically put packages there and the library() function will find libraries in your local directory. Install an R package \u00a7 To install, after setting your library path: From inside R, you can do install.packages('package_name', repos=\"http://cran.r-project.org\") Or if you have downloaded the tar file, you can do R CMD INSTALL -l /home/username/your_R_libs_directory package.tar.gz If you want to keep some libraries separate, you can have multiple colon-separated paths in your $R_LIBS and specify which one you want to install into with R CMD INSTALL . BioConductor \u00a7 If you are installing extra packages for BioConductor, check that you are using the same version that the R module you have loaded is using. Eg. you can find the BioConductor 3.15 package downloads here .","title":"R"},{"location":"Software_Guides/R/#setup","text":"Before you can use R interactively, you need to load the R module using: module -f unload compilers mpi gcc-libs module load r/recommended","title":"Setup"},{"location":"Software_Guides/R/#example-serial-jobscript","text":"This script runs R using only one core. #!/bin/bash -l # Example jobscript to run a single core R job # Request ten minutes of wallclock time (format hours:minutes:seconds). # Change this to suit your requirements. #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM. Change this to suit your requirements. #$ -l mem=1G # Set the name of the job. You can change this if you wish. #$ -N R_job_1 # Set the working directory to somewhere in your scratch space. This is # necessary because the compute nodes cannot write to your $HOME # NOTE: this directory must exist. # Replace \"<your_UCL_id>\" with your UCL user ID #$ -wd /home/<your_UCL_id>/Scratch/R_output # Your work must be done in $TMPDIR (serial jobs particularly) cd $TMPDIR # Load the R module and run your R program module -f unload compilers mpi gcc-libs module load r/recommended R --no-save < /home/username/Scratch/myR_job.R > myR_job.out # Preferably, tar-up (archive) all output files to transfer them back # to your space. This will include the R_output file above. tar zcvf $HOME/Scratch/R_output/files_from_job_$JOB_ID.tgz $TMPDIR # Make sure you have given enough time for the copy to complete! You will need to change the -wd /home/<your_UCL_id>/Scratch/R_output location and the location of your R input file, called myR_job.R here. myR_job.out is the file we are redirecting the output into. The output file is saved in the tar archive produced by the last command in the runscript and will be in $HOME/Scratch/R_output . If your jobscript is called run-R.sh then your job submission command would be: qsub run-R.sh","title":"Example serial jobscript"},{"location":"Software_Guides/R/#example-shared-memory-threaded-parallel-job","text":"This script uses multiple cores on the same node. It cannot run across multiple nodes. #!/bin/bash -l # Example jobscript to run an OpenMP threaded R job across multiple cores on one node. # This may be using the foreach packages foreach(...) %dopar% for example. # Request ten minutes of wallclock time (format hours:minutes:seconds). # Change this to suit your requirements. #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per core. Change this to suit your requirements. #$ -l mem=1G # Set the name of the job. You can change this if you wish. #$ -N R_jobMC_2 # Select 12 threads. The number of threads here must equal the number of worker # processes in the registerDoMC call in your R program. #$ -pe smp 12 # Set the working directory to somewhere in your scratch space. This is # necessary because the compute nodes cannot write to your $HOME # NOTE: this directory must exist. # Replace \"<your_UCL_id>\" with your UCL user ID #$ -wd /home/<your_UCL_id>/Scratch/R_output # Your work must be done in $TMPDIR cd $TMPDIR # Load the R module and run your R program module -f unload compilers mpi gcc-libs module load r/recommended R --no-save < /home/username/Scratch/myR_job.R > myR_job.out # Preferably, tar-up (archive) all output files to transfer them back # to your space. This will include the R_output file above. tar zcvf $HOME/Scratch/R_output/files_from_job_$JOB_ID.tgz $TMPDIR # Make sure you have given enough time for the copy to complete! You will need to change the -wd /home/<your_UCL_id>/Scratch/R_output location and the location of your R input file, called myR_job.R here. myR_job.out is the file we are redirecting the output into. The output file is saved in the tar archive produced by the last command in the runscript and will be in $HOME/Scratch/R_output . If your jobscript is called run-R.sh then your job submission command would be: qsub run-R.sh","title":"Example shared memory threaded parallel job"},{"location":"Software_Guides/R/#example-multi-node-parallel-job-using-rmpi-and-snow","text":"This script uses Rmpi and snow to allow it to run across multiple nodes using MPI. #!/bin/bash -l # Example jobscript to run an R MPI parallel job # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per process. #$ -l mem=1G # Request 15 gigabytes of TMPDIR space per node (default is 10 GB) #$ -l tmpfs=15G # Set the name of the job. #$ -N snow_monte_carlo # Select the MPI parallel environment with 32 processes #$ -pe mpi 32 # Set the working directory to somewhere in your scratch space. This is # necessary because the compute nodes cannot write to your $HOME # NOTE: this directory must exist. # Replace \"<your_UCL_id>\" with your UCL user ID #$ -wd /home/<your_UCL_id>/Scratch/R_output # Load the R module module -f unload compilers mpi gcc-libs module load r/recommended # Copy example files in to the working directory (not necessary if already there) cp ~/R/Examples/snow_example.R . cp ~/R/Examples/monte_carlo.R . # Run our MPI job. GERun is our wrapper for mpirun, which launches MPI jobs gerun RMPISNOW < snow_example.R > snow.out.${JOB_ID} The output file is saved in $HOME/Scratch/R_examples/snow/snow.out.${JOB_ID} . If your jobscript is called run-R-snow.sh then your job submission command would be: qsub run-R-snow.sh","title":"Example multi-node parallel job using Rmpi and snow"},{"location":"Software_Guides/R/#example-r-script-using-rmpi-and-snow","text":"This R script has been written to use Rmpi and snow and can be used with the above jobscript. It is snow_example.R above. #Load the snow and random number package. library(snow) library(Rmpi) # This example uses the already installed LEcuyers RNG library(rlecuyer) library(rlecuyer) # Set up our input/output source('./monte_carlo.R') sink('./monte_carlo_output.txt') # Get a reference to our snow cluster that has been set up by the RMPISNOW # script. cl <- getMPIcluster () # Display info about each process in the cluster print(clusterCall(cl, function() Sys.info())) # Load the random number package on each R process clusterEvalQ (cl, library (rlecuyer)) # Generate a seed for the pseudorandom number generator, unique to each # processor in the cluster. #Uncomment below line for default (unchanging) random number seed. #clusterSetupRNG(cl, type = 'RNGstream') #The lines below set up a time-based random number seed. Note that #this only demonstrates the virtues of changing the seed; no guarantee #is made that this seed is at all useful. Comment out if you uncomment #the above line. s <- sum(strtoi(charToRaw(date()), base = 32)) clusterSetupRNGstream(cl, seed=rep(s,6)) #Choose which of the following blocks best fit your own needs. # BLOCK 1 # Set up the input to our Monte Carlo function. # Input is identical across the batch, only RNG seed has changed. # For this example, both clusters will roll one die. nrolls <- 2 print(\"Roll the dice once...\") output <- clusterCall(cl, monte_carlo, nrolls) output print(\"Roll the dice again...\") output <- clusterCall(cl, monte_carlo, nrolls) output # Output should show the results of two rolls of a six-sided die. #BLOCK 2 # Input is different for each processor print(\"Second example: coin flip plus 3 dice\") input <- array(1:2) # Set up array of inputs, with each entry input[1] <- 1 # corresponding to one processor. input[2] <- 3 parameters <- array(1:2) # Set up inputs that will be used by each cluster. parameters[1] <- 2 # These will be passed to monte_carlo as its parameters[2] <- 6 # second argument. output <- clusterApply(cl, input, monte_carlo, parameters) # Output should show the results of a coin flip and the roll of three # six-sided die. # Output the output. output inputStrings <- array(1:2) inputStrings[1] <- 'abc' inputStrings[2] <- 'def' output <- clusterApply(cl, inputStrings, paste, 'foo') output #clusterEvalQ(cl, sinkWorkerOutput(\"snow_monte_carlo.out\")) # Clean up the cluster and release the relevant resources. stopCluster(cl) sink() mpi.quit() This is monte_carlo.R which is called by snow_example.R : monte_carlo <- function(x, numsides=6){ streamname <- .lec.GetStreams () dice <- .lec.uniform.int(streamname[1], n = 1, a=1, b=numsides) outp <- sum(dice) return(outp) } This example is based on SHARCNET's Using R and MPI .","title":"Example R script using Rmpi and snow"},{"location":"Software_Guides/R/#using-your-own-r-packages","text":"If we do not have R packages installed centrally that you wish to use, you can install them in your space on the cluster and tell R where to find them. First you need to tell R where to install your package to and where to look for user-installed packages, using the R library path.","title":"Using your own R packages"},{"location":"Software_Guides/R/#set-your-r-library-path","text":"There are several ways to modify your R library path so you can pick up packages that you have installed in your own space. The easiest way is to add them to the R_LIBS environment variable (insert the correct path): export R_LIBS=/your/local/R/library/path:$R_LIBS This is a colon-separated list of directories that R will search through. Setting that in your terminal will let you install to that path from inside R and should also be put in your jobscript (or your .bashrc ) when you submit a job using those libraries. This appends your directory to the existing value of $R_LIBS rather than overwriting it so the centrally-installed libraries can still be found. You can also change the library path for a session from within R: .libPaths(c('~/MyRlibs',.libPaths())) This puts your directory at the beginning of R's search path, and means that install.packages() will automatically put packages there and the library() function will find libraries in your local directory.","title":"Set your R library path"},{"location":"Software_Guides/R/#install-an-r-package","text":"To install, after setting your library path: From inside R, you can do install.packages('package_name', repos=\"http://cran.r-project.org\") Or if you have downloaded the tar file, you can do R CMD INSTALL -l /home/username/your_R_libs_directory package.tar.gz If you want to keep some libraries separate, you can have multiple colon-separated paths in your $R_LIBS and specify which one you want to install into with R CMD INSTALL .","title":"Install an R package"},{"location":"Software_Guides/R/#bioconductor","text":"If you are installing extra packages for BioConductor, check that you are using the same version that the R module you have loaded is using. Eg. you can find the BioConductor 3.15 package downloads here .","title":"BioConductor"},{"location":"Software_Guides/Singularity/","text":"Using Singularity on Our Clusters \u00a7 Singularity is installed on all our clusters. You can use containers you have downloaded in your space. Run singularity --version to see which version we currently have installed. Set up cache locations and bind directories \u00a7 The cache directories should be set to somewhere in your space so they don't fill up /tmp on the login nodes. The bindpath specifies what directories are made available inside the container - only your home is bound by default so you need to add Scratch. You can either use the singularity-env environment module for this, or run the commands manually. module load singularity-env or: # Create a .singularity directory in your Scratch mkdir $HOME/Scratch/.singularity # Create cache subdirectories we will use / export mkdir $HOME/Scratch/.singularity/tmp mkdir $HOME/Scratch/.singularity/localcache mkdir $HOME/Scratch/.singularity/pull # Set all the Singularity cache dirs to Scratch export SINGULARITY_CACHEDIR=$HOME/Scratch/.singularity export SINGULARITY_TMPDIR=$SINGULARITY_CACHEDIR/tmp export SINGULARITY_LOCALCACHEDIR=$SINGULARITY_CACHEDIR/localcache export SINGULARITY_PULLFOLDER=$SINGULARITY_CACHEDIR/pull # Bind your Scratch directory so it is accessible from inside the container # and the temporary storage jobs are allocated export SINGULARITY_BINDPATH=/scratch/scratch/$USER,/tmpdir Different subdirectories are being set for each cache so you can tell which files came from where. You probably want to add those export statements to your .bashrc under # User specific aliases and functions so those environment variables are always set when you log in. For more information on these options, have a look at the Singularity documentation: Singularity user guide Singularity Bind Paths and Mounts Singularity Build Environment Graphical containers in interactive jobs \u00a7 If you are trying to run a graphical application from inside a container in an interactive job and it is failing with errors about not being able to open a display, you will need to: ssh in to the cluster with X-forwarding on as normal request an interactive job using qrsh bind mount your $HOME/.Xauthority file inside the container To do the bind mount, you could add it to your $SINGULARITY_BINDPATH export SINGULARITY_BINDPATH=/scratch/scratch/$USER,/tmpdir,$HOME/.Xauthority or you can pass it in with the --bind option to singularity shell or singularity exec .","title":"Singularity"},{"location":"Software_Guides/Singularity/#using-singularity-on-our-clusters","text":"Singularity is installed on all our clusters. You can use containers you have downloaded in your space. Run singularity --version to see which version we currently have installed.","title":"Using Singularity on Our Clusters"},{"location":"Software_Guides/Singularity/#set-up-cache-locations-and-bind-directories","text":"The cache directories should be set to somewhere in your space so they don't fill up /tmp on the login nodes. The bindpath specifies what directories are made available inside the container - only your home is bound by default so you need to add Scratch. You can either use the singularity-env environment module for this, or run the commands manually. module load singularity-env or: # Create a .singularity directory in your Scratch mkdir $HOME/Scratch/.singularity # Create cache subdirectories we will use / export mkdir $HOME/Scratch/.singularity/tmp mkdir $HOME/Scratch/.singularity/localcache mkdir $HOME/Scratch/.singularity/pull # Set all the Singularity cache dirs to Scratch export SINGULARITY_CACHEDIR=$HOME/Scratch/.singularity export SINGULARITY_TMPDIR=$SINGULARITY_CACHEDIR/tmp export SINGULARITY_LOCALCACHEDIR=$SINGULARITY_CACHEDIR/localcache export SINGULARITY_PULLFOLDER=$SINGULARITY_CACHEDIR/pull # Bind your Scratch directory so it is accessible from inside the container # and the temporary storage jobs are allocated export SINGULARITY_BINDPATH=/scratch/scratch/$USER,/tmpdir Different subdirectories are being set for each cache so you can tell which files came from where. You probably want to add those export statements to your .bashrc under # User specific aliases and functions so those environment variables are always set when you log in. For more information on these options, have a look at the Singularity documentation: Singularity user guide Singularity Bind Paths and Mounts Singularity Build Environment","title":"Set up cache locations and bind directories"},{"location":"Software_Guides/Singularity/#graphical-containers-in-interactive-jobs","text":"If you are trying to run a graphical application from inside a container in an interactive job and it is failing with errors about not being able to open a display, you will need to: ssh in to the cluster with X-forwarding on as normal request an interactive job using qrsh bind mount your $HOME/.Xauthority file inside the container To do the bind mount, you could add it to your $SINGULARITY_BINDPATH export SINGULARITY_BINDPATH=/scratch/scratch/$USER,/tmpdir,$HOME/.Xauthority or you can pass it in with the --bind option to singularity shell or singularity exec .","title":"Graphical containers in interactive jobs"},{"location":"Supplementary/GPU_Clusters/","text":"UCL users may be able to access the following GPU clusters. National GPU clusters \u00a7 There are two nationally-accessible EPSRC Tier 2 HPC centres with GPUs. Access is generally managed through calls to an EPSRC Resource Allocation Panel Tier 2 RAP calls Filterable page for all open EPSRC calls There may also be pump-priming/proof of concept access available. General information about machines with external access is available at HPC-UK . CSD3 \u00a7 Suitable for workloads spanning multiple compute nodes using GPUs and MPI NVIDIA Tesla P100 Access to CSD3 JADE \u00a7 NVIDIA DGX-1 (Tesla P100) Access to JADE","title":"GPU clusters"},{"location":"Supplementary/GPU_Clusters/#national-gpu-clusters","text":"There are two nationally-accessible EPSRC Tier 2 HPC centres with GPUs. Access is generally managed through calls to an EPSRC Resource Allocation Panel Tier 2 RAP calls Filterable page for all open EPSRC calls There may also be pump-priming/proof of concept access available. General information about machines with external access is available at HPC-UK .","title":"National GPU clusters"},{"location":"Supplementary/GPU_Clusters/#csd3","text":"Suitable for workloads spanning multiple compute nodes using GPUs and MPI NVIDIA Tesla P100 Access to CSD3","title":"CSD3"},{"location":"Supplementary/GPU_Clusters/#jade","text":"NVIDIA DGX-1 (Tesla P100) Access to JADE","title":"JADE"},{"location":"Supplementary/GPU_Nodes/","text":"GPU Nodes \u00a7 Node Types \u00a7 You can view the hardware specifications for GPU node types in Myriad . There are several types of GPU nodes available in Myriad. Available modules \u00a7 You can see all the available CUDA modules by typing module load beta-modules module avail cuda The ones that become visible once you load beta-modules have been built with newer compilers. Sample CUDA code \u00a7 There are samples in some CUDA install locations, e.g. /shared/ucl/apps/cuda/7.5.18/gnu-4.9.2/samples /shared/ucl/apps/cuda/8.0.61/gnu-4.9.2/samples which are further documented by NVIDIA here . In general, you should look at their CUDA docs: http://docs.nvidia.com/cuda/ Sample jobscripts \u00a7 You can see sample jobscripts here . Use this in your script to request up to 2 GPUs. #$ -l gpu=2 Load GCC and the relevant CUDA module. module unload compilers mpi module load compilers/gnu/4.9.2 module load cuda/7.5.18/gnu-4.9.2 Running the sample code \u00a7 To get started, here's how you would compile one of the CUDA samples and run it in an interactive session on a GPU node. You can compile CUDA code on the login nodes like this (which do not have GPUs) if they do not require all the CUDA libraries to be present at compile time. If they do, you'll get an error saying it cannot link the CUDA libraries, and ERROR: CUDA could not be found on your system and you will need tro do your compiling on the GPU node as well. 1. Load the cuda module module unload compilers mpi module load compilers/gnu/4.9.2 module load cuda/7.5.18/gnu-4.9.2 2. Copy the samples directory to somewhere in your home (or to Scratch if you're building on the GPU node or are going to want a job to write anything in the same directory). cp -r /shared/ucl/apps/cuda/7.5.18/gnu-4.9.2/NVIDIA_CUDA-7.5_Samples/ ~/cuda 3. Choose an example: eigenvalues in this case, and build using the provided makefile - if you have a look at it you can see it is using nvcc and g++. cd NVIDIA_CUDA-7.5_Samples/6_Advanced/eigenvalues/ make 4. Request an interactive job with a GPU and wait to be given access to the node. You will see your prompt change to indicate that you are on a different node than the login node once your qrsh request has been scheduled, and you can then continue. Load the cuda module on the node and run the program. qrsh -l mem=1G,h_rt=0:30:0,gpu=1 -now no # wait for interactive job to start module unload compilers mpi module load compilers/gnu/4.9.2 module load cuda/7.5.18 cd ~/cuda/NVIDIA_CUDA-7.5_Samples/6_Advanced/eigenvalues/ ./eigenvalues 5. Your output should look something like this: Starting eigenvalues GPU Device 0: \"Tesla M2070\" with compute capability 2.0 Matrix size: 2048 x 2048 Precision: 0.000010 Iterations to be timed: 100 Result filename: 'eigenvalues.dat' Gerschgorin interval: -2.894310 / 2.923303 Average time step 1: 26.739325 ms Average time step 2, one intervals: 9.031162 ms Average time step 2, mult intervals: 0.004330 ms Average time TOTAL: 35.806992 ms Test Succeeded! Building your own code \u00a7 As above, if the code you are trying to compile needs to link against libcuda, it must also be built on a GPU node because only the GPU nodes have the correct libraries. The NVIDIA examples don't require this, but things like Tensorflow do. Tensorflow \u00a7 Tensorflow is installed: type module avail tensorflow to see the available versions. Modules to load for the non-MKL GPU version: module unload compilers mpi module load compilers/gnu/4.9.2 module load python3/3.7 module load cuda/10.0.130/gnu-4.9.2 module load cudnn/7.4.2.24/cuda-10.0 module load tensorflow/2.0.0/gpu-py37 PyTorch \u00a7 PyTorch is installed: type module avail pytorch to see the versions available. Modules to load the most recent release we have installed (May 2022) are: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load python3/3.9-gnu-10.2.0 module load cuda/11.3.1/gnu-10.2.0 module load cudnn/8.2.1.32/cuda-11.3 module load pytorch/1.11.0/gpu If you want the CPU only version then use: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load python3/3.9-gnu-10.2.0 module load pytorch/1.11.0/cpu Using MPI and GPUs \u00a7 It is possible to run MPI programs that use GPUs but only within a single node, so you can request up to 4 GPUs and 36 cores on Myriad. Looking for more GPUs? \u00a7 GPU clusters available to UCL users .","title":"GPU nodes"},{"location":"Supplementary/GPU_Nodes/#gpu-nodes","text":"","title":"GPU Nodes"},{"location":"Supplementary/GPU_Nodes/#node-types","text":"You can view the hardware specifications for GPU node types in Myriad . There are several types of GPU nodes available in Myriad.","title":"Node Types"},{"location":"Supplementary/GPU_Nodes/#available-modules","text":"You can see all the available CUDA modules by typing module load beta-modules module avail cuda The ones that become visible once you load beta-modules have been built with newer compilers.","title":"Available modules"},{"location":"Supplementary/GPU_Nodes/#sample-cuda-code","text":"There are samples in some CUDA install locations, e.g. /shared/ucl/apps/cuda/7.5.18/gnu-4.9.2/samples /shared/ucl/apps/cuda/8.0.61/gnu-4.9.2/samples which are further documented by NVIDIA here . In general, you should look at their CUDA docs: http://docs.nvidia.com/cuda/","title":"Sample CUDA code"},{"location":"Supplementary/GPU_Nodes/#sample-jobscripts","text":"You can see sample jobscripts here . Use this in your script to request up to 2 GPUs. #$ -l gpu=2 Load GCC and the relevant CUDA module. module unload compilers mpi module load compilers/gnu/4.9.2 module load cuda/7.5.18/gnu-4.9.2","title":"Sample jobscripts"},{"location":"Supplementary/GPU_Nodes/#running-the-sample-code","text":"To get started, here's how you would compile one of the CUDA samples and run it in an interactive session on a GPU node. You can compile CUDA code on the login nodes like this (which do not have GPUs) if they do not require all the CUDA libraries to be present at compile time. If they do, you'll get an error saying it cannot link the CUDA libraries, and ERROR: CUDA could not be found on your system and you will need tro do your compiling on the GPU node as well. 1. Load the cuda module module unload compilers mpi module load compilers/gnu/4.9.2 module load cuda/7.5.18/gnu-4.9.2 2. Copy the samples directory to somewhere in your home (or to Scratch if you're building on the GPU node or are going to want a job to write anything in the same directory). cp -r /shared/ucl/apps/cuda/7.5.18/gnu-4.9.2/NVIDIA_CUDA-7.5_Samples/ ~/cuda 3. Choose an example: eigenvalues in this case, and build using the provided makefile - if you have a look at it you can see it is using nvcc and g++. cd NVIDIA_CUDA-7.5_Samples/6_Advanced/eigenvalues/ make 4. Request an interactive job with a GPU and wait to be given access to the node. You will see your prompt change to indicate that you are on a different node than the login node once your qrsh request has been scheduled, and you can then continue. Load the cuda module on the node and run the program. qrsh -l mem=1G,h_rt=0:30:0,gpu=1 -now no # wait for interactive job to start module unload compilers mpi module load compilers/gnu/4.9.2 module load cuda/7.5.18 cd ~/cuda/NVIDIA_CUDA-7.5_Samples/6_Advanced/eigenvalues/ ./eigenvalues 5. Your output should look something like this: Starting eigenvalues GPU Device 0: \"Tesla M2070\" with compute capability 2.0 Matrix size: 2048 x 2048 Precision: 0.000010 Iterations to be timed: 100 Result filename: 'eigenvalues.dat' Gerschgorin interval: -2.894310 / 2.923303 Average time step 1: 26.739325 ms Average time step 2, one intervals: 9.031162 ms Average time step 2, mult intervals: 0.004330 ms Average time TOTAL: 35.806992 ms Test Succeeded!","title":"Running the sample code"},{"location":"Supplementary/GPU_Nodes/#building-your-own-code","text":"As above, if the code you are trying to compile needs to link against libcuda, it must also be built on a GPU node because only the GPU nodes have the correct libraries. The NVIDIA examples don't require this, but things like Tensorflow do.","title":"Building your own code"},{"location":"Supplementary/GPU_Nodes/#tensorflow","text":"Tensorflow is installed: type module avail tensorflow to see the available versions. Modules to load for the non-MKL GPU version: module unload compilers mpi module load compilers/gnu/4.9.2 module load python3/3.7 module load cuda/10.0.130/gnu-4.9.2 module load cudnn/7.4.2.24/cuda-10.0 module load tensorflow/2.0.0/gpu-py37","title":"Tensorflow"},{"location":"Supplementary/GPU_Nodes/#pytorch","text":"PyTorch is installed: type module avail pytorch to see the versions available. Modules to load the most recent release we have installed (May 2022) are: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load python3/3.9-gnu-10.2.0 module load cuda/11.3.1/gnu-10.2.0 module load cudnn/8.2.1.32/cuda-11.3 module load pytorch/1.11.0/gpu If you want the CPU only version then use: module -f unload compilers mpi gcc-libs module load beta-modules module load gcc-libs/10.2.0 module load python3/3.9-gnu-10.2.0 module load pytorch/1.11.0/cpu","title":"PyTorch"},{"location":"Supplementary/GPU_Nodes/#using-mpi-and-gpus","text":"It is possible to run MPI programs that use GPUs but only within a single node, so you can request up to 4 GPUs and 36 cores on Myriad.","title":"Using MPI and GPUs"},{"location":"Supplementary/GPU_Nodes/#looking-for-more-gpus","text":"GPU clusters available to UCL users .","title":"Looking for more GPUs?"},{"location":"Supplementary/Hostkeys/","text":"These are the current hostkey fingerprints for our clusters. The MD5 or SHA256 at the front is letting you know what type of fingerprint it is - your ssh client may not include that part in its output. Myriad \u00a7 ED25519 key fingerprint is MD5:92:6d:97:46:eb:8d:0a:4b:8a:65:cb:0d:65:79:bb:7f ECDSA key fingerprint is SHA256:7FTryal3mIhWr9CqM3EPPeXsfezNk8Mm8HPCCAGXiIA RSA key fingerprint is 29:a7:45:04:83:86:ec:95:fa:25:dc:7a:f4:93:78:c1 Kathleen \u00a7 ED25519 key fingerprint is MD5:92:6d:97:46:eb:8d:0a:4b:8a:65:cb:0d:65:79:bb:7f ECDSA key fingerprint is SHA256:rCKAb0yOWXK8+GClKy/pdbwrUbrGMvFkMciZLVcbaTA RSA key fingerprint is 5a:cf:95:a2:e4:05:8a:36:46:dc:65:0a:f2:8b:ab:e1 Young \u00a7 ED25519 key fingerprint MD5 is 92:6d:97:46:eb:8d:0a:4b:8a:65:cb:0d:65:79:bb:7f ECDSA key fingerprint is SHA256:3zwMU9C8d9rgmYJ9qDElo15NnWyF2I4xy2X/VIAmFdo RSA key fingerprint is 06:17:f3:f2:0c:3e:0d:df:1d:04:fb:53:dc:77:60:56 Thomas \u00a7 ED25519 key fingerprint is MD5:92:6d:97:46:eb:8d:0a:4b:8a:65:cb:0d:65:79:bb:7f ECDSA key fingerprint is SHA256:r48udIRDfBEIJG+jiIJFs/56ZayaKUdusFd+JQ3jsO4 RSA key fingerprint is SHA256:AZ88UVU3BfZkSBOsMw5VKgbDi47o3dpEabPlIB9GtcM Michael \u00a7 ED25519 key fingerprint is MD5:b3:d9:60:a8:73:62:d5:91:ef:2b:ba:1e:d3:68:7c:ec ECDSA key fingerprint is SHA256:3PMLXp6ny0dECycvx4D7+t0sNgsSsLvSO5QUYmzkbhs RSA key fingerprint is 85:31:4b:cf:1a:ec:64:e4:b2:98:28:4a:46:b2:c1:90","title":"Hostkeys"},{"location":"Supplementary/Hostkeys/#myriad","text":"ED25519 key fingerprint is MD5:92:6d:97:46:eb:8d:0a:4b:8a:65:cb:0d:65:79:bb:7f ECDSA key fingerprint is SHA256:7FTryal3mIhWr9CqM3EPPeXsfezNk8Mm8HPCCAGXiIA RSA key fingerprint is 29:a7:45:04:83:86:ec:95:fa:25:dc:7a:f4:93:78:c1","title":"Myriad"},{"location":"Supplementary/Hostkeys/#kathleen","text":"ED25519 key fingerprint is MD5:92:6d:97:46:eb:8d:0a:4b:8a:65:cb:0d:65:79:bb:7f ECDSA key fingerprint is SHA256:rCKAb0yOWXK8+GClKy/pdbwrUbrGMvFkMciZLVcbaTA RSA key fingerprint is 5a:cf:95:a2:e4:05:8a:36:46:dc:65:0a:f2:8b:ab:e1","title":"Kathleen"},{"location":"Supplementary/Hostkeys/#young","text":"ED25519 key fingerprint MD5 is 92:6d:97:46:eb:8d:0a:4b:8a:65:cb:0d:65:79:bb:7f ECDSA key fingerprint is SHA256:3zwMU9C8d9rgmYJ9qDElo15NnWyF2I4xy2X/VIAmFdo RSA key fingerprint is 06:17:f3:f2:0c:3e:0d:df:1d:04:fb:53:dc:77:60:56","title":"Young"},{"location":"Supplementary/Hostkeys/#thomas","text":"ED25519 key fingerprint is MD5:92:6d:97:46:eb:8d:0a:4b:8a:65:cb:0d:65:79:bb:7f ECDSA key fingerprint is SHA256:r48udIRDfBEIJG+jiIJFs/56ZayaKUdusFd+JQ3jsO4 RSA key fingerprint is SHA256:AZ88UVU3BfZkSBOsMw5VKgbDi47o3dpEabPlIB9GtcM","title":"Thomas"},{"location":"Supplementary/Hostkeys/#michael","text":"ED25519 key fingerprint is MD5:b3:d9:60:a8:73:62:d5:91:ef:2b:ba:1e:d3:68:7c:ec ECDSA key fingerprint is SHA256:3PMLXp6ny0dECycvx4D7+t0sNgsSsLvSO5QUYmzkbhs RSA key fingerprint is 85:31:4b:cf:1a:ec:64:e4:b2:98:28:4a:46:b2:c1:90","title":"Michael"},{"location":"Supplementary/NVIDIA_Containers/","text":"Using NVIDIA Grid Cloud Containers \u00a7 NVIDIA's NGC Container Registry stores a lot of containers 1 with various applications pre-configured to be run with GPUs. Each container can be set up completely differently, so you'll need to read the instructions in the registry to work out how to use it. Many of the instructions for using these containers assume you are using the Docker toolset to run the container, but this is not installed on our services 2 . The Singularity container runtime can be used instead for most workloads, but there are some limitations, that mostly affect containers that try to run web services. In general, if a container's instructions do not have specific instructions for using Singularity, and would tell you to run, for example: docker run --gpus all nvcr.io/some/container You should instead use: singularity run --nv https://nvcr.io/some/container For jobs using MPI, this is more complicated, because the MPI traffic has to be passed between the container and the operating system underneath. Containers built to use MPI will usually contain instructions for using Singularity, however. Worked Example: NAMD 3 \u00a7 The NAMD authors publish a NAMD container on the NGC Container Registry, and we should be able to download this and run it on our cluster inside a batch job. The page about how to use the container is here: https://catalog.ngc.nvidia.com/orgs/hpc/containers/namd Following it through, you can download the benchmark example to check later whether your container works: mkdir ngc_namd_experiment cd ngc_namd_experiment wget -O - https://gitlab.com/NVHPC/ngc-examples/raw/master/namd/3.0/get_apoa1.sh | bash There are a couple of typos in the instructions: you'll need to use the tag 3.0-alpha3-singlenode instead of 3.0_alpha3-singlenode : export NAMD_TAG=\"3.0-alpha3-singlenode\" Creating the Container Image \u00a7 Before you use Singularity to create the container image, you should load the Singularity module to set up some directories where things are stored. Not doing this can cause you problems, because the default places often do not have space to store the large files needed. module load singularity-env Once you've done that, you can download the container's files and build them into the usable container: singularity build ${NAMD_TAG}.sif docker://nvcr.io/hpc/namd:${NAMD_TAG} This can take a while: Singularity has to download quite a few file collections and assemble them into a single usable set. You may see some of the following warnings: WARNING: 'nodev' mount option set on /lustre, it could be a source of failure during build process 2022/02/03 14:06:28 warn xattr{var/log/apt/term.log} ignoring ENOTSUP on setxattr \"user.rootlesscontainers\" 2022/02/03 14:06:28 warn xattr{/home/uccaiki/Scratch/.singularity/tmp/rootfs-5ac43e37-84fa-11ec-8784-0894ef553d4e/var/log/apt/term.log} destination filesystem does not support xattrs, further warnings will be suppressed These indicate that various capabilities are not available because of how we're building the container. For HPC use, they don't present a problem, but they could be problematic if you were building a web server into a container. When Singularity has finished, you should see the following message: INFO: Creating SIF file... INFO: Build complete: 3.0-alpha3-singlenode.sif This file is the container image , which contains the files needed to run NAMD. You can see what NAMD gets when running \"inside\" the container, by running ls with it: singularity exec 3.0-alpha3-singlenode.sif ls / gives: WARNING: Bind mount '/home/uccaiki => /home/uccaiki' overlaps container CWD /home/uccaiki/ngc_namd_experiment, may not be available bin boot dev environment etc home host_pwd lib lib64 lustre media mnt opt proc root run sbin scratch singularity srv sys tmp tmpdir usr var The warning you get is telling you that your current working directory overlaps with a directory being \"bound\" into the container. Binding brings a directory into the container's view of the filesystem, so that, for example, programs can still access your home directory as usual. In this case it's not a problem, because it's warning you that your home directory is being bound into the container in the same place it would usually be, and that means the same files are visible. By default, the clusters have Singularity configured to bind your home and Scratch directories into the container, as well as the per-job temporary storage allocated to jobs under $TMPDIR . The NAMD instructions make an alternative suggestion when setting up this environment variable to use to run Singularity, binding your data directory into a fixed place in the container: SINGULARITY=\"$(which singularity) exec --nv -B $(pwd):/host_pwd ${NAMD_TAG}.sif\" The option -B $(pwd):/host_pwd handles this, binding wherever you run the command from to the fixed location /host_pwd inside the container. So, for example, if you run: ls $SINGULARITY ls /host_pwd In both cases, you should see the same files, because you're looking at the same underlying directory. Running on a Single Node \u00a7 At this point you're ready to run NAMD inside the container, but you need a job script to submit to the scheduler which can set up the number of cores and GPUs correctly. #!/bin/bash -l # Start with our resource requirements: # 1 hour's maximum runtime #$ -l h_rt=1:00:00 # 2 GPUs #$ -l gpu=2 # 36 processor cores #$ -pe smp 36 # Start with current working directory the same as where we submitted the job from #$ -cwd # Make sure Singularity looks for our stored container data in the right places module load singularity-env # Set the variables we need for this example to run NAMD_TAG = \"3.0-alpha3-singlenode\" SINGULARITY = \" $( which singularity ) exec --nv -B $( pwd ) :/host_pwd ${ NAMD_TAG } .sif\" # This is where the benchmark's data ends up inside the container INPUT = \"/host_pwd/apoa1/apoa1_nve_cuda.namd\" # Show us some info we can refer to later printf \"Running NAMD using:\\n Cores: %d\\n GPUs: %d\\n Container image: %s\\nWorking directory: %s\\n Input: %s\\n\" \\ \" $NSLOTS \" \\ \" $GPU \" \\ \" ${ NAMD_TAG } .sif\" \\ \" $( pwd ) \" \\ \" $INPUT \" # Run NAMD \" $SINGULARITY \" namd3 +ppn \" $NSLOTS \" +setcpuaffinity +idlepoll \" $INPUT \" Copy this into a file, and submit it to the queue, e.g.: qsub ngc_namd_experiment.sh This should take about 5 minutes to run on a 36-core, 2-GPU node. A container is a way of bundling up a collection of files and instructions to run as a kind of \"altered view\" of the computer's files and systems. \u21a9 This is for a variety of reasons, but primarily that Docker presents a much larger range of security and misuse risks when used by inexperienced or hostile users. Singularity represents a much better fit for common HPC workloads and use-cases. \u21a9","title":"Using NVIDIA Grid Cloud Containers"},{"location":"Supplementary/NVIDIA_Containers/#using-nvidia-grid-cloud-containers","text":"NVIDIA's NGC Container Registry stores a lot of containers 1 with various applications pre-configured to be run with GPUs. Each container can be set up completely differently, so you'll need to read the instructions in the registry to work out how to use it. Many of the instructions for using these containers assume you are using the Docker toolset to run the container, but this is not installed on our services 2 . The Singularity container runtime can be used instead for most workloads, but there are some limitations, that mostly affect containers that try to run web services. In general, if a container's instructions do not have specific instructions for using Singularity, and would tell you to run, for example: docker run --gpus all nvcr.io/some/container You should instead use: singularity run --nv https://nvcr.io/some/container For jobs using MPI, this is more complicated, because the MPI traffic has to be passed between the container and the operating system underneath. Containers built to use MPI will usually contain instructions for using Singularity, however.","title":"Using NVIDIA Grid Cloud Containers"},{"location":"Supplementary/NVIDIA_Containers/#worked-example-namd-3","text":"The NAMD authors publish a NAMD container on the NGC Container Registry, and we should be able to download this and run it on our cluster inside a batch job. The page about how to use the container is here: https://catalog.ngc.nvidia.com/orgs/hpc/containers/namd Following it through, you can download the benchmark example to check later whether your container works: mkdir ngc_namd_experiment cd ngc_namd_experiment wget -O - https://gitlab.com/NVHPC/ngc-examples/raw/master/namd/3.0/get_apoa1.sh | bash There are a couple of typos in the instructions: you'll need to use the tag 3.0-alpha3-singlenode instead of 3.0_alpha3-singlenode : export NAMD_TAG=\"3.0-alpha3-singlenode\"","title":"Worked Example: NAMD 3"},{"location":"Supplementary/NVIDIA_Containers/#creating-the-container-image","text":"Before you use Singularity to create the container image, you should load the Singularity module to set up some directories where things are stored. Not doing this can cause you problems, because the default places often do not have space to store the large files needed. module load singularity-env Once you've done that, you can download the container's files and build them into the usable container: singularity build ${NAMD_TAG}.sif docker://nvcr.io/hpc/namd:${NAMD_TAG} This can take a while: Singularity has to download quite a few file collections and assemble them into a single usable set. You may see some of the following warnings: WARNING: 'nodev' mount option set on /lustre, it could be a source of failure during build process 2022/02/03 14:06:28 warn xattr{var/log/apt/term.log} ignoring ENOTSUP on setxattr \"user.rootlesscontainers\" 2022/02/03 14:06:28 warn xattr{/home/uccaiki/Scratch/.singularity/tmp/rootfs-5ac43e37-84fa-11ec-8784-0894ef553d4e/var/log/apt/term.log} destination filesystem does not support xattrs, further warnings will be suppressed These indicate that various capabilities are not available because of how we're building the container. For HPC use, they don't present a problem, but they could be problematic if you were building a web server into a container. When Singularity has finished, you should see the following message: INFO: Creating SIF file... INFO: Build complete: 3.0-alpha3-singlenode.sif This file is the container image , which contains the files needed to run NAMD. You can see what NAMD gets when running \"inside\" the container, by running ls with it: singularity exec 3.0-alpha3-singlenode.sif ls / gives: WARNING: Bind mount '/home/uccaiki => /home/uccaiki' overlaps container CWD /home/uccaiki/ngc_namd_experiment, may not be available bin boot dev environment etc home host_pwd lib lib64 lustre media mnt opt proc root run sbin scratch singularity srv sys tmp tmpdir usr var The warning you get is telling you that your current working directory overlaps with a directory being \"bound\" into the container. Binding brings a directory into the container's view of the filesystem, so that, for example, programs can still access your home directory as usual. In this case it's not a problem, because it's warning you that your home directory is being bound into the container in the same place it would usually be, and that means the same files are visible. By default, the clusters have Singularity configured to bind your home and Scratch directories into the container, as well as the per-job temporary storage allocated to jobs under $TMPDIR . The NAMD instructions make an alternative suggestion when setting up this environment variable to use to run Singularity, binding your data directory into a fixed place in the container: SINGULARITY=\"$(which singularity) exec --nv -B $(pwd):/host_pwd ${NAMD_TAG}.sif\" The option -B $(pwd):/host_pwd handles this, binding wherever you run the command from to the fixed location /host_pwd inside the container. So, for example, if you run: ls $SINGULARITY ls /host_pwd In both cases, you should see the same files, because you're looking at the same underlying directory.","title":"Creating the Container Image"},{"location":"Supplementary/NVIDIA_Containers/#running-on-a-single-node","text":"At this point you're ready to run NAMD inside the container, but you need a job script to submit to the scheduler which can set up the number of cores and GPUs correctly. #!/bin/bash -l # Start with our resource requirements: # 1 hour's maximum runtime #$ -l h_rt=1:00:00 # 2 GPUs #$ -l gpu=2 # 36 processor cores #$ -pe smp 36 # Start with current working directory the same as where we submitted the job from #$ -cwd # Make sure Singularity looks for our stored container data in the right places module load singularity-env # Set the variables we need for this example to run NAMD_TAG = \"3.0-alpha3-singlenode\" SINGULARITY = \" $( which singularity ) exec --nv -B $( pwd ) :/host_pwd ${ NAMD_TAG } .sif\" # This is where the benchmark's data ends up inside the container INPUT = \"/host_pwd/apoa1/apoa1_nve_cuda.namd\" # Show us some info we can refer to later printf \"Running NAMD using:\\n Cores: %d\\n GPUs: %d\\n Container image: %s\\nWorking directory: %s\\n Input: %s\\n\" \\ \" $NSLOTS \" \\ \" $GPU \" \\ \" ${ NAMD_TAG } .sif\" \\ \" $( pwd ) \" \\ \" $INPUT \" # Run NAMD \" $SINGULARITY \" namd3 +ppn \" $NSLOTS \" +setcpuaffinity +idlepoll \" $INPUT \" Copy this into a file, and submit it to the queue, e.g.: qsub ngc_namd_experiment.sh This should take about 5 minutes to run on a 36-core, 2-GPU node. A container is a way of bundling up a collection of files and instructions to run as a kind of \"altered view\" of the computer's files and systems. \u21a9 This is for a variety of reasons, but primarily that Docker presents a much larger range of security and misuse risks when used by inexperienced or hostile users. Singularity represents a much better fit for common HPC workloads and use-cases. \u21a9","title":"Running on a Single Node"},{"location":"Supplementary/Points_of_Contact/","text":"User management tools \u00a7 This page contains tools and information for the nominated Points of Contact. Other system-specific information is at Thomas , Michael or Young . These commands can all be run as thomas-command or michael-command or young-command : they run the same thing and the different names are for convenience. Displaying user information \u00a7 thomas-show , michael-show or young-show is a tool that enables you to find a lot of information about users. Access to the database is given to points of contact individually, contact rc-support@ucl.ac.uk if you try to use this and get an access denied. At the top level, --user shows all information for one user, in multiple tables. --contacts shows all points of contact - useful for getting the IDs, and --institutes is the same. --allusers will show everyone's basic info. --getmmm will show the most recently used mmm username. thomas-show -h usage: thomas-show [-h] [--user username] [--contacts] [--institutes] [--allusers] [--getmmm] {recentusers,getusers,whois} ... Show data from the Thomas database. Use [positional argument -h] for more help. positional arguments: {recentusers,getusers,whois} recentusers Show the n newest users (5 by default) getusers Show all users with this project, institute, contact whois Search for users matching the given requirements optional arguments: -h, --help show this help message and exit --user username Show all current info for this user --contacts Show all allowed values for contact --institutes Show all allowed values for institute --allusers Show all current users --getmmm Show the highest mmm username used Show recent users \u00a7 thomas-show recentusers shows you the most recently-added N users, default 5. thomas-show recentusers -h usage: thomas-show recentusers [-h] [-n N] optional arguments: -h, --help show this help message and exit -n N Show users with a given project, institute, contact \u00a7 thomas-show getusers will search for exact matches to the given project, institute, contact combination. thomas-show getusers -h usage: thomas-show getusers [-h] [-p PROJECT] [-i INST_ID] [-c POC_ID] optional arguments: -h, --help show this help message and exit -p PROJECT, --project PROJECT Project name -i INST_ID, --institute INST_ID Institute ID -c POC_ID, --contact POC_ID Point of Contact ID Search for users based on partial information \u00a7 thomas-show whois can be used to search for partial matches to username, name, email fragments, including all of those in combination. thomas-show whois -h usage: thomas-show whois [-h] [-u USERNAME] [-e EMAIL] [-n GIVEN_NAME] [-s SURNAME] optional arguments: -h, --help show this help message and exit -u USERNAME, --user USERNAME UCL username of user contains -e EMAIL, --email EMAIL Email address of user contains -n GIVEN_NAME, --name GIVEN_NAME Given name of user contains -s SURNAME, --surname SURNAME Surname of user contains Adding user information and new projects \u00a7 thomas-add will add information to the database. Access to the database is given to points of contact individually, contact rc-support@ucl.ac.uk if you try to use this and get an access denied. Please note that all options have a --debug flag that will allow you to see the query generated without committing the changes to the database - double-check that the information you are adding is correct. thomas-add -h usage: thomas-add [-h] {user,project,projectuser,poc,institute} ... Add data to the Thomas database. Use [positional argument -h] for more help. positional arguments: {user,project,projectuser,poc,institute} csv Add all users from the provided CSV file user Adding a new user with their initial project project Adding a new project projectuser Adding a new user-project-contact relationship poc Adding a new Point of Contact institute Adding a new institute/consortium optional arguments: -h, --help show this help message and exit Add a new user \u00a7 thomas-add user allows you to add a new user, with their initial project and point of contact. As of 27 June 2022 this now goes ahead and creates their account automatically within 10 minutes - first prompting you that the information you have entered is correct. You do not need to email us separately about creating accounts unless something has gone wrong. The user's initial project must already exist (create with thomas-add project first). The user will be allocated the next free mmmxxxx username - you should only specify username yourself if they are an existing UCL user, or on Young if they previously had a Thomas or Michael account you should give them the same username. If they already have an account on this cluster with a different institution, just add them as a projectuser instead using their existing username. You can get your poc_id by looking at thomas-show --contacts . thomas-add user -h usage: thomas-add user [-h] -u USERNAME -n GIVEN_NAME [-s SURNAME] -e EMAIL_ADDRESS -k \"SSH_KEY\" -p PROJECT_ID -c POC_ID [--debug] optional arguments: -h, --help show this help message and exit -u USERNAME, --user USERNAME UCL username of user -n GIVEN_NAME, --name GIVEN_NAME Given name of user -s SURNAME, --surname SURNAME Surname of user (optional) -e EMAIL_ADDRESS, --email EMAIL_ADDRESS Institutional email address of user -k \"SSH_KEY\", --key \"SSH_KEY\" User's public ssh key (quotes necessary) -p PROJECT_ID, --project PROJECT_ID Initial project the user belongs to -c POC_ID, --contact POC_ID Short ID of the user's Point of Contact --noconfirm Don't ask for confirmation on user account creation --verbose Show SQL queries that are being submitted --debug Show SQL query submitted without committing the change SSH key formats \u00a7 It will verify the provided ssh key by default. Note that it has to be in the form ssh-xxx keystartshere . If someone has sent in a key which has line breaks and header items, make it into this format by adding the key type to the start and removing the line breaks from the key body. This key: ---- BEGIN SSH2 PUBLIC KEY ---- Comment: \"comment goes here\" AAAAB3NzaC1yc2EAAAABJQAAAQEAlLhFLr/4LGC3cM1xgRZVxfQ7JgoSvnVXly0K 7MNufZbUSUkKtVnBXAOIjtOYe7EPndyT/SAq1s9RGZ63qsaVc/05diLrgL0E0gW+ 9VptTmiUh7OSsXkoKQn1RiACfH7sbKi6H373bmB5/TyXNZ5C5KVmdXxO+laT8IdW 7JdD/gwrBra9M9vAMfcxNYVCBcPQRhJ7vOeDZ+e30qapH4R/mfEyKorYxrvQerJW OeLKjOH4rSnAAOLcEqPmJhkLL8k6nQAAK3P/E1PeOaB2xD7NNPqfIsjhAJLZ+2wV 3eUZATx9vnmVF0YafOjvzcoK2GqUrhNAvi7k0f+ihh8twkfthj== ---- END SSH2 PUBLIC KEY ---- should be converted into ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAlLhFLr/4LGC3cM1xgRZVxfQ7JgoSvnVXly0K7MNufZbUSUkKtVnBXAOIjtOYe7EPndyT/SAq1s9RGZ63qsaVc/05diLrgL0E0gW+9VptTmiUh7OSsXkoKQn1RiACfH7sbKi6H373bmB5/TyXNZ5C5KVmdXxO+laT8IdW7JdD/gwrBra9M9vAMfcxNYVCBcPQRhJ7vOeDZ+e30qapH4R/mfEyKorYxrvQerJWOeLKjOH4rSnAAOLcEqPmJhkLL8k6nQAAK3P/E1PeOaB2xD7NNPqfIsjhAJLZ+2wV3eUZATx9vnmVF0YafOjvzcoK2GqUrhNAvi7k0f+ihh8twkfthj== Other types of keys (ed25519 etc) will say what they are in the first line, and you should change the ssh-rsa appropriately. The guide linked at Creating an ssh key in Windows also shows where users can get the second format out of PuTTY. Add new users in bulk from a CSV file \u00a7 young-add csv allows you to add users in bulk using a CSV file of specific format and headers. As of 27 June 2022 the accounts will be all created and activated automatically within 10 minutes. The CSV is comma-separated with a header line of email,given_name,surname,username,project_ID,ssh_key You can leave username empty for it to allocate them a new username, but if they have an existing mmm username you should fill it in. It may be useful to show users with a given institute on Thomas if you are migrating users from one service to another. You can download a CSV template here . Replace the example data. young-add csv will try to automatically get your Point of Contact ID based on your username. If it can't, or if you have more than one, it will give you a list to choose from. (All users in one CSV upload will be added using the same Point of Contact ID). It will prompt you for confirmation on each user account creation unless you give the --noconfirm option. The project you are adding the user to must already exist. The SSH key must be formatted as shown in SSH key formats . If you check your CSV file on the cluster with cat -v and it shows that it is beginning with M-oM-;M-? and ending with ^M you probably need to run dos2unix on it first. Add a new project \u00a7 thomas-add project will create a new project, associated with an institution. It will not show in Gold until it also has a user in it. A project ID should begin with your institute ID, followed by an underscore and a project name. thomas-add project -h usage: thomas-add project [-h] -p PROJECT_ID -i INST_ID [--debug] optional arguments: -h, --help show this help message and exit -p PROJECT_ID, --project PROJECT_ID A new unique project ID -i INST_ID, --institute INST_ID Institute ID this project belongs to --debug Show SQL query submitted without committing the change Add a new project/user pairing \u00a7 thomas-add projectuser will add an existing user to an existing project. Creating a new user for an existing project also creates this relationship. After a new project-user relationship is added, a cron job will pick that up within 15 minutes and create that project for that user in Gold, with no allocation. thomas-add projectuser -h usage: thomas-add projectuser [-h] -u USERNAME -p PROJECT_ID -c POC_ID [--debug] optional arguments: -h, --help show this help message and exit -u USERNAME, --user USERNAME An existing UCL username -p PROJECT_ID, --project PROJECT_ID An existing project ID -c POC_ID, --contact POC_ID An existing Point of Contact ID --debug Show SQL query submitted without committing the change Deactivating information \u00a7 This tool is only partly functional at present. It allows you to deactivate (not delete) some entities that may no longer exist or may have been created in error. Deactivate a projectuser \u00a7 Use this when the user should no longer be a member of the given project. It does not deactivate the user account, just their membership in this project. You can confirm the change by looking at young-show --user - it will say 'deactivated' rather than 'active' next to their listing for this project. young-deactivate projectuser -h usage: thomas_deactivate.py projectuser [-h] -u USERNAME -p PROJECT [--debug] optional arguments: -h, --help show this help message and exit -u USERNAME, --user USERNAME An existing username -p PROJECT, --project PROJECT An existing project ID --debug Show SQL query submitted without committing the change Gold resource allocation \u00a7 We are currently using Gold to manage allocations. Thomas and Michael share one Gold database, so all the projects exist on both, but they are only active on the correct cluster. Young has its own database. Reporting from Gold \u00a7 There are wrapper scripts for a number of Gold commands (these exist in the userscripts module, loaded by default). These are all set to report in cpu-hours with the -h flag, as that is our main unit. If you wish to change anything about the wrappers, they live in /shared/ucl/apps/cluster-scripts/ so you can take a copy and add your preferred options. They all have a --man option to see the man pages for that command. Here are some basic useful options and what they do. They can all be given more options for more specific searches. gusage -p project_name [-s start_time] # Show the Gold usage per user in this project, in the given timeframe if specified. gbalance # Show the balance for every project, split into total, reserved and available. glsuser # Shows all the users in Gold. glsproject # Shows all the projects and which users are in them. glsres # Show all the current reservatioms, inc user and project. The Name column is the SGE job ID. gstatement # Produce a reporting statement showing beginning and end balances, credits and debits. # Less useful commands glstxn # Show all Gold transactions. Filter or it will take forever to run. glsalloc # Show all the allocations. These can be run by any user. The date format is YYYY-MM-DD. Eg. gstatement -p PROJECT -s 2017-08-01 will show all credits and debits for the given project since the given date, saying which user and job ID each charge was associated with. Transferring Gold \u00a7 As the point of contact, you can transfer Gold from your allocation account into other project accounts. As before, we've put -h in the wrapper so it is always working in cpu-hours. gtransfer --fromProject xxx_allocation --toProject xxx_subproject cpu_hours You can also transfer in the opposite direction, from the subproject back into your allocation account. Note that you are able to transfer your allocation into another institute's projects, but you cannot transfer it back again - only the other institute's point of contact (or rc-support) can give it back, so be careful which project you specify. When two allocations are active \u00a7 There is now an overlap period of a week when two allocations can be active. By default, gtransfer will transfer from active allocations in the order of earliest expiring first. To transfer from the new allocation only, you need to specify the allocation id. gtransfer -i allocation_ID --fromProject xxx_allocation --toProject xxx_subproject cpu_hours glsalloc -p xxx_allocation shows you all allocations that ever existed for your institute, and the first column is the id. Id Account Projects StartTime EndTime Amount Deposited Description --- ------- --------------------- ---------- ---------- ---------- ---------- -------------- 87 38 UKCP_allocation 2017-08-07 2017-11-05 212800.00 3712800.00 97 38 UKCP_allocation 2017-10-30 2018-02-04 3712800.00 3712800.00","title":"MMM Points of Contact"},{"location":"Supplementary/Points_of_Contact/#user-management-tools","text":"This page contains tools and information for the nominated Points of Contact. Other system-specific information is at Thomas , Michael or Young . These commands can all be run as thomas-command or michael-command or young-command : they run the same thing and the different names are for convenience.","title":"User management tools"},{"location":"Supplementary/Points_of_Contact/#displaying-user-information","text":"thomas-show , michael-show or young-show is a tool that enables you to find a lot of information about users. Access to the database is given to points of contact individually, contact rc-support@ucl.ac.uk if you try to use this and get an access denied. At the top level, --user shows all information for one user, in multiple tables. --contacts shows all points of contact - useful for getting the IDs, and --institutes is the same. --allusers will show everyone's basic info. --getmmm will show the most recently used mmm username. thomas-show -h usage: thomas-show [-h] [--user username] [--contacts] [--institutes] [--allusers] [--getmmm] {recentusers,getusers,whois} ... Show data from the Thomas database. Use [positional argument -h] for more help. positional arguments: {recentusers,getusers,whois} recentusers Show the n newest users (5 by default) getusers Show all users with this project, institute, contact whois Search for users matching the given requirements optional arguments: -h, --help show this help message and exit --user username Show all current info for this user --contacts Show all allowed values for contact --institutes Show all allowed values for institute --allusers Show all current users --getmmm Show the highest mmm username used","title":"Displaying user information"},{"location":"Supplementary/Points_of_Contact/#show-recent-users","text":"thomas-show recentusers shows you the most recently-added N users, default 5. thomas-show recentusers -h usage: thomas-show recentusers [-h] [-n N] optional arguments: -h, --help show this help message and exit -n N","title":"Show recent users"},{"location":"Supplementary/Points_of_Contact/#show-users-with-a-given-project-institute-contact","text":"thomas-show getusers will search for exact matches to the given project, institute, contact combination. thomas-show getusers -h usage: thomas-show getusers [-h] [-p PROJECT] [-i INST_ID] [-c POC_ID] optional arguments: -h, --help show this help message and exit -p PROJECT, --project PROJECT Project name -i INST_ID, --institute INST_ID Institute ID -c POC_ID, --contact POC_ID Point of Contact ID","title":"Show users with a given project, institute, contact"},{"location":"Supplementary/Points_of_Contact/#search-for-users-based-on-partial-information","text":"thomas-show whois can be used to search for partial matches to username, name, email fragments, including all of those in combination. thomas-show whois -h usage: thomas-show whois [-h] [-u USERNAME] [-e EMAIL] [-n GIVEN_NAME] [-s SURNAME] optional arguments: -h, --help show this help message and exit -u USERNAME, --user USERNAME UCL username of user contains -e EMAIL, --email EMAIL Email address of user contains -n GIVEN_NAME, --name GIVEN_NAME Given name of user contains -s SURNAME, --surname SURNAME Surname of user contains","title":"Search for users based on partial information"},{"location":"Supplementary/Points_of_Contact/#adding-user-information-and-new-projects","text":"thomas-add will add information to the database. Access to the database is given to points of contact individually, contact rc-support@ucl.ac.uk if you try to use this and get an access denied. Please note that all options have a --debug flag that will allow you to see the query generated without committing the changes to the database - double-check that the information you are adding is correct. thomas-add -h usage: thomas-add [-h] {user,project,projectuser,poc,institute} ... Add data to the Thomas database. Use [positional argument -h] for more help. positional arguments: {user,project,projectuser,poc,institute} csv Add all users from the provided CSV file user Adding a new user with their initial project project Adding a new project projectuser Adding a new user-project-contact relationship poc Adding a new Point of Contact institute Adding a new institute/consortium optional arguments: -h, --help show this help message and exit","title":"Adding user information and new projects"},{"location":"Supplementary/Points_of_Contact/#add-a-new-user","text":"thomas-add user allows you to add a new user, with their initial project and point of contact. As of 27 June 2022 this now goes ahead and creates their account automatically within 10 minutes - first prompting you that the information you have entered is correct. You do not need to email us separately about creating accounts unless something has gone wrong. The user's initial project must already exist (create with thomas-add project first). The user will be allocated the next free mmmxxxx username - you should only specify username yourself if they are an existing UCL user, or on Young if they previously had a Thomas or Michael account you should give them the same username. If they already have an account on this cluster with a different institution, just add them as a projectuser instead using their existing username. You can get your poc_id by looking at thomas-show --contacts . thomas-add user -h usage: thomas-add user [-h] -u USERNAME -n GIVEN_NAME [-s SURNAME] -e EMAIL_ADDRESS -k \"SSH_KEY\" -p PROJECT_ID -c POC_ID [--debug] optional arguments: -h, --help show this help message and exit -u USERNAME, --user USERNAME UCL username of user -n GIVEN_NAME, --name GIVEN_NAME Given name of user -s SURNAME, --surname SURNAME Surname of user (optional) -e EMAIL_ADDRESS, --email EMAIL_ADDRESS Institutional email address of user -k \"SSH_KEY\", --key \"SSH_KEY\" User's public ssh key (quotes necessary) -p PROJECT_ID, --project PROJECT_ID Initial project the user belongs to -c POC_ID, --contact POC_ID Short ID of the user's Point of Contact --noconfirm Don't ask for confirmation on user account creation --verbose Show SQL queries that are being submitted --debug Show SQL query submitted without committing the change","title":"Add a new user"},{"location":"Supplementary/Points_of_Contact/#ssh-key-formats","text":"It will verify the provided ssh key by default. Note that it has to be in the form ssh-xxx keystartshere . If someone has sent in a key which has line breaks and header items, make it into this format by adding the key type to the start and removing the line breaks from the key body. This key: ---- BEGIN SSH2 PUBLIC KEY ---- Comment: \"comment goes here\" AAAAB3NzaC1yc2EAAAABJQAAAQEAlLhFLr/4LGC3cM1xgRZVxfQ7JgoSvnVXly0K 7MNufZbUSUkKtVnBXAOIjtOYe7EPndyT/SAq1s9RGZ63qsaVc/05diLrgL0E0gW+ 9VptTmiUh7OSsXkoKQn1RiACfH7sbKi6H373bmB5/TyXNZ5C5KVmdXxO+laT8IdW 7JdD/gwrBra9M9vAMfcxNYVCBcPQRhJ7vOeDZ+e30qapH4R/mfEyKorYxrvQerJW OeLKjOH4rSnAAOLcEqPmJhkLL8k6nQAAK3P/E1PeOaB2xD7NNPqfIsjhAJLZ+2wV 3eUZATx9vnmVF0YafOjvzcoK2GqUrhNAvi7k0f+ihh8twkfthj== ---- END SSH2 PUBLIC KEY ---- should be converted into ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAlLhFLr/4LGC3cM1xgRZVxfQ7JgoSvnVXly0K7MNufZbUSUkKtVnBXAOIjtOYe7EPndyT/SAq1s9RGZ63qsaVc/05diLrgL0E0gW+9VptTmiUh7OSsXkoKQn1RiACfH7sbKi6H373bmB5/TyXNZ5C5KVmdXxO+laT8IdW7JdD/gwrBra9M9vAMfcxNYVCBcPQRhJ7vOeDZ+e30qapH4R/mfEyKorYxrvQerJWOeLKjOH4rSnAAOLcEqPmJhkLL8k6nQAAK3P/E1PeOaB2xD7NNPqfIsjhAJLZ+2wV3eUZATx9vnmVF0YafOjvzcoK2GqUrhNAvi7k0f+ihh8twkfthj== Other types of keys (ed25519 etc) will say what they are in the first line, and you should change the ssh-rsa appropriately. The guide linked at Creating an ssh key in Windows also shows where users can get the second format out of PuTTY.","title":"SSH key formats"},{"location":"Supplementary/Points_of_Contact/#add-new-users-in-bulk-from-a-csv-file","text":"young-add csv allows you to add users in bulk using a CSV file of specific format and headers. As of 27 June 2022 the accounts will be all created and activated automatically within 10 minutes. The CSV is comma-separated with a header line of email,given_name,surname,username,project_ID,ssh_key You can leave username empty for it to allocate them a new username, but if they have an existing mmm username you should fill it in. It may be useful to show users with a given institute on Thomas if you are migrating users from one service to another. You can download a CSV template here . Replace the example data. young-add csv will try to automatically get your Point of Contact ID based on your username. If it can't, or if you have more than one, it will give you a list to choose from. (All users in one CSV upload will be added using the same Point of Contact ID). It will prompt you for confirmation on each user account creation unless you give the --noconfirm option. The project you are adding the user to must already exist. The SSH key must be formatted as shown in SSH key formats . If you check your CSV file on the cluster with cat -v and it shows that it is beginning with M-oM-;M-? and ending with ^M you probably need to run dos2unix on it first.","title":"Add new users in bulk from a CSV file"},{"location":"Supplementary/Points_of_Contact/#add-a-new-project","text":"thomas-add project will create a new project, associated with an institution. It will not show in Gold until it also has a user in it. A project ID should begin with your institute ID, followed by an underscore and a project name. thomas-add project -h usage: thomas-add project [-h] -p PROJECT_ID -i INST_ID [--debug] optional arguments: -h, --help show this help message and exit -p PROJECT_ID, --project PROJECT_ID A new unique project ID -i INST_ID, --institute INST_ID Institute ID this project belongs to --debug Show SQL query submitted without committing the change","title":"Add a new project"},{"location":"Supplementary/Points_of_Contact/#add-a-new-projectuser-pairing","text":"thomas-add projectuser will add an existing user to an existing project. Creating a new user for an existing project also creates this relationship. After a new project-user relationship is added, a cron job will pick that up within 15 minutes and create that project for that user in Gold, with no allocation. thomas-add projectuser -h usage: thomas-add projectuser [-h] -u USERNAME -p PROJECT_ID -c POC_ID [--debug] optional arguments: -h, --help show this help message and exit -u USERNAME, --user USERNAME An existing UCL username -p PROJECT_ID, --project PROJECT_ID An existing project ID -c POC_ID, --contact POC_ID An existing Point of Contact ID --debug Show SQL query submitted without committing the change","title":"Add a new project/user pairing"},{"location":"Supplementary/Points_of_Contact/#deactivating-information","text":"This tool is only partly functional at present. It allows you to deactivate (not delete) some entities that may no longer exist or may have been created in error.","title":"Deactivating information"},{"location":"Supplementary/Points_of_Contact/#deactivate-a-projectuser","text":"Use this when the user should no longer be a member of the given project. It does not deactivate the user account, just their membership in this project. You can confirm the change by looking at young-show --user - it will say 'deactivated' rather than 'active' next to their listing for this project. young-deactivate projectuser -h usage: thomas_deactivate.py projectuser [-h] -u USERNAME -p PROJECT [--debug] optional arguments: -h, --help show this help message and exit -u USERNAME, --user USERNAME An existing username -p PROJECT, --project PROJECT An existing project ID --debug Show SQL query submitted without committing the change","title":"Deactivate a projectuser"},{"location":"Supplementary/Points_of_Contact/#gold-resource-allocation","text":"We are currently using Gold to manage allocations. Thomas and Michael share one Gold database, so all the projects exist on both, but they are only active on the correct cluster. Young has its own database.","title":"Gold resource allocation"},{"location":"Supplementary/Points_of_Contact/#reporting-from-gold","text":"There are wrapper scripts for a number of Gold commands (these exist in the userscripts module, loaded by default). These are all set to report in cpu-hours with the -h flag, as that is our main unit. If you wish to change anything about the wrappers, they live in /shared/ucl/apps/cluster-scripts/ so you can take a copy and add your preferred options. They all have a --man option to see the man pages for that command. Here are some basic useful options and what they do. They can all be given more options for more specific searches. gusage -p project_name [-s start_time] # Show the Gold usage per user in this project, in the given timeframe if specified. gbalance # Show the balance for every project, split into total, reserved and available. glsuser # Shows all the users in Gold. glsproject # Shows all the projects and which users are in them. glsres # Show all the current reservatioms, inc user and project. The Name column is the SGE job ID. gstatement # Produce a reporting statement showing beginning and end balances, credits and debits. # Less useful commands glstxn # Show all Gold transactions. Filter or it will take forever to run. glsalloc # Show all the allocations. These can be run by any user. The date format is YYYY-MM-DD. Eg. gstatement -p PROJECT -s 2017-08-01 will show all credits and debits for the given project since the given date, saying which user and job ID each charge was associated with.","title":"Reporting from Gold"},{"location":"Supplementary/Points_of_Contact/#transferring-gold","text":"As the point of contact, you can transfer Gold from your allocation account into other project accounts. As before, we've put -h in the wrapper so it is always working in cpu-hours. gtransfer --fromProject xxx_allocation --toProject xxx_subproject cpu_hours You can also transfer in the opposite direction, from the subproject back into your allocation account. Note that you are able to transfer your allocation into another institute's projects, but you cannot transfer it back again - only the other institute's point of contact (or rc-support) can give it back, so be careful which project you specify.","title":"Transferring Gold"},{"location":"Supplementary/Points_of_Contact/#when-two-allocations-are-active","text":"There is now an overlap period of a week when two allocations can be active. By default, gtransfer will transfer from active allocations in the order of earliest expiring first. To transfer from the new allocation only, you need to specify the allocation id. gtransfer -i allocation_ID --fromProject xxx_allocation --toProject xxx_subproject cpu_hours glsalloc -p xxx_allocation shows you all allocations that ever existed for your institute, and the first column is the id. Id Account Projects StartTime EndTime Amount Deposited Description --- ------- --------------------- ---------- ---------- ---------- ---------- -------------- 87 38 UKCP_allocation 2017-08-07 2017-11-05 212800.00 3712800.00 97 38 UKCP_allocation 2017-10-30 2018-02-04 3712800.00 3712800.00","title":"When two allocations are active"},{"location":"Supplementary/Young_GPU_Nodes/","text":"Pilot access \u00a7 A group of nominated pilot users had access to these nodes during the pilot, which lasted from 15 July to 5 September 2022. They are now available to all. GPU specs \u00a7 The nodes are listed in Young's node types table There are 6 nodes which each have 64 AMD EPYC CPU cores and 8 Nvidia A100-SXM4-40GB GPUs. They have 1T RAM and 200G local disk is available to request as tmpfs unlike the rest of Young. The AMD equivalent of hyperthreading is not enabled. Request GPUs \u00a7 # Submit a job to the GPU nodes by adding a request for a number of GPUs per node #$ -l gpu=8 # Only Free jobs are available at present. Use your normal projects #$ -P Free #$ -A Inst_Project At the start of the pilot, jobs did not share nodes and users always had access to all GPUs on each node. This has since been altered and device cgroups are implemented (as of 10 Aug 2022) so jobs can share nodes on the GPU nodes and each only have access to the number of GPUs they requested. For example, 8 separate single-GPU jobs from different users can be running on one node, or 2 4-GPU jobs. Multi-node parallel GPU jobs do not share nodes, so a job asking for two nodes and some number of GPUs per node over those two nodes will block out the entire 16 GPUs even if using fewer than that. Exclusive use of nodes \u00a7 If you are using fewer than 8 GPUs but want to make sure nothing else is running on the same node as you, add this to your jobscript: #$ -ac exclusive This would generally only be done if you are benchmarking or investigating speeds and want to rule out anything else running on the rest of the node as possibly affecting your timings. CUDA versions \u00a7 The newer CUDA installs we have are made visible by first loading beta-modules but can then be used alongside any other compiler. module load beta-modules module avail cuda # pick one of the 11.x CUDA installs module load cuda/11.3.1/gnu-10.2.0 # or module load cuda/11.2.0/gnu-10.2.0 Choosing a CUDA version \u00a7 The drivers we have installed on the GPU nodes are version 460.27.03 which is CUDA 11.2. CUDA 11 has minor version compatibility so in most cases you can use the 11.3.1 runtime, but not all functionality is available. If your code builds but when running it you get an error like this: CUDA RUNTIME API error: Free failed with error cudaErrorUnsupportedPtxVersion then use the cuda/11.2.0/gnu-10.2.0 module to build and run your program instead. Building with CUDA \u00a7 If the code you are trying to build only needs to link to the CUDA runtime libraries, libcudart.so then you can build it on the login nodes which do not have GPUs. If it needs the full libcuda.so to be available, you need to build it on a GPU node. You can submit it as a job or request an interactive session with qrsh . Eg: qrsh -l gpu=8,h_rt=2:0:0,tmpfs=10G,mem=1G -pe smp 4 -P Free -A Inst_Project -now no NVIDIA documentation \u00a7 NVIDIA has some useful information at these locations: Building Ampere compatible apps using CUDA 11 CUDA Toolkit release notes Run on a specific device or limit the number visible \u00a7 If you want to tell your code to run on a specific device or devices, you can set CUDA_VISIBLE_DEVICES to the ids between 0 and 7. If the code only uses one GPU it will usually default to running on device 0, but if it is running on all GPUs that belong to your job and you don't want it to, you can limit it. # run on gpu 1 export CUDA_VISIBLE_DEVICES=1 # run on gpus 0 and 4 export CUDA_VISIBLE_DEVICES=0,4 CUDA utility deviceQuery \u00a7 CUDA has a number of small utilities that come with its examples which can be useful: you can take a copy of the samples directory from the corresponding CUDA version - for example /shared/ucl/apps/cuda/11.3.1/gnu-10.2.0/samples/ and build those utilities with their corresponding CUDA module loaded. samples/1_Utilities/deviceQuery will give you a small utility that will confirm that setting CUDA_VISIBLE_DEVICES is working - you can run it before and after setting it. The devices will have been renamed as 0 and 1 in its output, but the location IDs will be the same as when you could see all of them. Setting PPN \u00a7 You will also be able to set the number of cpu slots per node that you want. Instead of -pe smp or -pe mpi , you would request: -pe ppn=<slots per node> <total slots> # this would give you 8 slots per node and 16 slots total (so is using 2 nodes) # along with 8 GPUs per node (16 GPUs in total). #$ -pe ppn=8 16 #$ -l gpu=8 Like -pe mpi this will also create a suitable machinefile for you so MPI will know how many cores on which nodes it can use. gerun (our mpirun wrapper) will use it automatically for Intel MPI as usual and our OpenMPI modules shouldn't need it since they have scheduler integration, but you can find it in $TMPDIR/machines if you are using mpirun and need it. Request tmpfs \u00a7 The GPU nodes do have local disks and you can request an amount of tmpfs up to the maximum 200G like this: # Request a $TMPDIR of 20G #$ -l tmpfs=20G In the job, you refer to this using $TMPDIR . Many programs will use this environment variable for temporary files automatically, or you may need to tell them to do it explicitly with a command line argument. $TMPDIR is deleted at the end of the job, so if you need any data that is being written to there, copy it back to your Scratch at the end of the job. Software of interest \u00a7 GPU software we have installed that may be of particular interest to users of Young. VASP 6 GPU GROMACS 2021.5 GPU NAMD 2.14 GPU LAMMPS 29 Sep 21 Update 2 GPU You can also use NVIDIA Grid Cloud Containers via Singularity which provide pre-configured GPU applications. Our page gives an example of using the NAMD 3 container.","title":"Young GPU Nodes"},{"location":"Supplementary/Young_GPU_Nodes/#pilot-access","text":"A group of nominated pilot users had access to these nodes during the pilot, which lasted from 15 July to 5 September 2022. They are now available to all.","title":"Pilot access"},{"location":"Supplementary/Young_GPU_Nodes/#gpu-specs","text":"The nodes are listed in Young's node types table There are 6 nodes which each have 64 AMD EPYC CPU cores and 8 Nvidia A100-SXM4-40GB GPUs. They have 1T RAM and 200G local disk is available to request as tmpfs unlike the rest of Young. The AMD equivalent of hyperthreading is not enabled.","title":"GPU specs"},{"location":"Supplementary/Young_GPU_Nodes/#request-gpus","text":"# Submit a job to the GPU nodes by adding a request for a number of GPUs per node #$ -l gpu=8 # Only Free jobs are available at present. Use your normal projects #$ -P Free #$ -A Inst_Project At the start of the pilot, jobs did not share nodes and users always had access to all GPUs on each node. This has since been altered and device cgroups are implemented (as of 10 Aug 2022) so jobs can share nodes on the GPU nodes and each only have access to the number of GPUs they requested. For example, 8 separate single-GPU jobs from different users can be running on one node, or 2 4-GPU jobs. Multi-node parallel GPU jobs do not share nodes, so a job asking for two nodes and some number of GPUs per node over those two nodes will block out the entire 16 GPUs even if using fewer than that.","title":"Request GPUs"},{"location":"Supplementary/Young_GPU_Nodes/#exclusive-use-of-nodes","text":"If you are using fewer than 8 GPUs but want to make sure nothing else is running on the same node as you, add this to your jobscript: #$ -ac exclusive This would generally only be done if you are benchmarking or investigating speeds and want to rule out anything else running on the rest of the node as possibly affecting your timings.","title":"Exclusive use of nodes"},{"location":"Supplementary/Young_GPU_Nodes/#cuda-versions","text":"The newer CUDA installs we have are made visible by first loading beta-modules but can then be used alongside any other compiler. module load beta-modules module avail cuda # pick one of the 11.x CUDA installs module load cuda/11.3.1/gnu-10.2.0 # or module load cuda/11.2.0/gnu-10.2.0","title":"CUDA versions"},{"location":"Supplementary/Young_GPU_Nodes/#choosing-a-cuda-version","text":"The drivers we have installed on the GPU nodes are version 460.27.03 which is CUDA 11.2. CUDA 11 has minor version compatibility so in most cases you can use the 11.3.1 runtime, but not all functionality is available. If your code builds but when running it you get an error like this: CUDA RUNTIME API error: Free failed with error cudaErrorUnsupportedPtxVersion then use the cuda/11.2.0/gnu-10.2.0 module to build and run your program instead.","title":"Choosing a CUDA version"},{"location":"Supplementary/Young_GPU_Nodes/#building-with-cuda","text":"If the code you are trying to build only needs to link to the CUDA runtime libraries, libcudart.so then you can build it on the login nodes which do not have GPUs. If it needs the full libcuda.so to be available, you need to build it on a GPU node. You can submit it as a job or request an interactive session with qrsh . Eg: qrsh -l gpu=8,h_rt=2:0:0,tmpfs=10G,mem=1G -pe smp 4 -P Free -A Inst_Project -now no","title":"Building with CUDA"},{"location":"Supplementary/Young_GPU_Nodes/#nvidia-documentation","text":"NVIDIA has some useful information at these locations: Building Ampere compatible apps using CUDA 11 CUDA Toolkit release notes","title":"NVIDIA documentation"},{"location":"Supplementary/Young_GPU_Nodes/#run-on-a-specific-device-or-limit-the-number-visible","text":"If you want to tell your code to run on a specific device or devices, you can set CUDA_VISIBLE_DEVICES to the ids between 0 and 7. If the code only uses one GPU it will usually default to running on device 0, but if it is running on all GPUs that belong to your job and you don't want it to, you can limit it. # run on gpu 1 export CUDA_VISIBLE_DEVICES=1 # run on gpus 0 and 4 export CUDA_VISIBLE_DEVICES=0,4","title":"Run on a specific device or limit the number visible"},{"location":"Supplementary/Young_GPU_Nodes/#cuda-utility-devicequery","text":"CUDA has a number of small utilities that come with its examples which can be useful: you can take a copy of the samples directory from the corresponding CUDA version - for example /shared/ucl/apps/cuda/11.3.1/gnu-10.2.0/samples/ and build those utilities with their corresponding CUDA module loaded. samples/1_Utilities/deviceQuery will give you a small utility that will confirm that setting CUDA_VISIBLE_DEVICES is working - you can run it before and after setting it. The devices will have been renamed as 0 and 1 in its output, but the location IDs will be the same as when you could see all of them.","title":"CUDA utility deviceQuery"},{"location":"Supplementary/Young_GPU_Nodes/#setting-ppn","text":"You will also be able to set the number of cpu slots per node that you want. Instead of -pe smp or -pe mpi , you would request: -pe ppn=<slots per node> <total slots> # this would give you 8 slots per node and 16 slots total (so is using 2 nodes) # along with 8 GPUs per node (16 GPUs in total). #$ -pe ppn=8 16 #$ -l gpu=8 Like -pe mpi this will also create a suitable machinefile for you so MPI will know how many cores on which nodes it can use. gerun (our mpirun wrapper) will use it automatically for Intel MPI as usual and our OpenMPI modules shouldn't need it since they have scheduler integration, but you can find it in $TMPDIR/machines if you are using mpirun and need it.","title":"Setting PPN"},{"location":"Supplementary/Young_GPU_Nodes/#request-tmpfs","text":"The GPU nodes do have local disks and you can request an amount of tmpfs up to the maximum 200G like this: # Request a $TMPDIR of 20G #$ -l tmpfs=20G In the job, you refer to this using $TMPDIR . Many programs will use this environment variable for temporary files automatically, or you may need to tell them to do it explicitly with a command line argument. $TMPDIR is deleted at the end of the job, so if you need any data that is being written to there, copy it back to your Scratch at the end of the job.","title":"Request tmpfs"},{"location":"Supplementary/Young_GPU_Nodes/#software-of-interest","text":"GPU software we have installed that may be of particular interest to users of Young. VASP 6 GPU GROMACS 2021.5 GPU NAMD 2.14 GPU LAMMPS 29 Sep 21 Update 2 GPU You can also use NVIDIA Grid Cloud Containers via Singularity which provide pre-configured GPU applications. Our page gives an example of using the NAMD 3 container.","title":"Software of interest"},{"location":"Walkthroughs/Logging_In/","text":"Here are walkthroughs showing all the steps to get logged in to one of our clusters from computers with different operating systems. These instructions assume you have already applied for an account and received the email saying it has been created and that you can log in. We use Myriad as the cluster we are logging in to. The same steps also apply to Kathleen. To log in, you need an SSH client to be installed on the computer you are logging in from. Logging in from Windows \u00a7 There are several choices of SSH client for Windows, with one now included in the Windows Command Prompt on Windows 10 or later. You can also log in via Desktop@UCL Anywhere, which provides a Windows environment inside the UCL network. PuTTY \u00a7 PuTTY will provide you with a graphical interface to configure your SSH connection and then open a terminal window you can type into and press return to submit. Windows Command Prompt \u00a7 Launch the Command Prompt from the Windows Start menu. It will give you a prompt that you can type commands into. Replace \"uccacxx\" with your own central UCL username. ssh uccacxx@ssh-gateway.ucl.ac.uk If your computer has never connected to the Gateway before, it has no existing record of the host fingerprint which identifies it, so it will ask if you want to accept it and continue. Type \"yes\" to accept the fingerprint. It will save it and check it next time. If the fingerprint is different, it can be an indication that something else is pretending to be the Gateway (or that it has changed after a major update). If concerned, contact rc-support@ucl.ac.uk or the main Service Desk. It now informs you that it has added the Gateway to your list of known hosts. You have now contacted the Gateway and it displays a small splash screen and asks for your UCL password. Nothing will show up when typing in this box - no placeholders or bullet point characters. Press return at the end to submit. If you have a typo in your password or have changed it within the last couple of hours and the new one hasn't propagated yet, it will ask again. Once the correct password has been entered, it will show you a longer message about the system. From the Gateway, we want to ssh in to Myriad: ssh uccacxx@myriad.rc.ucl.ac.uk Your user on the Gateway will also not have connected to Myriad before, so you will get a similar prompt about Myriad's host fingerprint. You can check this against our current key fingerprints . After saying \"yes\" you will be prompted for your password again, and after typing it in you will be logged in to Myriad and see Myriad's message containing information about the system and where to get help. At the bottom you can see that the prompt on Myriad looks like [uccacxx@login13 ~]$ It shows you your username, which Myriad login node you are on, and where you are ( ~ is a short way to reference your home directory). You can now look at what software is available and write jobscripts. Desktop@UCL Anywhere \u00a7 You can log in to this from a web browser or download a Citrix client. Once logged in, Desktop@UCL is inside the UCL network so we can log straight into a cluster with no need for a gateway machine or VPN. You can use PuTTY or the Windows Command Prompt on Desktop@UCL Anywhere to log in to Myriad. It has a version of the Command Prompt called \"SSH Command Prompt\" that may set up some additional configuration for SSH usage - either should work.","title":"Logging In"},{"location":"Walkthroughs/Logging_In/#logging-in-from-windows","text":"There are several choices of SSH client for Windows, with one now included in the Windows Command Prompt on Windows 10 or later. You can also log in via Desktop@UCL Anywhere, which provides a Windows environment inside the UCL network.","title":"Logging in from Windows"},{"location":"Walkthroughs/Logging_In/#putty","text":"PuTTY will provide you with a graphical interface to configure your SSH connection and then open a terminal window you can type into and press return to submit.","title":"PuTTY"},{"location":"Walkthroughs/Logging_In/#windows-command-prompt","text":"Launch the Command Prompt from the Windows Start menu. It will give you a prompt that you can type commands into. Replace \"uccacxx\" with your own central UCL username. ssh uccacxx@ssh-gateway.ucl.ac.uk If your computer has never connected to the Gateway before, it has no existing record of the host fingerprint which identifies it, so it will ask if you want to accept it and continue. Type \"yes\" to accept the fingerprint. It will save it and check it next time. If the fingerprint is different, it can be an indication that something else is pretending to be the Gateway (or that it has changed after a major update). If concerned, contact rc-support@ucl.ac.uk or the main Service Desk. It now informs you that it has added the Gateway to your list of known hosts. You have now contacted the Gateway and it displays a small splash screen and asks for your UCL password. Nothing will show up when typing in this box - no placeholders or bullet point characters. Press return at the end to submit. If you have a typo in your password or have changed it within the last couple of hours and the new one hasn't propagated yet, it will ask again. Once the correct password has been entered, it will show you a longer message about the system. From the Gateway, we want to ssh in to Myriad: ssh uccacxx@myriad.rc.ucl.ac.uk Your user on the Gateway will also not have connected to Myriad before, so you will get a similar prompt about Myriad's host fingerprint. You can check this against our current key fingerprints . After saying \"yes\" you will be prompted for your password again, and after typing it in you will be logged in to Myriad and see Myriad's message containing information about the system and where to get help. At the bottom you can see that the prompt on Myriad looks like [uccacxx@login13 ~]$ It shows you your username, which Myriad login node you are on, and where you are ( ~ is a short way to reference your home directory). You can now look at what software is available and write jobscripts.","title":"Windows Command Prompt"},{"location":"Walkthroughs/Logging_In/#desktopucl-anywhere","text":"You can log in to this from a web browser or download a Citrix client. Once logged in, Desktop@UCL is inside the UCL network so we can log straight into a cluster with no need for a gateway machine or VPN. You can use PuTTY or the Windows Command Prompt on Desktop@UCL Anywhere to log in to Myriad. It has a version of the Command Prompt called \"SSH Command Prompt\" that may set up some additional configuration for SSH usage - either should work.","title":"Desktop@UCL Anywhere"},{"location":"Wiki_Export/Building_and_Running_Matlab_Programs/","text":"Before you start, here are the caveats: \u00a7 Although full Matlab is now available on Legion, you can still compile Matlab programs on an external machine and then run them on Legion using the Matlab runtime. Your Matlab program must be compiled using a 64bit Linux version of the Matlab compiler; the compiled code is not cross-platform compatible so it cannot be built on OS X and then transferred to Legion. Piping code into the Matlab compiler will not work, and the main routine being executed must be converted into a proper Matlab function. When arguments are passed into compiled Matlab executable, the compiled code does not automatically convert them to the required type (i.e. float or integer) as Matlab does from the command line. In this case the arguments, where necessary, must be converted to numbers using the str2num() function. Because of the way Matlab threads work, you must request exclusive access to Legion nodes when running compiled Matlab programs. Compiling your program: \u00a7 The Matlab code is must be compiled using the mcc tool; this must be initially run as mcc -setup before anything is built. The mcc tool can actually be invoked from the interpreter command prompt and executing help mcc will give you quite a lot of information about how to use the tool, along with examples. All .m files must be built into the compiled code with the first .m referenced in the build line acting as the main entry point for the built code. It may be useful to include data files in the built code which are handled in the build line using the -a <datafile> option. Please remember to make the .m file an actual function and all other dependencies sub-functions, otherwise the compiled code will not execute. Some important mcc options: \u00a7 -m : this is option which runs the macro to generate a C stand-alone application. -R : specify runtime options for the Matlab compiler runtime. Some important runtime options: \u00a7 -nojvm : disables the java virtual machine, which may speed-up certain codes. This option cannot be used if you are planning to have, for example pdf files or any other plots produced as output of your run. -nodisplay : prevents anything being displayed on the screen, can be useful if this happens with the application as this would not work correctly in batch mode. --singleCompThread : use only a single computational thread, otherwise Matlab will try to use more than one thread when the operation being performed supports multi threading. This is an alternative to allocating a whole Legion node to your job. Once the application has been built, there should be an executable named after the prefix of the .m file, generally <app name>.m , and a shell script with the name run\\_<app name>.sh - both these files need to be transferred to Legion. We have installed a runtime environment on Legion here: /shared/ucl/apps/Matlab/R2011a/Runtime7.15/v715/ If you have been given pre-compiled code by someone else, the application may not work as the Matlab runtime version must reasonably match that of the Matlab compiler that was used to build the application. The runtime is freely distributable and can be found in the installation directory of Matlab. The runtime has a GUI install interface and it can be installed at any location in your home directory. For more information, please read your Matlab documentation. Job submission scripts: \u00a7 There are three things that you must take into account: The location of the Matlab compiler runtime needs to be passed to the script used to run the compiled Matlab code as the first argument. The compiler runtime needs a directory (cache) to unpack files to when it is running. By default this directory is in the home folder. This needs to be changed since the home directory is not writable in Legion from the compute nodes. Since the Matlab runs will be single node jobs, the cache location should be in the storage on the compute nodes which is stored in TMPDIR . Use the -ac exclusive SGE option to request exclusive access to a Legion node unless you use the --singleCompThread Matlab option. For example, a multi-threaded serial script should look something like: #!/bin/bash -l # Batch script to run a serial job on Legion under SGE. # Force bash as the executing shell. #$ -S /bin/bash # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM #$ -l mem=1G # Select 12 threads (the most possible on Legion). #$ -l thr=12 # The way Matlab threads work requires Matlab to not share nodes with other # jobs. #$ -ac exclusive # Set the name of the job. #$ -N Matlab_Job_1 # Set the working directory to somewhere in your scratch space. # For example: ##$ -wd /home//Scratch # Alternatively, you can automatically use the current working directory # if you launch your job from anywhere *within ~/Scratch* #$ -cwd # store the MATLAB runtime path in a global environment variable (MCR_HOME) export MCR_HOME = /shared/ucl/apps/Matlab/R2011a/Runtime7.15/v715/ # the path to the Matlab cache is stored in the global variable MCR_CACHE_ROOT export MCR_CACHE_ROOT = $TMPDIR /mcr_cache # make sure the directory in MCR_CACHE_ROOT exists mkdir -p $MCR_CACHE_ROOT # Run the executable, passing the path stored in MCR_HOME as the first argument. # There is no need to pass the content of MCR_CACHE_ROOT as an argument to the # to the run_appname.sh script since it is a variable that the Matlab runtime is aware of. ./run_appname.sh $MCR_HOME [ arguments list ] # Preferably, tar-up (archive) all output files onto the shared scratch area tar zcvf $HOME /Scratch/files_from_job_ ${ JOB_ID } .tgz $TMPDIR # Make sure you have given enough time for the copy to complete! For any queries and problem reports, please contact rc-support@ucl.ac.uk .","title":"Building and Running Matlab Programs"},{"location":"Wiki_Export/Building_and_Running_Matlab_Programs/#before-you-start-here-are-the-caveats","text":"Although full Matlab is now available on Legion, you can still compile Matlab programs on an external machine and then run them on Legion using the Matlab runtime. Your Matlab program must be compiled using a 64bit Linux version of the Matlab compiler; the compiled code is not cross-platform compatible so it cannot be built on OS X and then transferred to Legion. Piping code into the Matlab compiler will not work, and the main routine being executed must be converted into a proper Matlab function. When arguments are passed into compiled Matlab executable, the compiled code does not automatically convert them to the required type (i.e. float or integer) as Matlab does from the command line. In this case the arguments, where necessary, must be converted to numbers using the str2num() function. Because of the way Matlab threads work, you must request exclusive access to Legion nodes when running compiled Matlab programs.","title":"Before you start, here are the caveats:"},{"location":"Wiki_Export/Building_and_Running_Matlab_Programs/#compiling-your-program","text":"The Matlab code is must be compiled using the mcc tool; this must be initially run as mcc -setup before anything is built. The mcc tool can actually be invoked from the interpreter command prompt and executing help mcc will give you quite a lot of information about how to use the tool, along with examples. All .m files must be built into the compiled code with the first .m referenced in the build line acting as the main entry point for the built code. It may be useful to include data files in the built code which are handled in the build line using the -a <datafile> option. Please remember to make the .m file an actual function and all other dependencies sub-functions, otherwise the compiled code will not execute.","title":"Compiling your program:"},{"location":"Wiki_Export/Building_and_Running_Matlab_Programs/#some-important-mcc-options","text":"-m : this is option which runs the macro to generate a C stand-alone application. -R : specify runtime options for the Matlab compiler runtime.","title":"Some important mcc options:"},{"location":"Wiki_Export/Building_and_Running_Matlab_Programs/#some-important-runtime-options","text":"-nojvm : disables the java virtual machine, which may speed-up certain codes. This option cannot be used if you are planning to have, for example pdf files or any other plots produced as output of your run. -nodisplay : prevents anything being displayed on the screen, can be useful if this happens with the application as this would not work correctly in batch mode. --singleCompThread : use only a single computational thread, otherwise Matlab will try to use more than one thread when the operation being performed supports multi threading. This is an alternative to allocating a whole Legion node to your job. Once the application has been built, there should be an executable named after the prefix of the .m file, generally <app name>.m , and a shell script with the name run\\_<app name>.sh - both these files need to be transferred to Legion. We have installed a runtime environment on Legion here: /shared/ucl/apps/Matlab/R2011a/Runtime7.15/v715/ If you have been given pre-compiled code by someone else, the application may not work as the Matlab runtime version must reasonably match that of the Matlab compiler that was used to build the application. The runtime is freely distributable and can be found in the installation directory of Matlab. The runtime has a GUI install interface and it can be installed at any location in your home directory. For more information, please read your Matlab documentation.","title":"Some important runtime options:"},{"location":"Wiki_Export/Building_and_Running_Matlab_Programs/#job-submission-scripts","text":"There are three things that you must take into account: The location of the Matlab compiler runtime needs to be passed to the script used to run the compiled Matlab code as the first argument. The compiler runtime needs a directory (cache) to unpack files to when it is running. By default this directory is in the home folder. This needs to be changed since the home directory is not writable in Legion from the compute nodes. Since the Matlab runs will be single node jobs, the cache location should be in the storage on the compute nodes which is stored in TMPDIR . Use the -ac exclusive SGE option to request exclusive access to a Legion node unless you use the --singleCompThread Matlab option. For example, a multi-threaded serial script should look something like: #!/bin/bash -l # Batch script to run a serial job on Legion under SGE. # Force bash as the executing shell. #$ -S /bin/bash # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM #$ -l mem=1G # Select 12 threads (the most possible on Legion). #$ -l thr=12 # The way Matlab threads work requires Matlab to not share nodes with other # jobs. #$ -ac exclusive # Set the name of the job. #$ -N Matlab_Job_1 # Set the working directory to somewhere in your scratch space. # For example: ##$ -wd /home//Scratch # Alternatively, you can automatically use the current working directory # if you launch your job from anywhere *within ~/Scratch* #$ -cwd # store the MATLAB runtime path in a global environment variable (MCR_HOME) export MCR_HOME = /shared/ucl/apps/Matlab/R2011a/Runtime7.15/v715/ # the path to the Matlab cache is stored in the global variable MCR_CACHE_ROOT export MCR_CACHE_ROOT = $TMPDIR /mcr_cache # make sure the directory in MCR_CACHE_ROOT exists mkdir -p $MCR_CACHE_ROOT # Run the executable, passing the path stored in MCR_HOME as the first argument. # There is no need to pass the content of MCR_CACHE_ROOT as an argument to the # to the run_appname.sh script since it is a variable that the Matlab runtime is aware of. ./run_appname.sh $MCR_HOME [ arguments list ] # Preferably, tar-up (archive) all output files onto the shared scratch area tar zcvf $HOME /Scratch/files_from_job_ ${ JOB_ID } .tgz $TMPDIR # Make sure you have given enough time for the copy to complete! For any queries and problem reports, please contact rc-support@ucl.ac.uk .","title":"Job submission scripts:"},{"location":"Wiki_Export/Compiling/","text":"Compiling Your Code \u00a7 Download your code \u00a7 Use wget or curl to download the source code for the software you want to install to your account. There might be binaries available, but they often won't work on our clusters because they were compiled for other machines with other library versions available. Use tar or unzip or similar depending on archive type to uncompress your source code. wget https://www.example.com/program.tar.gz tar -xvf program.tar.gz You won't be able to use a package manager like yum, you'll need to follow the manual installation instructions for a user-space install (not using sudo). Set up your modules \u00a7 Before you start compiling, you need to make sure you have the right compilers, libraries and other tools available for your software. If you haven't changed anything, you will have the default modules loaded. For more information on how to use modules, see RC Systems user environment . Check what the instructions for your software tell you about compiling it. If the website doesn't say much, the source code will hopefully have a README or INSTALL file. You may want to use a different compiler - the default is the Intel compiler. module avail compilers will show you all the compiler modules available. Most Open Source software tends to assume you're using GCC and OpenMPI (if it uses MPI) and is most tested with that combination, so if it doesn't specify you may want to begin there (do check what the newest modules available are): module unload compilers mpi mkl module load compilers/gnu/4.9.2 module load mpi/openmpi/1.10.1/gnu-4.9.2 Available compilers \u00a7 The following compilers are available and supported on Legion: Intel C, C++ and Fortran GNU C, C++ and Fortran We currently have a limited number of licenses for the Intel compilers so only a certain number of users can use them simultaneously. This means that your compilation may fail with an error complaining about not being able to obtain a valid license. If this happens, simply wait for a few minutes and try again. In addition to the supported tools, there are a number of tools installed on Legion which are not supported (for example the PGI compilers) which were installed to build certain supported packages. Users who use the unsupported packages do so at their own risk. Build systems \u00a7 Most software will use some kind of build system to manage how files are compiled and linked and in what order. Here are a few common ones. Automake configure \u00a7 Automake will generate the Makefile for you and hopefully pick up sensible options through configuration. You can give it an install prefix to tell it where to install (or you can build it in place and not use make install at all). ./configure --prefix=/home/username/place/you/want/to/install make # if it has a test suite, good idea to use it make test make install If it has more configuration flags, you can use ./configure --help to view them. Usually configure will create a config.log: you can look in there to find if any tests have failed or things you think should have been picked up haven't. CMake \u00a7 CMake is another build system. It will have a CMakeFile or the instructions will ask you to use cmake or ccmake rather than make. It also generates Makefiles for you. ccmake is a terminal-based interactive interface where you can see what variables are set to and change them, then repeatedly configure until everything is correct, generate the Makefile and quit. cmake is the commandline version. The process tends to go like this: ccmake CMakeLists.txt # press c to configure - will pick up some options # press t to toggle advanced options # keep making changes and configuring until no more errors or changes # press g to generate and exit make # if it has a test suite, good idea to use it make test make install If you need to rerun ccmake and reconfigure, remember to delete the CMakeCache.txt file, or you'll be wondering why your changes haven't taken. Turning on verbose Makefiles in ccmake is also useful if your code didn't compile first time - you'll be able to see what flags the compiler or linker is actually being given when it fails. Make \u00a7 Your code may just come with a Makefile and have no configure, in which case the generic way to compile it is as follows: make targetname There's usually a default target, which make on its own will use. If you need to change any configuration options, you'll need to edit those sections of the Makefile (at the top, where the variables/flags are defined). Here are some typical variables you may want to change in a Makefile. These are what compilers/mpi wrappers to use - these are also defined by the compiler modules, so you can see what they should be. Intel would be icc, icpc, ifort, for example. If it's a program that can be compiled using MPI and only has a variable for CC, then set that to mpicc. CC=gcc CXX=g++ FC=gfortran MPICC=mpicc MPICXX=mpicxx MPIF90=mpif90 CFLAGS and LDFLAGS are flags for the compiler and linker respectively, and there might be LIBS or INCLUDE as well. When linking a library with the name libfoo, use -lfoo . CFLAGS=\"-I/path/to/include\" LDFLAGS=\"-L/path/to/foo/lib -L/path/to/bar/lib\" LDLIBS=\"-lfoo -lbar\" Remember to make clean first if you are recompiling with new options! AVX instructions \u00a7 Note : Legion's current login nodes are of a newer architecture than some of the compute nodes - the login nodes have AVX instructions but the XYZ type nodes do not. This means if you want your code to run on the older nodes, some compiler options cannot be used (e.g. -march=native , -mtune , -xHost ) or your code will segfault. You can either build the code on the login nodes and restrict your jobs to only running on the newer nodes, compile the code with appropriate options for all the nodes, or compile your code inside a job that is running on the XYZ nodes (or during a qrsh session on the same). Intel compilers \u00a7 To tell the Intel compilers to build for SSE4.2 instructions and no AVX, add this to CFLAGS (and CXXFLAGS if relevant): CFLAGS=-axSSE4.2 (Also see icc -help codegen ). GNU compilers \u00a7 To tell GCC to build for SSE4.2 without AVX, add this to CFLAGS (and CXXFLAGS if relevant): CFLAGS=-march=nehalem Restrict node type \u00a7 To restrict a job to newer nodes only, put this in your script: #$ -ac allow=LMNOPQSTU You can also compile one version without AVX and one with, so you can take advantage of the newer nodes when possible. You could use hostname in your jobscript to check what type of node you were on and run the appropriate binary. Hostnames begin with node-x for an X-type node, node-u for a U-type and so on. Test for AVX \u00a7 We have a script that will let you test whether your compiled code is using AVX instructions. If you pass it a directory it will recursively test everything in there. Note that if your code builds multiple kernels and so can choose based on where it runs which instructions to use (like MKL) then this will find AVX instructions but they won't cause your code to segfault. find /home/username/path/ -perm /111 -type f | xargs /shared/ucl/apps/rcops_scripts/hasavx -q BLAS and LAPACK \u00a7 BLAS and LAPACK are provided as part of MKL, OpenBLAS or ATLAS. There are several different OpenBLAS and ATLAS modules on Legion for different compilers. MKL is available in the Intel compiler module. Your code may try to link -lblas -llapack : this isn't the right way to use BLAS and LAPACK with MKL or ATLAS (our OpenBLAS now has symlinks that allow you to do this). MKL on Legion OpenBLAS on Legion ATLAS on Legion Set your PATH and other environment variables \u00a7 After you have installed your software, you'll need to add it to your PATH environment variable so you can run it without having to give the full path to its location. Put this in your ~/.bashrc file so it will set this with every new session you create. Replace username with your username and point to the directory your binary was built in (frequently program/bin ). This adds it to the front of your PATH, so if you install a newer version of something, it will be found before the system one. export PATH=/home/username/location/of/software/binary:$PATH If you built a library that you'll go on to compile other software with, you probably want to also add the lib directory to your LD_LIBRARY_PATH and LIBRARY_PATH, and the include directory to CPATH (add export statements as above). This may mean your configure step will pick your library up correctly without any further effort on your part. To make these changes to your .bashrc take effect in your current session: source ~/.bashrc Python \u00a7 There are python2/recommended and python3/recommended bundles. These use a virtualenv and have pip set up for you. They both have numpy and scipy available. Set compiler module \u00a7 The Python versions on Legion were built with GCC. You can run them with the default Intel compilers loaded because everything depends on the gcc-libs/4.9.2 module. When you are building your own Python packages you should have the GCC compiler module loaded however, to avoid the situation where you build a package with the Intel compiler and then try to run it with GCC, in which case it will be unable to find Intel-specific instructions. module unload compilers module load compilers/gnu/4.9.2 If you get an error like this when trying to run something, recheck what compiler you used. undefined symbol: __intel_sse2_strrchr Install your own packages in the same virtualenv \u00a7 This will use our central virtualenv, which contains a number of packages already installed. pip install --user <python2pkg> pip3 install --user <python3pkg> These will install into .python2local or .python3local directories in your home directory, respectively. To see what is already installed, the Python-shared list shows what is installed for both Python2 and 3, while the Python2 list and Python3 list show what is only installed for one or the other. (There may also be prereqs that aren't listed explicitly - pip will tell you if something is already installed as long as you have the recommended module bundle loaded). Use your own virtualenvs \u00a7 If you need different packages that are not compatible with the central installs, you can create a new virtualenv and only yours will be available. virtualenv <DIR> source <DIR>/bin/activate Your bash prompt will show you that a different virtualenv is active. Installing via setup.py \u00a7 If you need to install using setup.py, you can use the --user flag and as long as one of the python bundles is loaded, it will install into the same .python2local or .python3local as pip and you won't need to add any new paths to your environment. python setup.py install --user You can alternatively use --prefix in which case you will have to set the install prefix to somewhere in your space, and also set PYTHONPATH and PATH to include your install location. Some installs won't create the prefix directory for you, in which case create it first. This is useful if you want to keep this package entirely separate and only in your paths on demand. export PYTHONPATH=/home/username/your/path/lib/python2.7/site-packages:$PYTHONPATH # if necessary, create install path mkdir -p home/username/your/path/lib/python2.7/site-packages python setup.py install --prefix=/home/username/your/path # add these to your .bashrc or jobscript export PYTHONPATH=/home/username/your/path/lib/python2.7/site-packages:$PYTHONPATH export PATH=/home/username/your/path/bin:$PATH Check that the PATH is where your Python executables were installed, and the PYTHONPATH is correct. It will tend to tell you at install time if you need to change or create the PYTHONPATH directory. Python script executable paths \u00a7 If you have an executable python script giving the location of python like this, and it fails because that python doesn't exist in that location or isn't the one that has the additional packages installed: #!/usr/bin/python2.6 You should change it so it uses the first python found in your environment. #!/usr/bin/env python Perl \u00a7 Perl modules will freqently have a Makefile.PL (especially if you download the tar files from CPAN.org yourself). You can install manually as: perl Makefile.PL PREFIX=/home/username/your/perl/location make make install CPAN \u00a7 You can use CPAN to download and install modules locally for you. The first time you run the cpan command, it will create a .cpan directory for you and ask you to give it configuration settings or allow it to set them automatically. You need to tell it where you want your install prefix to be. If it is automatically configured, you need to edit these lines in your .cpan/CPAN/MyConfig.pm , for example if you want it to be in a lib directory in your home (change username to your own username): 'make_install_arg' => q[PREFIX=/home/username/lib] , # other lines in here 'makepl_arg' => q[PREFIX=/home/username/lib] , 'mbuild_install_arg' => q[PREFIX=/home/username/lib] , 'mbuildpl_arg' => q[--install_base /home/username/lib] , It will download and build modules inside .cpan and install them where you specified. Set PERL5LIB paths \u00a7 If you install your own Perl or Perl modules, you will need to append them to your PERL5LIB: export PERL5LIB=/home/username/your/perl/location:$PERL5LIB If you installed with CPAN, you may need to add several paths to this based on the layout it creates inside your nominated Perl directory. Errors when using non-default Perl versions \u00a7 warnings.pm \u00a7 If you are using a version of Perl that is not the default system Perl and get strange errors when trying to run a Perl script, particularly ones about warnings.pm: Search pattern not terminated at /shared/ucl/apps/perl/5.20.0/lib/5.20.0/warnings.pm line 1099 then you need to edit the script so that instead of beginning with #!/usr/bin/perl , it begins with #!/usr/bin/env perl . Otherwise it will try to use the old system Perl libraries with your newer Perl executable, which won't work. libperl.so not found \u00a7 You probably built perl without telling it to build the shared library too. Add -Duseshrplib to your build flags. R \u00a7 There are instructions on installing and using local R packages in Using your own local R packages . Compiling with MPI \u00a7 OpenMPI and Intel MPI are available. Certain programs do not work well with one or the other, so if you are having problems try the other one. Intel MPI is based on MPICH, so if the program you are compiling mentions that, try Intel MPI first. The Intel MPI is threadsafe; some versions of OpenMPI aren't. Note that OpenMPI 1.8.4 had a segv bug in non-blocking collectives that is fixed in OpenMPI 1.10.1. Enabling OpenMP \u00a7 To enable OpenMP with the Intel compilers, you simply need to add -openmp to your compile line. With the GNU compilers you need to add -fopenmp . Problems \u00a7 If you experience problems building your applications, please contact your local IT support in the first instance. We are available at rc-support AT ucl.ac.uk to help you if you still cannot build your app or if you need to report a problem with our software stack.","title":"Compiling Your Code"},{"location":"Wiki_Export/Compiling/#compiling-your-code","text":"","title":"Compiling Your Code"},{"location":"Wiki_Export/Compiling/#download-your-code","text":"Use wget or curl to download the source code for the software you want to install to your account. There might be binaries available, but they often won't work on our clusters because they were compiled for other machines with other library versions available. Use tar or unzip or similar depending on archive type to uncompress your source code. wget https://www.example.com/program.tar.gz tar -xvf program.tar.gz You won't be able to use a package manager like yum, you'll need to follow the manual installation instructions for a user-space install (not using sudo).","title":"Download your code"},{"location":"Wiki_Export/Compiling/#set-up-your-modules","text":"Before you start compiling, you need to make sure you have the right compilers, libraries and other tools available for your software. If you haven't changed anything, you will have the default modules loaded. For more information on how to use modules, see RC Systems user environment . Check what the instructions for your software tell you about compiling it. If the website doesn't say much, the source code will hopefully have a README or INSTALL file. You may want to use a different compiler - the default is the Intel compiler. module avail compilers will show you all the compiler modules available. Most Open Source software tends to assume you're using GCC and OpenMPI (if it uses MPI) and is most tested with that combination, so if it doesn't specify you may want to begin there (do check what the newest modules available are): module unload compilers mpi mkl module load compilers/gnu/4.9.2 module load mpi/openmpi/1.10.1/gnu-4.9.2","title":"Set up your modules"},{"location":"Wiki_Export/Compiling/#available-compilers","text":"The following compilers are available and supported on Legion: Intel C, C++ and Fortran GNU C, C++ and Fortran We currently have a limited number of licenses for the Intel compilers so only a certain number of users can use them simultaneously. This means that your compilation may fail with an error complaining about not being able to obtain a valid license. If this happens, simply wait for a few minutes and try again. In addition to the supported tools, there are a number of tools installed on Legion which are not supported (for example the PGI compilers) which were installed to build certain supported packages. Users who use the unsupported packages do so at their own risk.","title":"Available compilers"},{"location":"Wiki_Export/Compiling/#build-systems","text":"Most software will use some kind of build system to manage how files are compiled and linked and in what order. Here are a few common ones.","title":"Build systems"},{"location":"Wiki_Export/Compiling/#automake-configure","text":"Automake will generate the Makefile for you and hopefully pick up sensible options through configuration. You can give it an install prefix to tell it where to install (or you can build it in place and not use make install at all). ./configure --prefix=/home/username/place/you/want/to/install make # if it has a test suite, good idea to use it make test make install If it has more configuration flags, you can use ./configure --help to view them. Usually configure will create a config.log: you can look in there to find if any tests have failed or things you think should have been picked up haven't.","title":"Automake configure"},{"location":"Wiki_Export/Compiling/#cmake","text":"CMake is another build system. It will have a CMakeFile or the instructions will ask you to use cmake or ccmake rather than make. It also generates Makefiles for you. ccmake is a terminal-based interactive interface where you can see what variables are set to and change them, then repeatedly configure until everything is correct, generate the Makefile and quit. cmake is the commandline version. The process tends to go like this: ccmake CMakeLists.txt # press c to configure - will pick up some options # press t to toggle advanced options # keep making changes and configuring until no more errors or changes # press g to generate and exit make # if it has a test suite, good idea to use it make test make install If you need to rerun ccmake and reconfigure, remember to delete the CMakeCache.txt file, or you'll be wondering why your changes haven't taken. Turning on verbose Makefiles in ccmake is also useful if your code didn't compile first time - you'll be able to see what flags the compiler or linker is actually being given when it fails.","title":"CMake"},{"location":"Wiki_Export/Compiling/#make","text":"Your code may just come with a Makefile and have no configure, in which case the generic way to compile it is as follows: make targetname There's usually a default target, which make on its own will use. If you need to change any configuration options, you'll need to edit those sections of the Makefile (at the top, where the variables/flags are defined). Here are some typical variables you may want to change in a Makefile. These are what compilers/mpi wrappers to use - these are also defined by the compiler modules, so you can see what they should be. Intel would be icc, icpc, ifort, for example. If it's a program that can be compiled using MPI and only has a variable for CC, then set that to mpicc. CC=gcc CXX=g++ FC=gfortran MPICC=mpicc MPICXX=mpicxx MPIF90=mpif90 CFLAGS and LDFLAGS are flags for the compiler and linker respectively, and there might be LIBS or INCLUDE as well. When linking a library with the name libfoo, use -lfoo . CFLAGS=\"-I/path/to/include\" LDFLAGS=\"-L/path/to/foo/lib -L/path/to/bar/lib\" LDLIBS=\"-lfoo -lbar\" Remember to make clean first if you are recompiling with new options!","title":"Make"},{"location":"Wiki_Export/Compiling/#avx-instructions","text":"Note : Legion's current login nodes are of a newer architecture than some of the compute nodes - the login nodes have AVX instructions but the XYZ type nodes do not. This means if you want your code to run on the older nodes, some compiler options cannot be used (e.g. -march=native , -mtune , -xHost ) or your code will segfault. You can either build the code on the login nodes and restrict your jobs to only running on the newer nodes, compile the code with appropriate options for all the nodes, or compile your code inside a job that is running on the XYZ nodes (or during a qrsh session on the same).","title":"AVX instructions"},{"location":"Wiki_Export/Compiling/#intel-compilers","text":"To tell the Intel compilers to build for SSE4.2 instructions and no AVX, add this to CFLAGS (and CXXFLAGS if relevant): CFLAGS=-axSSE4.2 (Also see icc -help codegen ).","title":"Intel compilers"},{"location":"Wiki_Export/Compiling/#gnu-compilers","text":"To tell GCC to build for SSE4.2 without AVX, add this to CFLAGS (and CXXFLAGS if relevant): CFLAGS=-march=nehalem","title":"GNU compilers"},{"location":"Wiki_Export/Compiling/#restrict-node-type","text":"To restrict a job to newer nodes only, put this in your script: #$ -ac allow=LMNOPQSTU You can also compile one version without AVX and one with, so you can take advantage of the newer nodes when possible. You could use hostname in your jobscript to check what type of node you were on and run the appropriate binary. Hostnames begin with node-x for an X-type node, node-u for a U-type and so on.","title":"Restrict node type"},{"location":"Wiki_Export/Compiling/#test-for-avx","text":"We have a script that will let you test whether your compiled code is using AVX instructions. If you pass it a directory it will recursively test everything in there. Note that if your code builds multiple kernels and so can choose based on where it runs which instructions to use (like MKL) then this will find AVX instructions but they won't cause your code to segfault. find /home/username/path/ -perm /111 -type f | xargs /shared/ucl/apps/rcops_scripts/hasavx -q","title":"Test for AVX"},{"location":"Wiki_Export/Compiling/#blas-and-lapack","text":"BLAS and LAPACK are provided as part of MKL, OpenBLAS or ATLAS. There are several different OpenBLAS and ATLAS modules on Legion for different compilers. MKL is available in the Intel compiler module. Your code may try to link -lblas -llapack : this isn't the right way to use BLAS and LAPACK with MKL or ATLAS (our OpenBLAS now has symlinks that allow you to do this). MKL on Legion OpenBLAS on Legion ATLAS on Legion","title":"BLAS and LAPACK"},{"location":"Wiki_Export/Compiling/#set-your-path-and-other-environment-variables","text":"After you have installed your software, you'll need to add it to your PATH environment variable so you can run it without having to give the full path to its location. Put this in your ~/.bashrc file so it will set this with every new session you create. Replace username with your username and point to the directory your binary was built in (frequently program/bin ). This adds it to the front of your PATH, so if you install a newer version of something, it will be found before the system one. export PATH=/home/username/location/of/software/binary:$PATH If you built a library that you'll go on to compile other software with, you probably want to also add the lib directory to your LD_LIBRARY_PATH and LIBRARY_PATH, and the include directory to CPATH (add export statements as above). This may mean your configure step will pick your library up correctly without any further effort on your part. To make these changes to your .bashrc take effect in your current session: source ~/.bashrc","title":"Set your PATH and other environment variables"},{"location":"Wiki_Export/Compiling/#python","text":"There are python2/recommended and python3/recommended bundles. These use a virtualenv and have pip set up for you. They both have numpy and scipy available.","title":"Python"},{"location":"Wiki_Export/Compiling/#set-compiler-module","text":"The Python versions on Legion were built with GCC. You can run them with the default Intel compilers loaded because everything depends on the gcc-libs/4.9.2 module. When you are building your own Python packages you should have the GCC compiler module loaded however, to avoid the situation where you build a package with the Intel compiler and then try to run it with GCC, in which case it will be unable to find Intel-specific instructions. module unload compilers module load compilers/gnu/4.9.2 If you get an error like this when trying to run something, recheck what compiler you used. undefined symbol: __intel_sse2_strrchr","title":"Set compiler module"},{"location":"Wiki_Export/Compiling/#install-your-own-packages-in-the-same-virtualenv","text":"This will use our central virtualenv, which contains a number of packages already installed. pip install --user <python2pkg> pip3 install --user <python3pkg> These will install into .python2local or .python3local directories in your home directory, respectively. To see what is already installed, the Python-shared list shows what is installed for both Python2 and 3, while the Python2 list and Python3 list show what is only installed for one or the other. (There may also be prereqs that aren't listed explicitly - pip will tell you if something is already installed as long as you have the recommended module bundle loaded).","title":"Install your own packages in the same virtualenv"},{"location":"Wiki_Export/Compiling/#use-your-own-virtualenvs","text":"If you need different packages that are not compatible with the central installs, you can create a new virtualenv and only yours will be available. virtualenv <DIR> source <DIR>/bin/activate Your bash prompt will show you that a different virtualenv is active.","title":"Use your own virtualenvs"},{"location":"Wiki_Export/Compiling/#installing-via-setuppy","text":"If you need to install using setup.py, you can use the --user flag and as long as one of the python bundles is loaded, it will install into the same .python2local or .python3local as pip and you won't need to add any new paths to your environment. python setup.py install --user You can alternatively use --prefix in which case you will have to set the install prefix to somewhere in your space, and also set PYTHONPATH and PATH to include your install location. Some installs won't create the prefix directory for you, in which case create it first. This is useful if you want to keep this package entirely separate and only in your paths on demand. export PYTHONPATH=/home/username/your/path/lib/python2.7/site-packages:$PYTHONPATH # if necessary, create install path mkdir -p home/username/your/path/lib/python2.7/site-packages python setup.py install --prefix=/home/username/your/path # add these to your .bashrc or jobscript export PYTHONPATH=/home/username/your/path/lib/python2.7/site-packages:$PYTHONPATH export PATH=/home/username/your/path/bin:$PATH Check that the PATH is where your Python executables were installed, and the PYTHONPATH is correct. It will tend to tell you at install time if you need to change or create the PYTHONPATH directory.","title":"Installing via setup.py"},{"location":"Wiki_Export/Compiling/#python-script-executable-paths","text":"If you have an executable python script giving the location of python like this, and it fails because that python doesn't exist in that location or isn't the one that has the additional packages installed: #!/usr/bin/python2.6 You should change it so it uses the first python found in your environment. #!/usr/bin/env python","title":"Python script executable paths"},{"location":"Wiki_Export/Compiling/#perl","text":"Perl modules will freqently have a Makefile.PL (especially if you download the tar files from CPAN.org yourself). You can install manually as: perl Makefile.PL PREFIX=/home/username/your/perl/location make make install","title":"Perl"},{"location":"Wiki_Export/Compiling/#cpan","text":"You can use CPAN to download and install modules locally for you. The first time you run the cpan command, it will create a .cpan directory for you and ask you to give it configuration settings or allow it to set them automatically. You need to tell it where you want your install prefix to be. If it is automatically configured, you need to edit these lines in your .cpan/CPAN/MyConfig.pm , for example if you want it to be in a lib directory in your home (change username to your own username): 'make_install_arg' => q[PREFIX=/home/username/lib] , # other lines in here 'makepl_arg' => q[PREFIX=/home/username/lib] , 'mbuild_install_arg' => q[PREFIX=/home/username/lib] , 'mbuildpl_arg' => q[--install_base /home/username/lib] , It will download and build modules inside .cpan and install them where you specified.","title":"CPAN"},{"location":"Wiki_Export/Compiling/#set-perl5lib-paths","text":"If you install your own Perl or Perl modules, you will need to append them to your PERL5LIB: export PERL5LIB=/home/username/your/perl/location:$PERL5LIB If you installed with CPAN, you may need to add several paths to this based on the layout it creates inside your nominated Perl directory.","title":"Set PERL5LIB paths"},{"location":"Wiki_Export/Compiling/#errors-when-using-non-default-perl-versions","text":"","title":"Errors when using non-default Perl versions"},{"location":"Wiki_Export/Compiling/#warningspm","text":"If you are using a version of Perl that is not the default system Perl and get strange errors when trying to run a Perl script, particularly ones about warnings.pm: Search pattern not terminated at /shared/ucl/apps/perl/5.20.0/lib/5.20.0/warnings.pm line 1099 then you need to edit the script so that instead of beginning with #!/usr/bin/perl , it begins with #!/usr/bin/env perl . Otherwise it will try to use the old system Perl libraries with your newer Perl executable, which won't work.","title":"warnings.pm"},{"location":"Wiki_Export/Compiling/#libperlso-not-found","text":"You probably built perl without telling it to build the shared library too. Add -Duseshrplib to your build flags.","title":"libperl.so not found"},{"location":"Wiki_Export/Compiling/#r","text":"There are instructions on installing and using local R packages in Using your own local R packages .","title":"R"},{"location":"Wiki_Export/Compiling/#compiling-with-mpi","text":"OpenMPI and Intel MPI are available. Certain programs do not work well with one or the other, so if you are having problems try the other one. Intel MPI is based on MPICH, so if the program you are compiling mentions that, try Intel MPI first. The Intel MPI is threadsafe; some versions of OpenMPI aren't. Note that OpenMPI 1.8.4 had a segv bug in non-blocking collectives that is fixed in OpenMPI 1.10.1.","title":"Compiling with MPI"},{"location":"Wiki_Export/Compiling/#enabling-openmp","text":"To enable OpenMP with the Intel compilers, you simply need to add -openmp to your compile line. With the GNU compilers you need to add -fopenmp .","title":"Enabling OpenMP"},{"location":"Wiki_Export/Compiling/#problems","text":"If you experience problems building your applications, please contact your local IT support in the first instance. We are available at rc-support AT ucl.ac.uk to help you if you still cannot build your app or if you need to report a problem with our software stack.","title":"Problems"},{"location":"Wiki_Export/Connecting_to_Research_Data_Services/","text":"The Research Data Services group (RDS) run a number of systems designed to help with data storage during and after a project. Several solutions for copying data between RDS and each of the central UCL research computing platforms are presented below. Sections of the example code surrounded by angle brackets (\\<>) should be replaced by the information indicated (do not keep the angle brackets in). Between Legion and RDS \u00a7 If you already have an account with Research Data Services, you can transfer data directly between Legion and Research Data Storage using the Secure Copy ( scp ) command. From RDS to Legion \u00a7 If you are on a research data login node, you can transfer data to Legion\u2019s Scratch area at the highest rate currently possible by running the command: scp data_file.tgz login05.external.legion.ucl.ac.uk:~/Scratch/ Or from somewhere within Legion (including compute nodes in running jobs) running the command: scp ssh.rd.ucl.ac.uk:~/data_file.tgz ~/Scratch/ From Legion to RDS \u00a7 From Legion, send data to your project space on RDS by running the command: scp data_file.tgz ccaaxyz@ssh.rd.ucl.ac.uk:<path_to_project_space> The RDS support pages provide more information: http://www.ucl.ac.uk/isd/services/research-it/research-data/storage/access-guide","title":"Connecting to Research Data Services"},{"location":"Wiki_Export/Connecting_to_Research_Data_Services/#between-legion-and-rds","text":"If you already have an account with Research Data Services, you can transfer data directly between Legion and Research Data Storage using the Secure Copy ( scp ) command.","title":"Between Legion and RDS"},{"location":"Wiki_Export/Connecting_to_Research_Data_Services/#from-rds-to-legion","text":"If you are on a research data login node, you can transfer data to Legion\u2019s Scratch area at the highest rate currently possible by running the command: scp data_file.tgz login05.external.legion.ucl.ac.uk:~/Scratch/ Or from somewhere within Legion (including compute nodes in running jobs) running the command: scp ssh.rd.ucl.ac.uk:~/data_file.tgz ~/Scratch/","title":"From RDS to Legion"},{"location":"Wiki_Export/Connecting_to_Research_Data_Services/#from-legion-to-rds","text":"From Legion, send data to your project space on RDS by running the command: scp data_file.tgz ccaaxyz@ssh.rd.ucl.ac.uk:<path_to_project_space> The RDS support pages provide more information: http://www.ucl.ac.uk/isd/services/research-it/research-data/storage/access-guide","title":"From Legion to RDS"},{"location":"Wiki_Export/FAQ/","text":"Frequently-Asked Questions \u00a7 This page attempts to address some of the topics we most frequently receive questions about, or to which the answers are most complex. Why is my job in Eqw status? \u00a7 If your job goes straight into Eqw state, there was an error in your jobscript that meant your job couldn't be started. The standard qstat job information command will give you a truncated version of the error: qstat -j <job_ID> To see the full error instead: qexplain <job_ID> The qexplain script is part of our userscripts set -- if you try to use it and get an error that it doesn't exist, load the userscripts module: module load userscripts The most common reason jobs go into this error state is that a file or directory your job is trying to use doesn't exist. Creating it after the job is in the Eqw state won't make the job run: it'll still have to be deleted and re-submitted. \"Unable to determine job requirements\" error \u00a7 Unable to run job: Rejected by ucl_jsv4h Reason:Unable to determine job requirements. Exiting. The #$ directives are missing from your script, or have extra white space before them. This means SGE isn't picking them up and doesn't know what resources you are requesting. Add them or remove the spaces and it will work. \"/bin/bash: invalid option\" error \u00a7 This is a sign that your jobscript is a DOS-formatted text file and not a Unix one - the line break characters are different. Type dos2unix <yourscriptname> in your terminal to convert it. Sometimes the offending characters will be visible in the error. You can see here it's trying to parse ^M as an option. Your Scratch space goes missing \u00a7 You may have accidentally deleted or replaced the link to your Scratch space. Do an ls -al in your home - if set up correctly, it should look like this: lrwxrwxrwx 1 username private 24 Apr 14 2014 Scratch -> /scratch/scratch/username where username is your UCL user ID. You can recreate the symlink with ln -s /scratch/scratch/username Scratch Which MKL library files should I use to build my application? \u00a7 Depending on which whether you wish to use BLAS/LAPACK/ScaLAPACK/etc... there is a specific set of libraries that you need to pass to your compilation command line. Fortunately, Intel have released a tool that allows you to determine which libraries to link and in which order for a number of compilers and operating systems: http://software.intel.com/en-us/articles/intel-mkl-link-line-advisor/ See also: MKL_on_Legion . SSH known_hosts \u00a7 1. If you get a warning when connecting in via ssh, we may have updated the login nodes, and you probably need to delete old host keys from your ~/.ssh/known_hosts . You can also delete the whole file, and the ssh command will recreate it (asking you to check) next time you try to connect. 2. If you look in the error file for your job, you may find a number of errors like the one below. Please ignore these as they are the result of compute nodes being unable to write to your home directory and do not indicate a problem. Failed to add the RSA host key for IP address '10.143.9.1' to the list of known hosts (/home/uccaoke/.ssh/known_hosts) \"ssh: Unsupported option - -x\" errors \u00a7 These errors indicate that you are attempting to use the QLogic version of mpirun in the OpenMPI parallel environment. It is likely you are doing this by accident and probably intend to use the OpenMPI mpirun but do not have your modules configured correctly. Please add the lines below, either after default modules (defmods) are loaded in your .bashrc, or else in your job script before mpirun: Note : the above assumes you are using the Intel compilers. You get \"Program not started through mpirun. Exiting...\" but are using mpirun! \u00a7 This is most often caused by launching a program built with QLogic MPI with the mpirun from another MPI implementation (e.g. OpenMPI). You can determine which version of MPI your program was built with by running ldd on the application binary. You want to know where the libraries loaded via modules system are on disk \u00a7 Look at the contents of the default modules to find the path to those libraries on the current system. Look at the following command listing: As you can see, the modules system sets the paths to libraries in environment variables which the system uses to locate files. Unable to run job: JSV stderr: perl: warning: Setting locale failed. \u00a7 This error is generally because your SSH client is passing LANG through as part of the SSH command, and is passing something that conflicts with what Legion has it set to. You may be more likely to come across this with newer versions of Mac OS X - if your client is different, have a look for an equivalent option. In Mac OS X Terminal, click Settings and under International untick the box that says \"Set locale environment variables on startup\". Per session, you can try LANG=C ssh userid@legion.rc.ucl.ac.uk Why can't I find out when my job will run? \u00a7 An informative discussion on this matter can be found in the Scheduler section of the User Guide. What can I do to minimise the time I need to wait for my job(s) to run? \u00a7 Minimise the amount of wall clock time you request. Use job arrays instead of submitting large numbers of jobs (see our job script examples ). Plan your work so that you can do other things while your jobs are being scheduled - the rule of thumb is that you will have to wait about twice the requested wall clock time (on average). What is my project code (short string) / project ID? \u00a7 Prior to July 2014, every user had a project code. Now all users belong to the default project \"AllUsers\" and no longer have to specify this. If you see older job script examples mentioning a project ID, you can delete that section. Only projects with access to paid or specialised resources need to give a project code in order to use those resources. If you do not know yours, contact rc-support .","title":"FAQ"},{"location":"Wiki_Export/FAQ/#frequently-asked-questions","text":"This page attempts to address some of the topics we most frequently receive questions about, or to which the answers are most complex.","title":"Frequently-Asked Questions"},{"location":"Wiki_Export/FAQ/#why-is-my-job-in-eqw-status","text":"If your job goes straight into Eqw state, there was an error in your jobscript that meant your job couldn't be started. The standard qstat job information command will give you a truncated version of the error: qstat -j <job_ID> To see the full error instead: qexplain <job_ID> The qexplain script is part of our userscripts set -- if you try to use it and get an error that it doesn't exist, load the userscripts module: module load userscripts The most common reason jobs go into this error state is that a file or directory your job is trying to use doesn't exist. Creating it after the job is in the Eqw state won't make the job run: it'll still have to be deleted and re-submitted.","title":"Why is my job in Eqw status?"},{"location":"Wiki_Export/FAQ/#unable-to-determine-job-requirements-error","text":"Unable to run job: Rejected by ucl_jsv4h Reason:Unable to determine job requirements. Exiting. The #$ directives are missing from your script, or have extra white space before them. This means SGE isn't picking them up and doesn't know what resources you are requesting. Add them or remove the spaces and it will work.","title":"\"Unable to determine job requirements\" error"},{"location":"Wiki_Export/FAQ/#binbash-invalid-option-error","text":"This is a sign that your jobscript is a DOS-formatted text file and not a Unix one - the line break characters are different. Type dos2unix <yourscriptname> in your terminal to convert it. Sometimes the offending characters will be visible in the error. You can see here it's trying to parse ^M as an option.","title":"\"/bin/bash: invalid option\" error"},{"location":"Wiki_Export/FAQ/#your-scratch-space-goes-missing","text":"You may have accidentally deleted or replaced the link to your Scratch space. Do an ls -al in your home - if set up correctly, it should look like this: lrwxrwxrwx 1 username private 24 Apr 14 2014 Scratch -> /scratch/scratch/username where username is your UCL user ID. You can recreate the symlink with ln -s /scratch/scratch/username Scratch","title":"Your Scratch space goes missing"},{"location":"Wiki_Export/FAQ/#which-mkl-library-files-should-i-use-to-build-my-application","text":"Depending on which whether you wish to use BLAS/LAPACK/ScaLAPACK/etc... there is a specific set of libraries that you need to pass to your compilation command line. Fortunately, Intel have released a tool that allows you to determine which libraries to link and in which order for a number of compilers and operating systems: http://software.intel.com/en-us/articles/intel-mkl-link-line-advisor/ See also: MKL_on_Legion .","title":"Which MKL library files should I use to build my application?"},{"location":"Wiki_Export/FAQ/#ssh-known_hosts","text":"1. If you get a warning when connecting in via ssh, we may have updated the login nodes, and you probably need to delete old host keys from your ~/.ssh/known_hosts . You can also delete the whole file, and the ssh command will recreate it (asking you to check) next time you try to connect. 2. If you look in the error file for your job, you may find a number of errors like the one below. Please ignore these as they are the result of compute nodes being unable to write to your home directory and do not indicate a problem. Failed to add the RSA host key for IP address '10.143.9.1' to the list of known hosts (/home/uccaoke/.ssh/known_hosts)","title":"SSH known_hosts"},{"location":"Wiki_Export/FAQ/#ssh-unsupported-option-x-errors","text":"These errors indicate that you are attempting to use the QLogic version of mpirun in the OpenMPI parallel environment. It is likely you are doing this by accident and probably intend to use the OpenMPI mpirun but do not have your modules configured correctly. Please add the lines below, either after default modules (defmods) are loaded in your .bashrc, or else in your job script before mpirun: Note : the above assumes you are using the Intel compilers.","title":"\"ssh: Unsupported option - -x\" errors"},{"location":"Wiki_Export/FAQ/#you-get-program-not-started-through-mpirun-exiting-but-are-using-mpirun","text":"This is most often caused by launching a program built with QLogic MPI with the mpirun from another MPI implementation (e.g. OpenMPI). You can determine which version of MPI your program was built with by running ldd on the application binary.","title":"You get \"Program not started through mpirun. Exiting...\" but are using mpirun!"},{"location":"Wiki_Export/FAQ/#you-want-to-know-where-the-libraries-loaded-via-modules-system-are-on-disk","text":"Look at the contents of the default modules to find the path to those libraries on the current system. Look at the following command listing: As you can see, the modules system sets the paths to libraries in environment variables which the system uses to locate files.","title":"You want to know where the libraries loaded via modules system are on disk"},{"location":"Wiki_Export/FAQ/#unable-to-run-job-jsv-stderr-perl-warning-setting-locale-failed","text":"This error is generally because your SSH client is passing LANG through as part of the SSH command, and is passing something that conflicts with what Legion has it set to. You may be more likely to come across this with newer versions of Mac OS X - if your client is different, have a look for an equivalent option. In Mac OS X Terminal, click Settings and under International untick the box that says \"Set locale environment variables on startup\". Per session, you can try LANG=C ssh userid@legion.rc.ucl.ac.uk","title":"Unable to run job: JSV stderr: perl: warning: Setting locale failed."},{"location":"Wiki_Export/FAQ/#why-cant-i-find-out-when-my-job-will-run","text":"An informative discussion on this matter can be found in the Scheduler section of the User Guide.","title":"Why can't I find out when my job will run?"},{"location":"Wiki_Export/FAQ/#what-can-i-do-to-minimise-the-time-i-need-to-wait-for-my-jobs-to-run","text":"Minimise the amount of wall clock time you request. Use job arrays instead of submitting large numbers of jobs (see our job script examples ). Plan your work so that you can do other things while your jobs are being scheduled - the rule of thumb is that you will have to wait about twice the requested wall clock time (on average).","title":"What can I do to minimise the time I need to wait for my job(s) to run?"},{"location":"Wiki_Export/FAQ/#what-is-my-project-code-short-string-project-id","text":"Prior to July 2014, every user had a project code. Now all users belong to the default project \"AllUsers\" and no longer have to specify this. If you see older job script examples mentioning a project ID, you can delete that section. Only projects with access to paid or specialised resources need to give a project code in order to use those resources. If you do not know yours, contact rc-support .","title":"What is my project code (short string) / project ID?"},{"location":"Wiki_Export/Installing_PGI/","text":"PGI Compiler Suite Installation at UCL \u00a7 UCL has two floating licences for PGI Fortran/C/C++ Server for Linux, purchased primarily for building Gaussian 03 and Gaussian 09 on UCL computers. To install follow the procedure below. If you are installing on a system outside the Institutional Firewall, please connect to the UCL VPN service first. Download version 13.9 or 11.9 from the UCL Software Database on your Linux system in a empty directory. You will need to login with your UCL userid and password. Untar the installer files using: tar xvzf pgilinux-2013-139.tar.gz Run the installer as root and follow the instructions: ./install` During the installation you will be asked: Do you wish to generate license keys? (y/n) - Enter n as you will need to use the central UCL licence server. Add the PGI Suite bin directory to your PATH. The default location used by the installer is /opt/pgi/linux86-64/13.9/bin . Open access to TCP ports 27000 and 27055 in your local firewall and any departmental firewall. Setup access to the licence server by setting the LM_LICENSE_FILE environment variable. Use either: export LM_LICENSE_FILE=27000@lic-pgi.ucl.ac.uk export LM_LICENSE_FILE=$LM_LICENSE_FILE:27000@lic-pgi.ucl.ac.uk Use the second version if you have other licence managers already defined. The PGI compilers should now be installed and working.","title":"Installing PGI"},{"location":"Wiki_Export/Installing_PGI/#pgi-compiler-suite-installation-at-ucl","text":"UCL has two floating licences for PGI Fortran/C/C++ Server for Linux, purchased primarily for building Gaussian 03 and Gaussian 09 on UCL computers. To install follow the procedure below. If you are installing on a system outside the Institutional Firewall, please connect to the UCL VPN service first. Download version 13.9 or 11.9 from the UCL Software Database on your Linux system in a empty directory. You will need to login with your UCL userid and password. Untar the installer files using: tar xvzf pgilinux-2013-139.tar.gz Run the installer as root and follow the instructions: ./install` During the installation you will be asked: Do you wish to generate license keys? (y/n) - Enter n as you will need to use the central UCL licence server. Add the PGI Suite bin directory to your PATH. The default location used by the installer is /opt/pgi/linux86-64/13.9/bin . Open access to TCP ports 27000 and 27055 in your local firewall and any departmental firewall. Setup access to the licence server by setting the LM_LICENSE_FILE environment variable. Use either: export LM_LICENSE_FILE=27000@lic-pgi.ucl.ac.uk export LM_LICENSE_FILE=$LM_LICENSE_FILE:27000@lic-pgi.ucl.ac.uk Use the second version if you have other licence managers already defined. The PGI compilers should now be installed and working.","title":"PGI Compiler Suite Installation at UCL"},{"location":"Wiki_Export/Interactive_Jobs/","text":"Interactive Job Sessions \u00a7 For an interactive session, you reserve some compute nodes via the scheduler and then are logged in live, just like on the login nodes. These can be used for live visualisation, software debugging, or to work up a script to run your program without having to submit each attempt separately to the queue and wait for it to complete. Please note that time limits are restricted to two hours for interactive sessions, and available core counts are limited. Requesting Access \u00a7 You will be granted an interactive shell after running a command that checks with the scheduler whether the resources you wish to use in your tests/analysis are available. It typically takes the form: qrsh -pe mpi 8 -l mem=512M,h_rt=2:00:00 -now no In this example you are asking to run eight parallel processes within an MPI environment, 512MB RAM per process, for a period of two hours (the maximum allowed for interactive sessions). All job types we support on the system are supported via an interactive session (see our examples section ). Likewise, all qsub options are supported like regular job submission with the difference that with qrsh they must be given at the command line, and not with any job script (or via -@). In addition the -now option is useful when a cluster is busy. By default qrsh and qlogin jobs will run on the next scheduling cycle or give up. The -now no option tells it to keep waiting until it gets scheduled.\u2028Pressing Ctrl+C (i.e. the control key and the C key at the same time) will safely cancel the request if it doesn't seem to be able to get you a session. Interactive X sessions \u00a7 You can get an interactive X session from the head node of the job back to the login\u2028 node. The way to do this is to run the qrsh command in the following generic fashion: qrsh <options> <command> <arguments to <command>> Where <command> is either a command to launch an X terminal like Xterm or Mrxvt or a GUI application like XMGrace or GaussView. To make effective use of the X forwarding you will need to have logged in to the login node with ssh -X or some equivalent method.\u2028\u2028 Here is an example of how you can get a X terminal session with the qrsh command:\u2028 qrsh -l mem=512M,h_rt=0:30:0 \\ /shared/ucl/apps/mrxvt/0.5.4/bin/mrxvt -title 'User Test Node' Working on the nodes \u00a7 If you want to run a command on one of your allocated nodes which is not the headnode, you can use a standard ssh command: ssh <hostname> <command> [args] Where <hostname> can be obtained by inspecting the file $TMPDIR/machines. GPU test nodes \u00a7 You can also run GPU jobs interactively simply by adding the -l gpu=1 or -l gpu=2 options to the qrsh command as normal. For more information, please contact us on rc-support@ucl.ac.uk","title":"Interactive Job Sessions"},{"location":"Wiki_Export/Interactive_Jobs/#interactive-job-sessions","text":"For an interactive session, you reserve some compute nodes via the scheduler and then are logged in live, just like on the login nodes. These can be used for live visualisation, software debugging, or to work up a script to run your program without having to submit each attempt separately to the queue and wait for it to complete. Please note that time limits are restricted to two hours for interactive sessions, and available core counts are limited.","title":"Interactive Job Sessions"},{"location":"Wiki_Export/Interactive_Jobs/#requesting-access","text":"You will be granted an interactive shell after running a command that checks with the scheduler whether the resources you wish to use in your tests/analysis are available. It typically takes the form: qrsh -pe mpi 8 -l mem=512M,h_rt=2:00:00 -now no In this example you are asking to run eight parallel processes within an MPI environment, 512MB RAM per process, for a period of two hours (the maximum allowed for interactive sessions). All job types we support on the system are supported via an interactive session (see our examples section ). Likewise, all qsub options are supported like regular job submission with the difference that with qrsh they must be given at the command line, and not with any job script (or via -@). In addition the -now option is useful when a cluster is busy. By default qrsh and qlogin jobs will run on the next scheduling cycle or give up. The -now no option tells it to keep waiting until it gets scheduled.\u2028Pressing Ctrl+C (i.e. the control key and the C key at the same time) will safely cancel the request if it doesn't seem to be able to get you a session.","title":"Requesting Access"},{"location":"Wiki_Export/Interactive_Jobs/#interactive-x-sessions","text":"You can get an interactive X session from the head node of the job back to the login\u2028 node. The way to do this is to run the qrsh command in the following generic fashion: qrsh <options> <command> <arguments to <command>> Where <command> is either a command to launch an X terminal like Xterm or Mrxvt or a GUI application like XMGrace or GaussView. To make effective use of the X forwarding you will need to have logged in to the login node with ssh -X or some equivalent method.\u2028\u2028 Here is an example of how you can get a X terminal session with the qrsh command:\u2028 qrsh -l mem=512M,h_rt=0:30:0 \\ /shared/ucl/apps/mrxvt/0.5.4/bin/mrxvt -title 'User Test Node'","title":"Interactive X sessions"},{"location":"Wiki_Export/Interactive_Jobs/#working-on-the-nodes","text":"If you want to run a command on one of your allocated nodes which is not the headnode, you can use a standard ssh command: ssh <hostname> <command> [args] Where <hostname> can be obtained by inspecting the file $TMPDIR/machines.","title":"Working on the nodes"},{"location":"Wiki_Export/Interactive_Jobs/#gpu-test-nodes","text":"You can also run GPU jobs interactively simply by adding the -l gpu=1 or -l gpu=2 options to the qrsh command as normal. For more information, please contact us on rc-support@ucl.ac.uk","title":"GPU test nodes"},{"location":"Wiki_Export/Publications/","text":"Publications \u00a7 Some key publications arising from use of the Legion HPC service . Papers preceded by *** resulted from research conducted on the Legion cluster via 'non\u2011standard' use of resources (see Requesting Additional or Unusual Resources ). Astrophysics and Remote Sensing \u00a7 \u2018Cosmological simulations using GCMHD+\u2019 by Barnes, David J., Kawata, Daisuke and Wu, Kinwah. Monthly Notices of the Royal Astronomical Society 420 (2012) 3195. 1 \u2018Axial symmetry breaking of Saturn's thermosphere\u2019 by Smith, C. G. A. and Achilleos, N. Monthly Notices of the Royal Astronomical Society 422 (2012) 1460. 2 \u2018Methane in the atmosphere of the transiting hot Neptune GJ436b?\u2019 by Beaulieu JP, Tinetti G, Kipping DM, Ribas I, Barber RJ, Cho JYK, Polichtchouk I, Tennyson J, Yurchenko SN, Griffith CA, Batista V, Waldmann I, Miller S, Carey S, Mousis O and Fossey SJ. Astrophysical Journal 731 (2011) 2041. 3 \u2018A variationally computed line list for hot NH3\u2019 by Yurchenko SN, Barber RJ and Tennyson J. Monthly Notices of the Royal Astronomical Society 413 (2011) 1828. 4 \u2018Maser Sources in Astrophysics\u2019 by Gray, M. D. Cambridge University Press (2012). 5 Bioinformatics and Computational Biology \u00a7 \u2018AIP Mutation in Pituitary Adenomas in the 18th Century and Today\u2019 by Chahal HS, Stals K, Unterlander M, Balding DJ, Thomas MG, Kumar AV, Besser GM, Atkinson AB, Morrison PJ, Howlett TA, Levy MJ, Orme SM, Akker SA, Abel RL, Grossman AB, Burger J, Ellard S, and Korbonits M. New England Journal of Medicine 364 (2011) 43. 6 \u2018Genetic Discontinuity Between Local Hunter-Gatherers and Central Europe's First Farmers\u2019 by Bramanti B, Thomas MG, Haak W, Unterlaender M, Jores P, Tambets K, Antanaitis-Jacobs I, Haidle MN, Jankauskas R, Kind C-J, Lueth F, Terberger T, Hiller J, Matsumura S, Forster P and Burger J. Science 326 (2009) 137. 7 \u2018Accurate de novo structure prediction of large transmembrane protein domains using fragment assembly and correlated mutation analysis\u2019 by Nugent T and Jones DT. Proceedings of the National Academy of Sciences (2012). . 8 \u2018GeMMA: functional subfamily classification within superfamilies of predicted protein structural domains\u2019 by Lee DA, Rentzsch R and Orengo C. Nucleic Acids Research 38 (2010) 720. 9 *** \u2018The effect of insertions, deletions and alignment errors on the branch-site test of positive selection\u2019 by Fletcher W and Yang Z. Molecular Biology and Evolution 27 (2010) 2257. 10 Earth Materials \u00a7 'Lattice electrical resistivity of magnetic bcc iron from first-principles calculations' by D. Alf\u00e8, M. Pozzo, and M. P. Desjarlais. Physical Review B 85, (2012) 024102 1-5. 11 Epidemiology \u00a7 \u2018Effect on transmission of HIV-1 resistance of timing of implementation of viral load monitoring to determine switches from first to second line antiretroviral regimens in resource-limited settings\u2019 by Phillips AN, Pillay D, Garnett G, Bennett D, Vitoria M, Cambiano V and Lundgren JD. AIDS 25 (2011) 843. 12 \u2018Projected life expectancy of people with HIV according to timing of diagnosis\u2019 by Nakagawa F, Lodwick RK, Smith CJ, Smith R, Cambiano V, Lundgren JD, Delpech V and Phillips AN. AIDS 26 (2012) 335. 13 \u2018HIV Treatment as Prevention: Systematic Comparison of Mathematical Models of the Potential Impact of Antiretroviral Therapy on HIV Incidence in South Africa\u2019 by Jeffrey W. Eaton, Leigh F. Johnson, Joshua A. Salomon, Till B\u00e4rnighausen, Eran Bendavid, Anna Bershteyn, David E. Bloom, Valentina Cambiano, Christophe Fraser, Jan A. C. Hontelez, Salal Humair, Daniel J. Klein, Elisa F. Long, Andrew N. Phillips, Carel Pretorius, John Stover, Edward A. Wenger, Brian G. Williams and Timothy B. Hallett. Public Library of Science Medicine Medicine 9 (2012) e1001245. 14 \u2018Threshold Haemoglobin Levels and the Prognosis of Stable Coronary Disease: Two New Cohorts and a Systematic Review and Meta-Analysis\u2019 by Anoop D. Shah, Owen Nicholas, Adam D. Timmis, Gene Feder, Keith R. Abrams, Ruoling Chen, Aroon D. Hingorani and Harry Hemingway. Public Library of Science Medicine 8 (2011) e1000439. 15 Molecular Quantum Dynamics and Electronic Structure \u00a7 \u2018Experimental and computational studies of small molecule activation by uranium tris(aryloxides): binding of N2, coupling of CO and deoxygenation insertion of CO2 under ambient conditions\u2019 by Stephen M. Mansell, Nikolas Kaltsoyannis and Polly L. Arnold. Journal of the American Chemical Society 133 (2011) 9036. 16 \u2018A combined NMR/MD/QM approach for structure and dynamics elucidations in the solution state: pilot studies using tetrapeptides\u2019 by Aliev, A. E., Courtier-Murias, D., Bhandal, S. and Zhou, S. Chemical Communications 46 (2010) 695. 17 \u2018A stable two-coordinate acyclic silylene\u2019 by Andrey V. Protchenko, Krishna Hassomal Birjkumar, Deepak Dange, Andrew D. Schwarz, Dragoslav Vidovic, Cameron Jones, Nikolas Kaltsoyannis, Philip Mountford and Simon Aldridge. Journal of the American Chemical Society 134 (2012) 6500. 18 Work subsequently highlighted in Nature 485 (2012) 49. 19 \u2018A global, high accuracy ab initio dipole moment surface for the electronic ground state of the water molecule\u2019 by Lorenzo Lodi, Jonathan Tennyson and Oleg L. Polyanski. Journal of Chemical Physics 135 (2011) 034113. 20 \u2018Line lists for H218O and H217O based on empirical line positions and ab initio intensities\u2019 by Lorenzo Lodi and Jonathan Tennyson. Journal of Quantitative Spectroscopy & Radiative Transfer 113 (2012) 850. 21 Nanoscience and Defects \u00a7 'Point defects at the ice (0001) surface\u2019 by Matthew Watkin, Joost VandeVondele and Ben Slater. Proceedings of the National Academy of Sciences 107 (2010) 12429. 22 \u2018Aluminosilicate glasses as yttrium vectors for in-situ radiotherapy: understanding composition-durability effects through molecular dynamics simulations\u2019 by J. K. Christie and A. Tilocca. Chem. Mater. 22 (2010) 3725. 23 \u2018Aerobic Oxidation of Hydrocarbons Catalyzed by Mn-Doped Nanoporous Aluminophosphates(I): Preactivation of the Mn Sites\u2019 by Gomez-Hortiguela, L and Cora, F and Catlow, CRA. ACS Catalysis 1 (2011) 18. (Cover article in the first ever edition of this journal.) 24 \u2018Protonated Carboxyl Anchor for Stable Adsorption of Ru N749 Dye (Black Dye) on a TiO2 Anatase (101) Surface\u2019 by K. Sodeyama, M. Sumita, C. O'Rourke, U. Terranova, A. Islam, L. Han, D. R. Bowler and Y. Tateyama. J. Phys. Chem. Lett. 3 (2012) 472. 25 \u2018Mechanistic insight into the blocking of CO diffusion in [NiFe]-hydrogenase mutants through multiscale simulation\u2019 by P. Wang and J. Blumberger. Proceedings of the National Academy of Sciences 109 (2012) 6399. 26 27 Neuroscience \u00a7 \u2018Rapid Desynchronization of an Electrically Coupled Interneuron Network with Sparse Excitatory Synaptic Input\u2019 by Koen Vervaeke, Andrea L\u0151rincz, Padraig Gleeson, Matteo Farinella, Zoltan Nusser, R. Angus Silver. Neuron 67 (2010) 435. 28 Surface Science and Catalysis \u00a7 \u2018Ab initio molecular dynamics simulations of the cooperative adsorption of hydrazine and water on copper surfaces: Implications for shape control of nanoparticles\u2019 by T.D. Daff and N.H. de Leeuw. Chemistry of Materials 23 (2011) 2718. 29 \u2018Density functional theory and interatomic potential study of structural, mechanical and surface properties of calcium oxalate materials\u2019 by D. Di Tommaso, S.E. Ruiz-Hernandez, Z. Du and N.H. de Leeuw. RSC Advances 2 (2012) 4664. 30 \u2018Catalytic Reaction Mechanism of Mn-Doped Nanoporous Aluminophosphates for the Aerobic Oxidation of Hydrocarbons\u2019 by Luis G\u00f3mez-Hortig\u00fcela, Furio Cor\u00e0, Gopinathan Sankar, Claudio M. Zicovich-Wilson, and C. Richard A. Catlow. Chemistry, A European Journal 16 (2010) 13553. (Cover article.) 31 \u2018A molecular dynamics study of the interprotein interactions in collagen fibrils\u2019 by I. Streeter and N.H. de Leeuw. Soft Matter 7 (2011) 3373. 32 \u2018Molecular Dynamics simulation of the early stages of nucleation of hydroxyapatite at a collagen template\u2019 by N. Almora-Barrios and N.H. de Leeuw. Crystal Growth & Design 12 (2012) 756. 33 Systems Biomedicine \u00a7 \u2018Resolution of Discordant HIV-1 Protease Resistance Rankings Using Molecular Dynamics Simulations\u2019 by D. Wright and P. V. Coveney. Journal of Chemical Information and Modeling 51 (2011) 2636. 34 \u2018Rapid and accurate ranking of binding affinities of epidermal growth factor receptor sequences with selected lung cancer drugs\u2019 by S. Wan and P. V. Coveney. J. R. Soc. Interface 8 (2011) 1114. 35 \u2018Clay Minerals Mediate Folding and Regioselective Interactions of RNA: A Large-Scale Atomistic Simulation Study\u2019 by J. B. Swadling, P. V. Coveney and H. C. Greenwell. Journal of the American Chemical Society 132 (2010) 13750. 36 Other \u00a7 \u2018Universality of Performance Parameters in Vehicular ad hoc Networks\u2019 by T. Hewer, M. Nekovee and P. V. Coveney. IEEE Communications Letters 15 (2011) 947. 37 38","title":"Publications"},{"location":"Wiki_Export/Publications/#publications","text":"Some key publications arising from use of the Legion HPC service . Papers preceded by *** resulted from research conducted on the Legion cluster via 'non\u2011standard' use of resources (see Requesting Additional or Unusual Resources ).","title":"Publications"},{"location":"Wiki_Export/Publications/#astrophysics-and-remote-sensing","text":"\u2018Cosmological simulations using GCMHD+\u2019 by Barnes, David J., Kawata, Daisuke and Wu, Kinwah. Monthly Notices of the Royal Astronomical Society 420 (2012) 3195. 1 \u2018Axial symmetry breaking of Saturn's thermosphere\u2019 by Smith, C. G. A. and Achilleos, N. Monthly Notices of the Royal Astronomical Society 422 (2012) 1460. 2 \u2018Methane in the atmosphere of the transiting hot Neptune GJ436b?\u2019 by Beaulieu JP, Tinetti G, Kipping DM, Ribas I, Barber RJ, Cho JYK, Polichtchouk I, Tennyson J, Yurchenko SN, Griffith CA, Batista V, Waldmann I, Miller S, Carey S, Mousis O and Fossey SJ. Astrophysical Journal 731 (2011) 2041. 3 \u2018A variationally computed line list for hot NH3\u2019 by Yurchenko SN, Barber RJ and Tennyson J. Monthly Notices of the Royal Astronomical Society 413 (2011) 1828. 4 \u2018Maser Sources in Astrophysics\u2019 by Gray, M. D. Cambridge University Press (2012). 5","title":"Astrophysics and Remote Sensing"},{"location":"Wiki_Export/Publications/#bioinformatics-and-computational-biology","text":"\u2018AIP Mutation in Pituitary Adenomas in the 18th Century and Today\u2019 by Chahal HS, Stals K, Unterlander M, Balding DJ, Thomas MG, Kumar AV, Besser GM, Atkinson AB, Morrison PJ, Howlett TA, Levy MJ, Orme SM, Akker SA, Abel RL, Grossman AB, Burger J, Ellard S, and Korbonits M. New England Journal of Medicine 364 (2011) 43. 6 \u2018Genetic Discontinuity Between Local Hunter-Gatherers and Central Europe's First Farmers\u2019 by Bramanti B, Thomas MG, Haak W, Unterlaender M, Jores P, Tambets K, Antanaitis-Jacobs I, Haidle MN, Jankauskas R, Kind C-J, Lueth F, Terberger T, Hiller J, Matsumura S, Forster P and Burger J. Science 326 (2009) 137. 7 \u2018Accurate de novo structure prediction of large transmembrane protein domains using fragment assembly and correlated mutation analysis\u2019 by Nugent T and Jones DT. Proceedings of the National Academy of Sciences (2012). . 8 \u2018GeMMA: functional subfamily classification within superfamilies of predicted protein structural domains\u2019 by Lee DA, Rentzsch R and Orengo C. Nucleic Acids Research 38 (2010) 720. 9 *** \u2018The effect of insertions, deletions and alignment errors on the branch-site test of positive selection\u2019 by Fletcher W and Yang Z. Molecular Biology and Evolution 27 (2010) 2257. 10","title":"Bioinformatics and Computational Biology"},{"location":"Wiki_Export/Publications/#earth-materials","text":"'Lattice electrical resistivity of magnetic bcc iron from first-principles calculations' by D. Alf\u00e8, M. Pozzo, and M. P. Desjarlais. Physical Review B 85, (2012) 024102 1-5. 11","title":"Earth Materials"},{"location":"Wiki_Export/Publications/#epidemiology","text":"\u2018Effect on transmission of HIV-1 resistance of timing of implementation of viral load monitoring to determine switches from first to second line antiretroviral regimens in resource-limited settings\u2019 by Phillips AN, Pillay D, Garnett G, Bennett D, Vitoria M, Cambiano V and Lundgren JD. AIDS 25 (2011) 843. 12 \u2018Projected life expectancy of people with HIV according to timing of diagnosis\u2019 by Nakagawa F, Lodwick RK, Smith CJ, Smith R, Cambiano V, Lundgren JD, Delpech V and Phillips AN. AIDS 26 (2012) 335. 13 \u2018HIV Treatment as Prevention: Systematic Comparison of Mathematical Models of the Potential Impact of Antiretroviral Therapy on HIV Incidence in South Africa\u2019 by Jeffrey W. Eaton, Leigh F. Johnson, Joshua A. Salomon, Till B\u00e4rnighausen, Eran Bendavid, Anna Bershteyn, David E. Bloom, Valentina Cambiano, Christophe Fraser, Jan A. C. Hontelez, Salal Humair, Daniel J. Klein, Elisa F. Long, Andrew N. Phillips, Carel Pretorius, John Stover, Edward A. Wenger, Brian G. Williams and Timothy B. Hallett. Public Library of Science Medicine Medicine 9 (2012) e1001245. 14 \u2018Threshold Haemoglobin Levels and the Prognosis of Stable Coronary Disease: Two New Cohorts and a Systematic Review and Meta-Analysis\u2019 by Anoop D. Shah, Owen Nicholas, Adam D. Timmis, Gene Feder, Keith R. Abrams, Ruoling Chen, Aroon D. Hingorani and Harry Hemingway. Public Library of Science Medicine 8 (2011) e1000439. 15","title":"Epidemiology"},{"location":"Wiki_Export/Publications/#molecular-quantum-dynamics-and-electronic-structure","text":"\u2018Experimental and computational studies of small molecule activation by uranium tris(aryloxides): binding of N2, coupling of CO and deoxygenation insertion of CO2 under ambient conditions\u2019 by Stephen M. Mansell, Nikolas Kaltsoyannis and Polly L. Arnold. Journal of the American Chemical Society 133 (2011) 9036. 16 \u2018A combined NMR/MD/QM approach for structure and dynamics elucidations in the solution state: pilot studies using tetrapeptides\u2019 by Aliev, A. E., Courtier-Murias, D., Bhandal, S. and Zhou, S. Chemical Communications 46 (2010) 695. 17 \u2018A stable two-coordinate acyclic silylene\u2019 by Andrey V. Protchenko, Krishna Hassomal Birjkumar, Deepak Dange, Andrew D. Schwarz, Dragoslav Vidovic, Cameron Jones, Nikolas Kaltsoyannis, Philip Mountford and Simon Aldridge. Journal of the American Chemical Society 134 (2012) 6500. 18 Work subsequently highlighted in Nature 485 (2012) 49. 19 \u2018A global, high accuracy ab initio dipole moment surface for the electronic ground state of the water molecule\u2019 by Lorenzo Lodi, Jonathan Tennyson and Oleg L. Polyanski. Journal of Chemical Physics 135 (2011) 034113. 20 \u2018Line lists for H218O and H217O based on empirical line positions and ab initio intensities\u2019 by Lorenzo Lodi and Jonathan Tennyson. Journal of Quantitative Spectroscopy & Radiative Transfer 113 (2012) 850. 21","title":"Molecular Quantum Dynamics and Electronic Structure"},{"location":"Wiki_Export/Publications/#nanoscience-and-defects","text":"'Point defects at the ice (0001) surface\u2019 by Matthew Watkin, Joost VandeVondele and Ben Slater. Proceedings of the National Academy of Sciences 107 (2010) 12429. 22 \u2018Aluminosilicate glasses as yttrium vectors for in-situ radiotherapy: understanding composition-durability effects through molecular dynamics simulations\u2019 by J. K. Christie and A. Tilocca. Chem. Mater. 22 (2010) 3725. 23 \u2018Aerobic Oxidation of Hydrocarbons Catalyzed by Mn-Doped Nanoporous Aluminophosphates(I): Preactivation of the Mn Sites\u2019 by Gomez-Hortiguela, L and Cora, F and Catlow, CRA. ACS Catalysis 1 (2011) 18. (Cover article in the first ever edition of this journal.) 24 \u2018Protonated Carboxyl Anchor for Stable Adsorption of Ru N749 Dye (Black Dye) on a TiO2 Anatase (101) Surface\u2019 by K. Sodeyama, M. Sumita, C. O'Rourke, U. Terranova, A. Islam, L. Han, D. R. Bowler and Y. Tateyama. J. Phys. Chem. Lett. 3 (2012) 472. 25 \u2018Mechanistic insight into the blocking of CO diffusion in [NiFe]-hydrogenase mutants through multiscale simulation\u2019 by P. Wang and J. Blumberger. Proceedings of the National Academy of Sciences 109 (2012) 6399. 26 27","title":"Nanoscience and Defects"},{"location":"Wiki_Export/Publications/#neuroscience","text":"\u2018Rapid Desynchronization of an Electrically Coupled Interneuron Network with Sparse Excitatory Synaptic Input\u2019 by Koen Vervaeke, Andrea L\u0151rincz, Padraig Gleeson, Matteo Farinella, Zoltan Nusser, R. Angus Silver. Neuron 67 (2010) 435. 28","title":"Neuroscience"},{"location":"Wiki_Export/Publications/#surface-science-and-catalysis","text":"\u2018Ab initio molecular dynamics simulations of the cooperative adsorption of hydrazine and water on copper surfaces: Implications for shape control of nanoparticles\u2019 by T.D. Daff and N.H. de Leeuw. Chemistry of Materials 23 (2011) 2718. 29 \u2018Density functional theory and interatomic potential study of structural, mechanical and surface properties of calcium oxalate materials\u2019 by D. Di Tommaso, S.E. Ruiz-Hernandez, Z. Du and N.H. de Leeuw. RSC Advances 2 (2012) 4664. 30 \u2018Catalytic Reaction Mechanism of Mn-Doped Nanoporous Aluminophosphates for the Aerobic Oxidation of Hydrocarbons\u2019 by Luis G\u00f3mez-Hortig\u00fcela, Furio Cor\u00e0, Gopinathan Sankar, Claudio M. Zicovich-Wilson, and C. Richard A. Catlow. Chemistry, A European Journal 16 (2010) 13553. (Cover article.) 31 \u2018A molecular dynamics study of the interprotein interactions in collagen fibrils\u2019 by I. Streeter and N.H. de Leeuw. Soft Matter 7 (2011) 3373. 32 \u2018Molecular Dynamics simulation of the early stages of nucleation of hydroxyapatite at a collagen template\u2019 by N. Almora-Barrios and N.H. de Leeuw. Crystal Growth & Design 12 (2012) 756. 33","title":"Surface Science and Catalysis"},{"location":"Wiki_Export/Publications/#systems-biomedicine","text":"\u2018Resolution of Discordant HIV-1 Protease Resistance Rankings Using Molecular Dynamics Simulations\u2019 by D. Wright and P. V. Coveney. Journal of Chemical Information and Modeling 51 (2011) 2636. 34 \u2018Rapid and accurate ranking of binding affinities of epidermal growth factor receptor sequences with selected lung cancer drugs\u2019 by S. Wan and P. V. Coveney. J. R. Soc. Interface 8 (2011) 1114. 35 \u2018Clay Minerals Mediate Folding and Regioselective Interactions of RNA: A Large-Scale Atomistic Simulation Study\u2019 by J. B. Swadling, P. V. Coveney and H. C. Greenwell. Journal of the American Chemical Society 132 (2010) 13750. 36","title":"Systems Biomedicine"},{"location":"Wiki_Export/Publications/#other","text":"\u2018Universality of Performance Parameters in Vehicular ad hoc Networks\u2019 by T. Hewer, M. Nekovee and P. V. Coveney. IEEE Communications Letters 15 (2011) 947. 37 38","title":"Other"},{"location":"Wiki_Export/Quick_Start/","text":"This is a quick start guide to our clusters for users already familiar with operating in an HPC environment. Accessing A Cluster \u00a7 Before accessing the Legion cluster, it is necessary to apply for an account . Once you have received notification that your account has been created, you may log in via SSH to: Legion: legion.rc.ucl.ac.uk Myriad: myriad.rc.ucl.ac.uk Grace: grace.rc.ucl.ac.uk Your username and password are the same as those for your central UCL user id. Legion, Myriad, and Grace are only accessible from within UCL\u2019s network. If you need to access them from outside, you need to log in via the Gateway, a departmental machine, or install the IS VPN service. More details on connecting to these services are provided on the Accessing RC Systems page. Managing data on the our clusters \u00a7 Users on our clusters have access to three pools of storage. They have a home directory which is mounted read only on the compute nodes and therefore cannot be written to by running jobs. They have a \"scratch\" area which is writable from jobs and intended for live data and job output. There is a link to this area called \"Scratch\" within the user\u2019s home directory. Finally, within a job users have access to temporary local storage on the nodes (environmental variable $TMPDIR ) which is cleared at the end of the job. Legion has slow external network connections, so there is a dedicated transfer node with 10 gigabit network links to and from Legion available at: login05.external.legion.ucl.ac.uk Transfers to Grace and Myriad may use any of the normal login nodes. For more details on the fairly complicated data management structures within Legion, see the Managing Data on RC Systems page. User Environment \u00a7 Our clusters run an operating system based on Red Hat Enterprise Linux 7 with the Son of Grid Engine batch scheduler. UCL-supported and provided packages are made available to users through the use of the modules system. module avail lists available modules module load loads a module module remove removes a module The module system handles dependency and conflict information. You can find out more about the modules system on Legion on the RC Systems user environment page. Compiling your code \u00a7 We provide Intel and GNU compilers, and OpenMPI and Intel MPI through the modules system, with the usual wrappers. For a full list of the development tools available see here or in the development tools/compilers sections of the modules system. You can find out more about compiling code on a cluster on the Compiling page. Job scheduling policy and projects \u00a7 A fair-share resource allocation model has been implemented on all our clusters. See Resource Allocation for more information and context. Submission scripts \u00a7 Jobs submitted to the scheduler (with \"qsub\") are shell scripts with directives preceded by #$ . #!/bin/bash -l # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per process. #$ -l mem=1G # Set the name of the job. #$ -N SomeScience_1_16 # Select the MPI parallel environment and 16 processes. #$ -pe mpi 16 # Select the project that this job will run under. (Only if you have # access to paid resources). #$ -P <your_project_id> # Set the working directory to somewhere in your scratch space. #$ -wd /home/<your_UCL_id>/Scratch/output You can then follow these directives with the commands your script would execute. Legion supports a wide variety of job types and we would strongly recommend you study the example scripts . Jobs can be controlled with qsub (submit job), qstat (list jobs) and qdel (delete job). See the Introduction to batch processing page for more details. Testing jobs using Interactive Jobs \u00a7 As well as batch access to the system, it is possible to run short, small jobs with interactive access through the scheduler. These can be requested though the qrsh command. You need to provide qrsh with the same options you would include in your job submission script, so: qrsh -pe mpi 8 -l mem=512M -l h_rt=2:0:0 Is functionally equivalent to: #!/bin/bash #$ -S /bin/bash #$ -pe mpi 8 #$ -l mem=512M #$ -l h_rt=2:0:0 Except, of course, that the result of qrsh is an interactive shell. For more details, see the Interactive Jobs page. More information \u00a7 How the scheduler works Example submission scripts Acknowledging the use of our services in publications Contact and support FAQ Known issues Reporting Problems","title":"Quick Start"},{"location":"Wiki_Export/Quick_Start/#accessing-a-cluster","text":"Before accessing the Legion cluster, it is necessary to apply for an account . Once you have received notification that your account has been created, you may log in via SSH to: Legion: legion.rc.ucl.ac.uk Myriad: myriad.rc.ucl.ac.uk Grace: grace.rc.ucl.ac.uk Your username and password are the same as those for your central UCL user id. Legion, Myriad, and Grace are only accessible from within UCL\u2019s network. If you need to access them from outside, you need to log in via the Gateway, a departmental machine, or install the IS VPN service. More details on connecting to these services are provided on the Accessing RC Systems page.","title":"Accessing A Cluster"},{"location":"Wiki_Export/Quick_Start/#managing-data-on-the-our-clusters","text":"Users on our clusters have access to three pools of storage. They have a home directory which is mounted read only on the compute nodes and therefore cannot be written to by running jobs. They have a \"scratch\" area which is writable from jobs and intended for live data and job output. There is a link to this area called \"Scratch\" within the user\u2019s home directory. Finally, within a job users have access to temporary local storage on the nodes (environmental variable $TMPDIR ) which is cleared at the end of the job. Legion has slow external network connections, so there is a dedicated transfer node with 10 gigabit network links to and from Legion available at: login05.external.legion.ucl.ac.uk Transfers to Grace and Myriad may use any of the normal login nodes. For more details on the fairly complicated data management structures within Legion, see the Managing Data on RC Systems page.","title":"Managing data on the our clusters"},{"location":"Wiki_Export/Quick_Start/#user-environment","text":"Our clusters run an operating system based on Red Hat Enterprise Linux 7 with the Son of Grid Engine batch scheduler. UCL-supported and provided packages are made available to users through the use of the modules system. module avail lists available modules module load loads a module module remove removes a module The module system handles dependency and conflict information. You can find out more about the modules system on Legion on the RC Systems user environment page.","title":"User Environment"},{"location":"Wiki_Export/Quick_Start/#compiling-your-code","text":"We provide Intel and GNU compilers, and OpenMPI and Intel MPI through the modules system, with the usual wrappers. For a full list of the development tools available see here or in the development tools/compilers sections of the modules system. You can find out more about compiling code on a cluster on the Compiling page.","title":"Compiling your code"},{"location":"Wiki_Export/Quick_Start/#job-scheduling-policy-and-projects","text":"A fair-share resource allocation model has been implemented on all our clusters. See Resource Allocation for more information and context.","title":"Job scheduling policy and projects"},{"location":"Wiki_Export/Quick_Start/#submission-scripts","text":"Jobs submitted to the scheduler (with \"qsub\") are shell scripts with directives preceded by #$ . #!/bin/bash -l # Request ten minutes of wallclock time (format hours:minutes:seconds). #$ -l h_rt=0:10:0 # Request 1 gigabyte of RAM per process. #$ -l mem=1G # Set the name of the job. #$ -N SomeScience_1_16 # Select the MPI parallel environment and 16 processes. #$ -pe mpi 16 # Select the project that this job will run under. (Only if you have # access to paid resources). #$ -P <your_project_id> # Set the working directory to somewhere in your scratch space. #$ -wd /home/<your_UCL_id>/Scratch/output You can then follow these directives with the commands your script would execute. Legion supports a wide variety of job types and we would strongly recommend you study the example scripts . Jobs can be controlled with qsub (submit job), qstat (list jobs) and qdel (delete job). See the Introduction to batch processing page for more details.","title":"Submission scripts"},{"location":"Wiki_Export/Quick_Start/#testing-jobs-using-interactive-jobs","text":"As well as batch access to the system, it is possible to run short, small jobs with interactive access through the scheduler. These can be requested though the qrsh command. You need to provide qrsh with the same options you would include in your job submission script, so: qrsh -pe mpi 8 -l mem=512M -l h_rt=2:0:0 Is functionally equivalent to: #!/bin/bash #$ -S /bin/bash #$ -pe mpi 8 #$ -l mem=512M #$ -l h_rt=2:0:0 Except, of course, that the result of qrsh is an interactive shell. For more details, see the Interactive Jobs page.","title":"Testing jobs using Interactive Jobs"},{"location":"Wiki_Export/Quick_Start/#more-information","text":"How the scheduler works Example submission scripts Acknowledging the use of our services in publications Contact and support FAQ Known issues Reporting Problems","title":"More information"},{"location":"Wiki_Export/RC_Systems_user_environment/","text":"RC Systems User Environment Operating System \u00a7 Legion, Myriad, and Grace \u00a7 Legion, Myriad, and Grace run a software stack based upon Red Hat Enterprise Linux 7 and Son of Grid Engine. The environment provided should be familiar to users of UNIX-like operating systems. Here is a A Quick Introduction to Unix for those not familiar with this essential operating system. Aristotle \u00a7 Aristotle runs Red Hat Enterprise Linux 6.5. Software \u00a7 As well as the system software, there are a number of applications, libraries and development tools available on our machines, the details of which may be found on the software pages . Modules \u00a7 Our systems use the environment modules system to manage packages. A module configures your current login session or job to use a particular piece of software. For example, this may involve altering your PATH and LD_LIBRARY_PATH environment variables to make the associated commands and/or libraries available at compile-time and/or run-time, without explicitly having to know the relevant paths. A module can for instance be associated with a particular version of the Intel compiler, or particular MPI libraries, or applications software, etc. The default environment has the most commonly required modules already loaded for your convenience. You can see what modules are currently loaded by using the command module list . The default module set is shown in the example below: $ module list Currently Loaded Modulefiles: 1) gcc-libs/4.9.2 8) screen/4.2.1 15) tmux/2.2 2) cmake/3.2.1 9) gerun 16) mrxvt/0.5.4 3) flex/2.5.39 10) nano/2.4.2 17) userscripts/1.3.0 4) git/2.10.2 11) nedit/5.6-aug15 18) rcps-core/1.0.0 5) apr/1.5.2 12) dos2unix/7.3 19) compilers/intel/2017/update1 6) apr-util/1.5.4 13) giflib/5.1.1 20) mpi/intel/2017/update1/intel 7) subversion/1.8.13 14) emacs/24.5 21) default-modules/2017 This output indicates that the Intel compilers are loaded, the Intel MPI environment, editor nedit and some other utilities. In addition to those made available in your default environment, we provide a rich set of additional modules for your use. These can be listed by typing: module whatis Or in a shorter form by typing: module avail You can load additional modules into your current session by using the command: module load For example, to add the module for FFTW 2.1.5 for the Intel compilers, type: module load fftw/2.1.5/intel-2015-update2 Typing module list will now show the above with the addition of the fftw module. You can unload modules from your current session by using the command: module unload For example, to remove the FFTW module, type: module unload fftw/2.1.5/intel-2015-update2 One commonly required change is to switch from using the Intel compiler and associated libraries (which are provided in the default environment), to using the GCC compiler. This would be achieved by typing the following commands: module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/intel/2015/update3/gnu-4.9.2 Note that the order in which you execute these commands is vital! You must always unload modules before loading their replacements. Typing module list again will show the changes. You can permanently change what modules are loaded by default in your environment by editing your ~/.bashrc file to add the appropriate module load and unload commands at the end. When you first start using a new application, typing module help <module> (where <module> is the name of the application module) will provide you with additional Legion-specific instructions on how to use the application if any are necessary. Module Commands \u00a7 module load loads a module module unload unloads a module module purge unloads all modules module list shows currently loaded modules module avail shows available modules module whatis shows available modules with brief explanations module show List the contents of the module fire. Shows environment variables set-up by the module module help Shows helpful information about a module, including instructions on how to use the application Aristotle-Specific Modules \u00a7 Aristotle mounts the Research Computing software stack, so you will see all the same modules. They won't necessarily all work - everything built specifically for Aristotle will have Aristotle in the module name or else be in the extra module section that will show up at the bottom when using module avail : -------------------- /shared/ucl/apps/eb_ivybridge_noib/modules/all -------------------- Bison/2.7-goolf-1.4.10 OpenMPI/1.6.4-GCC-4.7.2 CMake/2.8.11-goolf-1.4.10 PCRE/8.12-goolf-1.4.10 Docutils/0.9.1-goolf-1.4.10-Python-2.7.3 Python/2.7.3-goolf-1.4.10 Doxygen/1.8.3.1-goolf-1.4.10 ScaLAPACK/2.0.2-gompi-1.4.10-OpenBLAS-0.2.6-LAPACK-3.4.2 EasyBuild/1.15.1 Sphinx/1.1.3-goolf-1.4.10-Python-2.7.3 FFTW/3.3.3-gompi-1.4.10 Szip/2.1-goolf-1.4.10 GCC/4.7.2 bzip2/1.0.6-goolf-1.4.10 GDAL/1.9.2-goolf-1.4.10 flex/2.5.37-goolf-1.4.10 GEOS/3.3.5-goolf-1.4.10 gompi/1.4.10 GMT/5.1.1-goolf-1.4.10 goolf/1.4.10 Ghostscript/9.10-goolf-1.4.10 hwloc/1.6.2-GCC-4.7.2 HDF5/1.8.10-patch1-goolf-1.4.10 libreadline/6.2-goolf-1.4.10 Jinja2/2.6-goolf-1.4.10-Python-2.7.3 ncurses/5.9-goolf-1.4.10 LibTIFF/4.0.3-goolf-1.4.10 netCDF/4.2.1.1-goolf-1.4.10 M4/1.4.16-goolf-1.4.10 setuptools/0.6c11-goolf-1.4.10-Python-2.7.3 OpenBLAS/0.2.6-gompi-1.4.10-LAPACK-3.4.2 zlib/1.2.7-goolf-1.4.10 The others are mixed in with the general modules: here are a few: matlab/full/r2015a/8.5-aristotle recommended/r-aristotle python/2.7.9/gnu.4.7.2-Aristotle gnuplot/5.0.1-Aristotle Aristotle has different default modules: $ module show default-modules-aristotle ------------------------------------------------------------------- /shared/ucl/apps/modulefiles2/bundles/default-modules-aristotle: module-whatis Adds default Aristotle modules to your environment. module load compilers/gnu/4.6.3 module load nedit/5.6 module load mrxvt/0.5.4 -------------------------------------------------------------------","title":"RC Systems user environment"},{"location":"Wiki_Export/RC_Systems_user_environment/#operating-system","text":"","title":"Operating System"},{"location":"Wiki_Export/RC_Systems_user_environment/#legion-myriad-and-grace","text":"Legion, Myriad, and Grace run a software stack based upon Red Hat Enterprise Linux 7 and Son of Grid Engine. The environment provided should be familiar to users of UNIX-like operating systems. Here is a A Quick Introduction to Unix for those not familiar with this essential operating system.","title":"Legion, Myriad, and Grace"},{"location":"Wiki_Export/RC_Systems_user_environment/#aristotle","text":"Aristotle runs Red Hat Enterprise Linux 6.5.","title":"Aristotle"},{"location":"Wiki_Export/RC_Systems_user_environment/#software","text":"As well as the system software, there are a number of applications, libraries and development tools available on our machines, the details of which may be found on the software pages .","title":"Software"},{"location":"Wiki_Export/RC_Systems_user_environment/#modules","text":"Our systems use the environment modules system to manage packages. A module configures your current login session or job to use a particular piece of software. For example, this may involve altering your PATH and LD_LIBRARY_PATH environment variables to make the associated commands and/or libraries available at compile-time and/or run-time, without explicitly having to know the relevant paths. A module can for instance be associated with a particular version of the Intel compiler, or particular MPI libraries, or applications software, etc. The default environment has the most commonly required modules already loaded for your convenience. You can see what modules are currently loaded by using the command module list . The default module set is shown in the example below: $ module list Currently Loaded Modulefiles: 1) gcc-libs/4.9.2 8) screen/4.2.1 15) tmux/2.2 2) cmake/3.2.1 9) gerun 16) mrxvt/0.5.4 3) flex/2.5.39 10) nano/2.4.2 17) userscripts/1.3.0 4) git/2.10.2 11) nedit/5.6-aug15 18) rcps-core/1.0.0 5) apr/1.5.2 12) dos2unix/7.3 19) compilers/intel/2017/update1 6) apr-util/1.5.4 13) giflib/5.1.1 20) mpi/intel/2017/update1/intel 7) subversion/1.8.13 14) emacs/24.5 21) default-modules/2017 This output indicates that the Intel compilers are loaded, the Intel MPI environment, editor nedit and some other utilities. In addition to those made available in your default environment, we provide a rich set of additional modules for your use. These can be listed by typing: module whatis Or in a shorter form by typing: module avail You can load additional modules into your current session by using the command: module load For example, to add the module for FFTW 2.1.5 for the Intel compilers, type: module load fftw/2.1.5/intel-2015-update2 Typing module list will now show the above with the addition of the fftw module. You can unload modules from your current session by using the command: module unload For example, to remove the FFTW module, type: module unload fftw/2.1.5/intel-2015-update2 One commonly required change is to switch from using the Intel compiler and associated libraries (which are provided in the default environment), to using the GCC compiler. This would be achieved by typing the following commands: module unload compilers module unload mpi module load compilers/gnu/4.9.2 module load mpi/intel/2015/update3/gnu-4.9.2 Note that the order in which you execute these commands is vital! You must always unload modules before loading their replacements. Typing module list again will show the changes. You can permanently change what modules are loaded by default in your environment by editing your ~/.bashrc file to add the appropriate module load and unload commands at the end. When you first start using a new application, typing module help <module> (where <module> is the name of the application module) will provide you with additional Legion-specific instructions on how to use the application if any are necessary.","title":"Modules"},{"location":"Wiki_Export/RC_Systems_user_environment/#module-commands","text":"module load loads a module module unload unloads a module module purge unloads all modules module list shows currently loaded modules module avail shows available modules module whatis shows available modules with brief explanations module show List the contents of the module fire. Shows environment variables set-up by the module module help Shows helpful information about a module, including instructions on how to use the application","title":"Module Commands"},{"location":"Wiki_Export/RC_Systems_user_environment/#aristotle-specific-modules","text":"Aristotle mounts the Research Computing software stack, so you will see all the same modules. They won't necessarily all work - everything built specifically for Aristotle will have Aristotle in the module name or else be in the extra module section that will show up at the bottom when using module avail : -------------------- /shared/ucl/apps/eb_ivybridge_noib/modules/all -------------------- Bison/2.7-goolf-1.4.10 OpenMPI/1.6.4-GCC-4.7.2 CMake/2.8.11-goolf-1.4.10 PCRE/8.12-goolf-1.4.10 Docutils/0.9.1-goolf-1.4.10-Python-2.7.3 Python/2.7.3-goolf-1.4.10 Doxygen/1.8.3.1-goolf-1.4.10 ScaLAPACK/2.0.2-gompi-1.4.10-OpenBLAS-0.2.6-LAPACK-3.4.2 EasyBuild/1.15.1 Sphinx/1.1.3-goolf-1.4.10-Python-2.7.3 FFTW/3.3.3-gompi-1.4.10 Szip/2.1-goolf-1.4.10 GCC/4.7.2 bzip2/1.0.6-goolf-1.4.10 GDAL/1.9.2-goolf-1.4.10 flex/2.5.37-goolf-1.4.10 GEOS/3.3.5-goolf-1.4.10 gompi/1.4.10 GMT/5.1.1-goolf-1.4.10 goolf/1.4.10 Ghostscript/9.10-goolf-1.4.10 hwloc/1.6.2-GCC-4.7.2 HDF5/1.8.10-patch1-goolf-1.4.10 libreadline/6.2-goolf-1.4.10 Jinja2/2.6-goolf-1.4.10-Python-2.7.3 ncurses/5.9-goolf-1.4.10 LibTIFF/4.0.3-goolf-1.4.10 netCDF/4.2.1.1-goolf-1.4.10 M4/1.4.16-goolf-1.4.10 setuptools/0.6c11-goolf-1.4.10-Python-2.7.3 OpenBLAS/0.2.6-gompi-1.4.10-LAPACK-3.4.2 zlib/1.2.7-goolf-1.4.10 The others are mixed in with the general modules: here are a few: matlab/full/r2015a/8.5-aristotle recommended/r-aristotle python/2.7.9/gnu.4.7.2-Aristotle gnuplot/5.0.1-Aristotle Aristotle has different default modules: $ module show default-modules-aristotle ------------------------------------------------------------------- /shared/ucl/apps/modulefiles2/bundles/default-modules-aristotle: module-whatis Adds default Aristotle modules to your environment. module load compilers/gnu/4.6.3 module load nedit/5.6 module load mrxvt/0.5.4 -------------------------------------------------------------------","title":"Aristotle-Specific Modules"},{"location":"Wiki_Export/Research_Computing_Glossary/","text":"Bash \u00a7 A shell and scripting language, which is the default command processor on most Linux operating systems. Cluster \u00a7 A cluster consists of a set of computer nodes connected together over a fast local area network. A message passing protocol such as MPI allows individual nodes to work together as a single system. Core \u00a7 A core refers to a processing unit within a node . A node may have multiple cores which can work in parallel on a single task, operating on the same data in memory. This kind of parallelism is coordinated using the OpenMP library. Alternatively, cores may work independently on different tasks. Cores may or may not also share cache. Interconnect \u00a7 The interconnect is the network which is used to transfer data between nodes in a cluster . Different types of interconnect operate at different bandwidths and with different amounts of latency, which affects the suitability of a collection of nodes for jobs which use message passing ( MPI ). Job \u00a7 In the context of Batch Processing , a job refers to a computational task to be performed such as a single simulation or analysis. Job Script \u00a7 A job script is essentially a special kind of script used to specify the parameters of a job. Users can specify the data to input, program to use, and the computing resources required. The job script is specified when a job is submitted to SGE, which reads lines starting with #$ . MPI \u00a7 The Message Passing Interface (MPI) system is a set of portable libraries which can be incorporated into programs in order to control parallel computation. Specifically it coordinates effort between nodes which do not share the same memory address space cf. OpenMP . Node \u00a7 In cluster computing, a node refers to a computational unit which is capable of operating independently of other parts of the cluster. As a minimum it consists of one (or more) processing cores , has its own memory, and runs its own operating system. OpenMP \u00a7 Open Multi-Processing. OpenMP supports multithreading, a process whereby a master thread generates a number of slave threads to run a task which is divided among them. OpenMP applies to processes running on shared memory platforms, i.e. jobs running on a single node . Hybrid applications may make use of both OpenMP and MPI . Process \u00a7 A process is a single instance of a program that is running on a computer. A single process may consist of many threads acting concurrently, and there may multiple instances of a program running as separate processes. Script \u00a7 A shell script enables users to list commands to be run consecutively by typing them into a text file instead of typing them out live. The first line of the script uses the shebang notation #! to designate the scripting language interpreter program to be used to interpret the commands, e.g. bash . Shebang \u00a7 \"Shebang\" is a common abbreviation for \"hash-bang\" \u2014 the character sequence #! \u2014 which is placed at the start of a script to specify the interpreter that should be used. When the shebang is found in the first line of a script, the program loader reads the rest of the line as the path to the required interpreter (e.g. /bin/bash is the usual path to the bash shell). The specified interpreter is then run with the path to the script passed as an argument to it. Shell \u00a7 A command line interpreter which provides an interface for users to type instructions to be interpreted by the operating system and display output via the monitor. Users type specific shell commands in order to run processes , e.g. ls to list directory contents. Son of Grid Engine (SGE or SoGE) \u00a7 The queuing system used by many cluster computing systems (including, currently, all the ones we run) to organise and schedule jobs . Once jobs are submitted to SGE, it takes care of executing them when the required resources become available. Job priority is subject to the local fair use policy. Sun Grid Engine (SGE) \u00a7 The original software written by Sun Microsystems that was later modified to make Son of Grid Engine (among other products, like Univa Grid Engine). Documentation may refer to Sun Grid Engine instead of Son of Grid Engine, and for most user purposes, the terms are interchangeable. Thread \u00a7 A thread refers to a serial computational process which can run on a single core . The number of threads generated by a parallel job may exceed the number of cores available though, in which case cores may alternate between running different threads. Threads are a software concept whereas cores are physical hardware.","title":"Research Computing Glossary"},{"location":"Wiki_Export/Research_Computing_Glossary/#bash","text":"A shell and scripting language, which is the default command processor on most Linux operating systems.","title":"Bash"},{"location":"Wiki_Export/Research_Computing_Glossary/#cluster","text":"A cluster consists of a set of computer nodes connected together over a fast local area network. A message passing protocol such as MPI allows individual nodes to work together as a single system.","title":"Cluster"},{"location":"Wiki_Export/Research_Computing_Glossary/#core","text":"A core refers to a processing unit within a node . A node may have multiple cores which can work in parallel on a single task, operating on the same data in memory. This kind of parallelism is coordinated using the OpenMP library. Alternatively, cores may work independently on different tasks. Cores may or may not also share cache.","title":"Core"},{"location":"Wiki_Export/Research_Computing_Glossary/#interconnect","text":"The interconnect is the network which is used to transfer data between nodes in a cluster . Different types of interconnect operate at different bandwidths and with different amounts of latency, which affects the suitability of a collection of nodes for jobs which use message passing ( MPI ).","title":"Interconnect"},{"location":"Wiki_Export/Research_Computing_Glossary/#job","text":"In the context of Batch Processing , a job refers to a computational task to be performed such as a single simulation or analysis.","title":"Job"},{"location":"Wiki_Export/Research_Computing_Glossary/#job-script","text":"A job script is essentially a special kind of script used to specify the parameters of a job. Users can specify the data to input, program to use, and the computing resources required. The job script is specified when a job is submitted to SGE, which reads lines starting with #$ .","title":"Job Script"},{"location":"Wiki_Export/Research_Computing_Glossary/#mpi","text":"The Message Passing Interface (MPI) system is a set of portable libraries which can be incorporated into programs in order to control parallel computation. Specifically it coordinates effort between nodes which do not share the same memory address space cf. OpenMP .","title":"MPI"},{"location":"Wiki_Export/Research_Computing_Glossary/#node","text":"In cluster computing, a node refers to a computational unit which is capable of operating independently of other parts of the cluster. As a minimum it consists of one (or more) processing cores , has its own memory, and runs its own operating system.","title":"Node"},{"location":"Wiki_Export/Research_Computing_Glossary/#openmp","text":"Open Multi-Processing. OpenMP supports multithreading, a process whereby a master thread generates a number of slave threads to run a task which is divided among them. OpenMP applies to processes running on shared memory platforms, i.e. jobs running on a single node . Hybrid applications may make use of both OpenMP and MPI .","title":"OpenMP"},{"location":"Wiki_Export/Research_Computing_Glossary/#process","text":"A process is a single instance of a program that is running on a computer. A single process may consist of many threads acting concurrently, and there may multiple instances of a program running as separate processes.","title":"Process"},{"location":"Wiki_Export/Research_Computing_Glossary/#script","text":"A shell script enables users to list commands to be run consecutively by typing them into a text file instead of typing them out live. The first line of the script uses the shebang notation #! to designate the scripting language interpreter program to be used to interpret the commands, e.g. bash .","title":"Script"},{"location":"Wiki_Export/Research_Computing_Glossary/#shebang","text":"\"Shebang\" is a common abbreviation for \"hash-bang\" \u2014 the character sequence #! \u2014 which is placed at the start of a script to specify the interpreter that should be used. When the shebang is found in the first line of a script, the program loader reads the rest of the line as the path to the required interpreter (e.g. /bin/bash is the usual path to the bash shell). The specified interpreter is then run with the path to the script passed as an argument to it.","title":"Shebang"},{"location":"Wiki_Export/Research_Computing_Glossary/#shell","text":"A command line interpreter which provides an interface for users to type instructions to be interpreted by the operating system and display output via the monitor. Users type specific shell commands in order to run processes , e.g. ls to list directory contents.","title":"Shell"},{"location":"Wiki_Export/Research_Computing_Glossary/#son-of-grid-engine-sge-or-soge","text":"The queuing system used by many cluster computing systems (including, currently, all the ones we run) to organise and schedule jobs . Once jobs are submitted to SGE, it takes care of executing them when the required resources become available. Job priority is subject to the local fair use policy.","title":"Son of Grid Engine (SGE or SoGE)"},{"location":"Wiki_Export/Research_Computing_Glossary/#sun-grid-engine-sge","text":"The original software written by Sun Microsystems that was later modified to make Son of Grid Engine (among other products, like Univa Grid Engine). Documentation may refer to Sun Grid Engine instead of Son of Grid Engine, and for most user purposes, the terms are interchangeable.","title":"Sun Grid Engine (SGE)"},{"location":"Wiki_Export/Research_Computing_Glossary/#thread","text":"A thread refers to a serial computational process which can run on a single core . The number of threads generated by a parallel job may exceed the number of cores available though, in which case cores may alternate between running different threads. Threads are a software concept whereas cores are physical hardware.","title":"Thread"},{"location":"Wiki_Export/Terms_and_Conditions/","text":"All use of Research Computing Platforms is subject to the UCL Computing Regulations . All users will be required to renew their account once per year. Users will receive a reminder one month prior to suspension of their Legion account sent to their Live@UCL e-mail address. Funding information will need to be provided upon application, and publication information upon renewal. Users are forbidden from performing production runs on login nodes. The Research Computing Platform Services Team reserve the right to suspend or ban without prior warning any use of the system which impairs its operation. With the exception of in cases where there is imminent harm or risk to the service, the Research Computing Platform Services Team will not access your files without permission. Official service notifications are sent to the legion-users (or the equivalent for other services) mailing list. Users are automatically subscribed to this list using their Live@UCL e-mail address and should read notices sent there. The Research Computing Platform Services Team reserve the right to suspend users' accounts, without notice, in the event of a user being the subject of any UCL disciplinary procedure, or where a user is found to be in breach of UCL\u2019s Computing Regulations or best practice guidelines regarding password management, as provided by Information Services Division. Users are required to acknowledge their use of Research Computing services in any publications describing research that has been conducted, in any part, using our services. This should be done according to the descriptions here . All support requests should be sent by e-mail to rc-support@ucl.ac.uk .","title":"Terms and Conditions of Use"},{"location":"Wiki_Export/User_Scripts/","text":"These are tools developed by either the Research Computing group or users of the services, which may be useful to others. If you have a tool which you think might be useful to others, please feel free to send it to rc-support@ucl.ac.uk . If we think it's appropriate, we'll give it a look over and possibly some polish, and add it to the list. These tools tend to be created for Legion in the first instance, so they may not all be appropriate on other systems. These are located in: /shared/ucl/apps/userscripts or can be used by loading the userscripts module: module load userscripts You should be able to obtain more information about these scripts by typing the name of the script followed by --help , for example: qexplain --help Script Description qexplain Prints the full error associated with a job in an error state. jobhist Shows recently finished jobs, along with when they finished and, optionally, other information about them. Displays the last 24 hours by default. nodesforjob Shows all the nodes that a currently-running job is running on, along with information on load, memory and swap being used. nodetypes Show a list of currently-available node types, including the number of cores and amount of RAM they have. (Nodes that are down will not be counted, so the numbers will fluctuate). to-grace, to-legion Copy files from Legion to Grace or vice versa. Uses login05 as the destination if copying to Legion. It will tar up the file/directory you give it, copy it to your home on the other machine and untar it again.","title":"User Scripts"},{"location":"Wiki_Export/X-Forwarding/","text":"X is a system and protocol that lets remote computers push interactive windows to your local computer over a network. We use a method known as X-Forwarding, together with an SSH client, to direct the network messages for X over the same connection you use for the command-line. The setup steps for getting this working on Windows, Linux, and macOS are each different, and we've put them below. Windows \u00a7 Windows doesn't natively have the ability to receive X windows, so you need to install an X server separately. There are a few choices; UCL has a site-wide license (covering UCL-owned and personal computers) for one called Exceed , which is pretty reliable and seems to handle 3D content well, but there's also Xming , which is free and open-source if that's a concern. Exceed is installed on all UCL's centrally-managed Windows computers. Installing Exceed \u00a7 Exceed comes in two parts: the main package, and the add-on that handles certain types of rendered 3D content. You can download both parts from the Exceed page in the UCL Software Database . First, install the main package, then the 3D package. Using PuTTY with Exceed \u00a7 When you run the Exceed program, it will automatically wait in the background until you run a remote application, so you only have to configure PuTTY to pass the data through. To do this, first fill in the details for your PuTTY connection as normal with the hostname and any other details you'd normally use to connect, and then, in the pane labelled \"Category\" on the left, click the \"+\" next to \"SSH\" and then select \"X11\". The main pane should change to one labelled \"Options controlling SSH X11 forwarding\". Check the box labelled \"Enable X11 Forwarding\". You can now click \"Open\" to start the connection, or you can return to the \"Session\" options to save this setup. macOS \u00a7 Like Windows, macOS doesn't come with an X server to receive X windows. The most commonly used X server for macOS is XQuartz . If you download and install that, you can follow the Linux instructions below. When you connect with X-Forwarding enabled, the XQuartz server program should start automatically, ready to present remote windows. Linux \u00a7 Almost all Linux versions that have a graphical desktop use an X server to provide it, so you don't have to install a separate one. You still have to set up your SSH client's connection to \"tunnel\" the X windows from the remote computer, though. You can do this by simply adding the -X option to your ssh command line, so for example to connect to Myriad with X-Forwarding: ssh -X ccaaxyz@myriad.rc.ucl.ac.uk To use X-Forwarding from outside UCL, you must either use the VPN, or use the SSH Gateway system, with the appropriate flags for both ssh steps, for example: [me@my_computer ~]$ ssh -X ccaaxyz@ssh-gateway.ucl.ac.uk [...] [ccaaxyz@ejp-gateway-01 ~]$ ssh -X ccaaxyz@myriad.rc.ucl.ac.uk Note This assumes you use a Linux distribution that uses Xorg as its display server. If your distribution uses Wayland instead, and you aren't sure how to make this work, please contact us , letting us know what version of which distribution you're using. Checking your Setup \u00a7 There are some simple programs on the system that use X, which can be used to check whether your setup is working correctly. xterm is a terminal emulator -- it presents a terminal much like you would already be using. glxgears is a small test/benchmark program for the 3D remote rendering capability. It presents a small set of animated gears. If these work, you have a working X connection. If not, you should see an error when you try to run them that may look something like: xterm: Xt error: Can't open display: Or: Error: couldn't open display (null) If you see these, please check you have followed all the appropriate steps above, and if you still have problems, contact rc-support@ucl.ac.uk for assistance.","title":"X-Forwarding"},{"location":"Wiki_Export/X-Forwarding/#windows","text":"Windows doesn't natively have the ability to receive X windows, so you need to install an X server separately. There are a few choices; UCL has a site-wide license (covering UCL-owned and personal computers) for one called Exceed , which is pretty reliable and seems to handle 3D content well, but there's also Xming , which is free and open-source if that's a concern. Exceed is installed on all UCL's centrally-managed Windows computers.","title":"Windows"},{"location":"Wiki_Export/X-Forwarding/#installing-exceed","text":"Exceed comes in two parts: the main package, and the add-on that handles certain types of rendered 3D content. You can download both parts from the Exceed page in the UCL Software Database . First, install the main package, then the 3D package.","title":"Installing Exceed"},{"location":"Wiki_Export/X-Forwarding/#using-putty-with-exceed","text":"When you run the Exceed program, it will automatically wait in the background until you run a remote application, so you only have to configure PuTTY to pass the data through. To do this, first fill in the details for your PuTTY connection as normal with the hostname and any other details you'd normally use to connect, and then, in the pane labelled \"Category\" on the left, click the \"+\" next to \"SSH\" and then select \"X11\". The main pane should change to one labelled \"Options controlling SSH X11 forwarding\". Check the box labelled \"Enable X11 Forwarding\". You can now click \"Open\" to start the connection, or you can return to the \"Session\" options to save this setup.","title":"Using PuTTY with Exceed"},{"location":"Wiki_Export/X-Forwarding/#macos","text":"Like Windows, macOS doesn't come with an X server to receive X windows. The most commonly used X server for macOS is XQuartz . If you download and install that, you can follow the Linux instructions below. When you connect with X-Forwarding enabled, the XQuartz server program should start automatically, ready to present remote windows.","title":"macOS"},{"location":"Wiki_Export/X-Forwarding/#linux","text":"Almost all Linux versions that have a graphical desktop use an X server to provide it, so you don't have to install a separate one. You still have to set up your SSH client's connection to \"tunnel\" the X windows from the remote computer, though. You can do this by simply adding the -X option to your ssh command line, so for example to connect to Myriad with X-Forwarding: ssh -X ccaaxyz@myriad.rc.ucl.ac.uk To use X-Forwarding from outside UCL, you must either use the VPN, or use the SSH Gateway system, with the appropriate flags for both ssh steps, for example: [me@my_computer ~]$ ssh -X ccaaxyz@ssh-gateway.ucl.ac.uk [...] [ccaaxyz@ejp-gateway-01 ~]$ ssh -X ccaaxyz@myriad.rc.ucl.ac.uk Note This assumes you use a Linux distribution that uses Xorg as its display server. If your distribution uses Wayland instead, and you aren't sure how to make this work, please contact us , letting us know what version of which distribution you're using.","title":"Linux"},{"location":"Wiki_Export/X-Forwarding/#checking-your-setup","text":"There are some simple programs on the system that use X, which can be used to check whether your setup is working correctly. xterm is a terminal emulator -- it presents a terminal much like you would already be using. glxgears is a small test/benchmark program for the 3D remote rendering capability. It presents a small set of animated gears. If these work, you have a working X connection. If not, you should see an error when you try to run them that may look something like: xterm: Xt error: Can't open display: Or: Error: couldn't open display (null) If you see these, please check you have followed all the appropriate steps above, and if you still have problems, contact rc-support@ucl.ac.uk for assistance.","title":"Checking your Setup"},{"location":"Wiki_Export/Background/Batch_Processing/","text":"An Introduction to Batch Processing \u00a7 When running jobs on Legion or Grace, users need to interact with the batch system. For users unfamiliar with HPC environments, this can be a way of working which is unfamiliar to them. What is a batch system? \u00a7 On a large, multi-user machine like Legion many users compete for relatively limited resources. There are two possible ways of organising access to this resource: Either allow everyone to run anything they want when they want but run the risk of people\u2019s jobs interfering with each other or else construct a system where users are allocated resources in turn. This is called a \"batch\" system. In a batch system, users submit their programs with a script to run them and a list of requirements and these jobs are run when resources are available. On Legion, the order jobs are run in is subject to a fair use policy which is discussed in the scheduling policy section. On other sites, users may be billed for their usage and most batch systems provide features for managing accounting in this scenario. When a user uses a batch system, they need to remember a number of important things. The first is that (with some exceptions) their jobs are not interactive. This means that a user must provide their application with inputs in advance (and if they are a developer design their program to operate in this manner). This means that some applications are not suitable for running in a batch system (visualisation for example). In most systems, each job is given a unique ID by the scheduler and this ID is used when interacting with jobs once they have been submitted. Once jobs have been submitted, users can log out and their jobs will execute even though they are not logged in. The second important thing to remember is that once a job has been submitted, a user has little control of when the job is actually run, because the time to completion (from submission) depends on how busy the machine is. It is therefore necessary for users to plan ahead and submit their jobs in a timely manner, rather than waiting until the last minute. Basic commands \u00a7 There are three basic commonly used commands in any batch system - one for submitting jobs, one for checking the status of jobs and one for deleting jobs. On Sun Grid Engine, these are qsub, qstat and qdel. qsub \u00a7 The qsub command submits your job to the batch queue. qsub myscript.sh You can override the settings in your script by specifying them on the command-line, so for example if you want to change the name of the job for this one instance of the job you can submit your script with: qsub -N NewName myscript.sh Or if you want to increase the wall-clock time to 24 hours: qsub -l h_rt=24:0:0 myscript.sh You can submit jobs with dependencies by using the -hold_jid option. For example, the command below submits a job that won't run until job 12345 has finished: qsub -hold_jid 12345 myscript.sh You may specify node type (see Resource Allocation section for more details) with the -ac allow= flags as below: qsub -ac allow=XYZ myscript.sh The example above would restrict the job to running on the older nodes. Note that for debugging purposes, it helps us if you have these options inside your jobscript rather than passed in on the command line, if possible. We can see your jobscript but not what command line you submitted with. qstat \u00a7 The qstat command shows the status of your jobs. By default, if you run it with no options, it shows only your jobs (and no-one else\u2019s). This makes it easier to keep track of your jobs. If you want to get more information on a particular job, note its job ID and then use the -f and -j flags to get full output about that job: `qstat -f -j 12345` If you see that your job is in Eqw state then an error occurred before your job could begin. You can see a truncated version of the error in the output of qstat -j - this is often enough to tell what the problem is if it is a file or directory not found. You can get the full error with qexplain . qexplain 12345 qdel \u00a7 The qdel command lets you delete a job from the queue. You need to provide qdel with a job ID like so: qdel 12345 You can delete all your jobs with: qdel '*' More Information \u00a7 If you wish to learn about additional commands, please run the command \"man qstat\" and take note of the commands shown in the \"SEE ALSO\" section of the manual page. Exit the manual page and then run the \"man\" command on those. If you cannot find the information you need in the man pages, then contact us at rc-support@ucl.ac.uk for assistance.","title":"Batch Processing"},{"location":"Wiki_Export/Background/Batch_Processing/#an-introduction-to-batch-processing","text":"When running jobs on Legion or Grace, users need to interact with the batch system. For users unfamiliar with HPC environments, this can be a way of working which is unfamiliar to them.","title":"An Introduction to Batch Processing"},{"location":"Wiki_Export/Background/Batch_Processing/#what-is-a-batch-system","text":"On a large, multi-user machine like Legion many users compete for relatively limited resources. There are two possible ways of organising access to this resource: Either allow everyone to run anything they want when they want but run the risk of people\u2019s jobs interfering with each other or else construct a system where users are allocated resources in turn. This is called a \"batch\" system. In a batch system, users submit their programs with a script to run them and a list of requirements and these jobs are run when resources are available. On Legion, the order jobs are run in is subject to a fair use policy which is discussed in the scheduling policy section. On other sites, users may be billed for their usage and most batch systems provide features for managing accounting in this scenario. When a user uses a batch system, they need to remember a number of important things. The first is that (with some exceptions) their jobs are not interactive. This means that a user must provide their application with inputs in advance (and if they are a developer design their program to operate in this manner). This means that some applications are not suitable for running in a batch system (visualisation for example). In most systems, each job is given a unique ID by the scheduler and this ID is used when interacting with jobs once they have been submitted. Once jobs have been submitted, users can log out and their jobs will execute even though they are not logged in. The second important thing to remember is that once a job has been submitted, a user has little control of when the job is actually run, because the time to completion (from submission) depends on how busy the machine is. It is therefore necessary for users to plan ahead and submit their jobs in a timely manner, rather than waiting until the last minute.","title":"What is a batch system?"},{"location":"Wiki_Export/Background/Batch_Processing/#basic-commands","text":"There are three basic commonly used commands in any batch system - one for submitting jobs, one for checking the status of jobs and one for deleting jobs. On Sun Grid Engine, these are qsub, qstat and qdel.","title":"Basic commands"},{"location":"Wiki_Export/Background/Batch_Processing/#qsub","text":"The qsub command submits your job to the batch queue. qsub myscript.sh You can override the settings in your script by specifying them on the command-line, so for example if you want to change the name of the job for this one instance of the job you can submit your script with: qsub -N NewName myscript.sh Or if you want to increase the wall-clock time to 24 hours: qsub -l h_rt=24:0:0 myscript.sh You can submit jobs with dependencies by using the -hold_jid option. For example, the command below submits a job that won't run until job 12345 has finished: qsub -hold_jid 12345 myscript.sh You may specify node type (see Resource Allocation section for more details) with the -ac allow= flags as below: qsub -ac allow=XYZ myscript.sh The example above would restrict the job to running on the older nodes. Note that for debugging purposes, it helps us if you have these options inside your jobscript rather than passed in on the command line, if possible. We can see your jobscript but not what command line you submitted with.","title":"qsub"},{"location":"Wiki_Export/Background/Batch_Processing/#qstat","text":"The qstat command shows the status of your jobs. By default, if you run it with no options, it shows only your jobs (and no-one else\u2019s). This makes it easier to keep track of your jobs. If you want to get more information on a particular job, note its job ID and then use the -f and -j flags to get full output about that job: `qstat -f -j 12345` If you see that your job is in Eqw state then an error occurred before your job could begin. You can see a truncated version of the error in the output of qstat -j - this is often enough to tell what the problem is if it is a file or directory not found. You can get the full error with qexplain . qexplain 12345","title":"qstat"},{"location":"Wiki_Export/Background/Batch_Processing/#qdel","text":"The qdel command lets you delete a job from the queue. You need to provide qdel with a job ID like so: qdel 12345 You can delete all your jobs with: qdel '*'","title":"qdel"},{"location":"Wiki_Export/Background/Batch_Processing/#more-information","text":"If you wish to learn about additional commands, please run the command \"man qstat\" and take note of the commands shown in the \"SEE ALSO\" section of the manual page. Exit the manual page and then run the \"man\" command on those. If you cannot find the information you need in the man pages, then contact us at rc-support@ucl.ac.uk for assistance.","title":"More Information"},{"location":"Wiki_Export/Background/Cluster_Computing/","text":"Cluster Computing at UCL \u00a7 UCL has a number of centrally-funded compute cluster facilities available, aimed at supporting all types of research at UCL. Legion , a mixed-use cluster hosted in UCL's Bloomsbury datacentres. Myriad , another mixed-use cluster hosted in UCL's portion of the Virtus datacentre in Slough. Grace , a cluster designed for medium-scale parallel workloads, hosted in UCL's portion of the Virtus datacentre in Slough. What is a cluster? \u00a7 A cluster is a large array of PCs or servers, referred to as nodes , networked together and often with a shared filesystem. Commonly in a shared cluster facility, a scheduler is used to take work from users and assign it to servers or groups of servers to be run as discrete jobs . Jobs can use more than one core or even more than one node simultaneously, communicating over special, faster types of network where available, to allow many cores to divide up the work. So is this the same thing as a supercomputer? \u00a7 Sort of. The term \"supercomputer\" nowadays usually refers to a large cluster designed to be able to run a single job in parallel over the whole machine, with an extremely fast network. In the past it was used as a catch-all term for a lot of computing installations more architecturally complex and power-hungry than an ordinary desktop computer or server. Why would a user choose to use a cluster? \u00a7 Clusters allow the use of many nodes simultaneously, without the user having to be present or to have a laptop or desktop computer in their office running all the time. This means that users can both run large parallel jobs and large numbers of serial jobs providing them with the ability to run jobs they cannot run locally, or get through work-loads that would be impractical on local resources. The clusters also have some nodes with more specialist hardware and some with extremely large quantities of RAM, allowing jobs that would be completely impossible on ordinary office machines. When should you not use a cluster? \u00a7 The vast majority of clusters run the Linux operating system rather than Windows. The central UCL clusters only run Linux, so if your applications only run on Windows, this service is not suitable for you. The available clusters are currently only x86_64-based (a.k.a. amd64, em64t), so if you need an alternative processor architecture (such as ARM or POWER), these are not suitable. Also, as these clusters are largely designed for work structured around using scripts, if your applications require you to enter commands while they're running, you will not be able to make full use of the service. (Some applications often look like they do but don't in practice, contact us if you're not sure.) What if I need more compute time/longer jobs/more storage? \u00a7 We recognise that researchers may sometimes require resources than the basic all-purpose allocation. Options for acquiring additional resources on a short or long term basis are described on the Additional Resource Requests page. Do I have to pay for any of this? \u00a7 The central UCL clusters are free at point of use for UCL researchers; you don't pay for the compute time or storage you use. Other compute resources you may have to pay for. How do I get help? \u00a7 Any questions about the central UCL clusters should go to the Research Computing Support Team at rc-support@ucl.ac.uk . The team will respond to your question as quickly as possible, giving priority to requests that are deemed urgent on the basis of the information provided. Available 9:30am to 4:30pm, Monday to Friday, except on Bank Holidays and College Closures. We aim to provide you with a useful response within 24 hours. Please do not email individuals unless you are explicitly asked to do so; always use the rc-support email address provided. What if I need something totally different? \u00a7 Let us know your requirements and we may be able to suggest alternative computing facilities that you may be eligible to use. It will also allow us to take your needs into consideration for future acquisitions.","title":"Cluster Computing"},{"location":"Wiki_Export/Background/Cluster_Computing/#cluster-computing-at-ucl","text":"UCL has a number of centrally-funded compute cluster facilities available, aimed at supporting all types of research at UCL. Legion , a mixed-use cluster hosted in UCL's Bloomsbury datacentres. Myriad , another mixed-use cluster hosted in UCL's portion of the Virtus datacentre in Slough. Grace , a cluster designed for medium-scale parallel workloads, hosted in UCL's portion of the Virtus datacentre in Slough.","title":"Cluster Computing at UCL"},{"location":"Wiki_Export/Background/Cluster_Computing/#what-is-a-cluster","text":"A cluster is a large array of PCs or servers, referred to as nodes , networked together and often with a shared filesystem. Commonly in a shared cluster facility, a scheduler is used to take work from users and assign it to servers or groups of servers to be run as discrete jobs . Jobs can use more than one core or even more than one node simultaneously, communicating over special, faster types of network where available, to allow many cores to divide up the work.","title":"What is a cluster?"},{"location":"Wiki_Export/Background/Cluster_Computing/#so-is-this-the-same-thing-as-a-supercomputer","text":"Sort of. The term \"supercomputer\" nowadays usually refers to a large cluster designed to be able to run a single job in parallel over the whole machine, with an extremely fast network. In the past it was used as a catch-all term for a lot of computing installations more architecturally complex and power-hungry than an ordinary desktop computer or server.","title":"So is this the same thing as a supercomputer?"},{"location":"Wiki_Export/Background/Cluster_Computing/#why-would-a-user-choose-to-use-a-cluster","text":"Clusters allow the use of many nodes simultaneously, without the user having to be present or to have a laptop or desktop computer in their office running all the time. This means that users can both run large parallel jobs and large numbers of serial jobs providing them with the ability to run jobs they cannot run locally, or get through work-loads that would be impractical on local resources. The clusters also have some nodes with more specialist hardware and some with extremely large quantities of RAM, allowing jobs that would be completely impossible on ordinary office machines.","title":"Why would a user choose to use a cluster?"},{"location":"Wiki_Export/Background/Cluster_Computing/#when-should-you-not-use-a-cluster","text":"The vast majority of clusters run the Linux operating system rather than Windows. The central UCL clusters only run Linux, so if your applications only run on Windows, this service is not suitable for you. The available clusters are currently only x86_64-based (a.k.a. amd64, em64t), so if you need an alternative processor architecture (such as ARM or POWER), these are not suitable. Also, as these clusters are largely designed for work structured around using scripts, if your applications require you to enter commands while they're running, you will not be able to make full use of the service. (Some applications often look like they do but don't in practice, contact us if you're not sure.)","title":"When should you not use a cluster?"},{"location":"Wiki_Export/Background/Cluster_Computing/#what-if-i-need-more-compute-timelonger-jobsmore-storage","text":"We recognise that researchers may sometimes require resources than the basic all-purpose allocation. Options for acquiring additional resources on a short or long term basis are described on the Additional Resource Requests page.","title":"What if I need more compute time/longer jobs/more storage?"},{"location":"Wiki_Export/Background/Cluster_Computing/#do-i-have-to-pay-for-any-of-this","text":"The central UCL clusters are free at point of use for UCL researchers; you don't pay for the compute time or storage you use. Other compute resources you may have to pay for.","title":"Do I have to pay for any of this?"},{"location":"Wiki_Export/Background/Cluster_Computing/#how-do-i-get-help","text":"Any questions about the central UCL clusters should go to the Research Computing Support Team at rc-support@ucl.ac.uk . The team will respond to your question as quickly as possible, giving priority to requests that are deemed urgent on the basis of the information provided. Available 9:30am to 4:30pm, Monday to Friday, except on Bank Holidays and College Closures. We aim to provide you with a useful response within 24 hours. Please do not email individuals unless you are explicitly asked to do so; always use the rc-support email address provided.","title":"How do I get help?"},{"location":"Wiki_Export/Background/Cluster_Computing/#what-if-i-need-something-totally-different","text":"Let us know your requirements and we may be able to suggest alternative computing facilities that you may be eligible to use. It will also allow us to take your needs into consideration for future acquisitions.","title":"What if I need something totally different?"},{"location":"Wiki_Export/Background/The_Scheduler/","text":"Error Article Removed Pending Rewrite","title":"How the scheduler works"}]}