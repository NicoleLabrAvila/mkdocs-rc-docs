{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"howto/","text":"How do I? \u00b6 I have an account, now: How do I log in? \u00b6 Logging in is most straightforward if you are inside the UCL firewall. If you are logging in from home or other external networks then you first have to get on to the UCL network . Linux / Unix / Mac OS X \u00b6 Use the terminal and type the below command to secure shell (ssh) into the machine you wish to access. Replace <your_UCL_user_id> with your central UCL username, and <system_name> with the name of the machine you want to log in to, eg. legion , grace , aristotle . ssh <your_UCL_user_id>@<system_name>.rc.ucl.ac.uk Windows \u00b6 On Windows you need something that will give you a suitable terminal and ssh - usually PuTTY, although you could also use Cygwin if you wanted a full Linux-like environment. Using PuTTY \u00b6 PuTTY is a common SSH client on Windows and is available on Desktop@UCL. You can find it under Start > All Programs > Applications O-P > PuTTY You will need to create an entry for the host you are connecting to with the settings below. If you want to save your settings, give them an easily-identifiable name in the \"Saved Sessions\" box and press \"Save\". Then you can select it and \"Load\" next time you use PuTTY. In newer versions of PuTTY, it looks like this. TODO: new putty You will then be asked to enter your username and password. Only enter your username, not @legion.rc.ucl.ac.uk . The password field will remain entirely blank when you type in to it - it does not show placeholders to indicate you have typed something. Logging in from outside the UCL firewall \u00b6 You will need to either use the UCL Virtual Private Network or ssh in to UCL's gateway socrates.ucl.ac.uk first. From Socrates you can then ssh in to our systems by typing ssh <your_UCL_user_id>@<system_name>.rc.ucl.ac.uk . Advanced: If you find you need to go via Socrates often, you can set up this jump automatically, see Single-step logins using tunnelling Login problems \u00b6 If you experience difficulties with your login, please make sure that you are typing your UCL user ID and your password correctly. If you have recently updated your password, it takes some hours to propagate to all UCL systems. If you still cannot get access but can access other UCL services like Socrates, please contact us on rc-support@ucl.ac.uk. Your account may have expired, or you may have gone over quota. If you cannot access anything, please see UCL MyAccount - you may need to request a password reset from the Service Desk. If you get a host key error message, you will need to delete old host keys. TODO: details How do I transfer data onto the system? \u00b6 You can transfer data to and from our systems using any program capable of using the Secure Copy (SCP) protocol. This uses the same SSH system as you use to log in to a command line session, but then transfers data over it. This means that if you can use SSH to connect to a system, you can usually use SCP to transfer files to it. Copying files using Linux or Mac OS X \u00b6 You can use the command-line utilities scp, sftp or rsync to copy your data about. You can also use a graphical client (Transmit, CyberDuck, FileZilla). scp \u00b6 This will copy a data file from somewhere on your local machine to a specified location on the remote machine (Legion, Grace etc). scp <local_data_file> <remote_user_id>@<remote_hostname>:<remote_path> # Example: copy myfile from your local current directory into Scratch on Legion scp myfile ccxxxxx@legion.rc.ucl.ac.uk:~/Scratch/ This will do the reverse, copying from the remote machine to your local machine. (This is still run from your local machine). scp <remote_user_id>@<remote_hostname>:<remote_path><remote_data_file> <local_path> # Example: copy myfile from Legion into the Backups directory in your local current directory scp ccxxxxx@legion.rc.ucl.ac.uk:~/Scratch/myfile Backups/ sftp \u00b6 You can use sftp to log in to the remote machine, navigate through directories and use put and get to copy files from and to your local machine. lcd and lls are local equivalents of cd and ls so you can navigate through your local directories as you go. sftp <remote_user_id>@<remote_hostname> cd <remote_path> get <remote_file> lcd <local_path> put <local_file> # Example: download a copy of file1 into your local current directory, # change local directory and upload a copy of file2 sftp ccxxxxx@legion.rc.ucl.ac.uk cd Scratch/files get file1 lcd ../files_to_upload put file2 rsync \u00b6 Rsync is used to remotely synchronise directories, so can be used to only copy files which have changed. Have a look at man rsync as there are many options. Copying files using Windows and WinSCP \u00b6 WinSCP is a graphical client that you can use for scp or sftp. The login/create new session screen will open if this is the first time you are using WinSCP. You can choose SFTP or SCP as the file protocol. If you have an unstable connection with one, you may wish to try the other. SCP is probably generally better. Fill in the hostname of the machine you wish to connect to, your username and password. Click Save and give your settings a useful name. You'll then be shown your list of Stored sessions, which will have the one you just created. Select the session and click Login. Transferring files from outside the UCL firewall \u00b6 As when logging in, when you are outside the UCL firewall you will need a method to connect inside it before you copy files. (You do not want to be copying files on to Socrates and then on to our systems - this is slow, unnecessary, and it means you need space available on Socrates too). You can use the UCL Virtual Private Network and scp direct to our systems or you can do some form of ssh tunnelling. Single-step logins using tunnelling \u00b6 Linux / Unix / Mac OS X \u00b6 Inside your ~/.ssh directory on your local machine, add the below to your config file (or create a file called config if you don't already have one). Generically, it should be of this form where <name> can be anything you want to call this entry. Host <name> User <remote_user_id> HostName <remote_hostname> proxyCommand ssh -W <remote_hostname>:22 <remote_user_id>@socrates.ucl.ac.uk This causes the commands you type in your client to be forwarded on over a secure channel to the specified remote host. Here are some examples - you can have as many of these as you need in your config file. Host legion User ccxxxxx HostName legion.rc.ucl.ac.uk proxyCommand ssh -W legion.rc.ucl.ac.uk:22 ccxxxxx@socrates.ucl.ac.uk Host login05 User ccxxxxx HostName login05.external.legion.ucl.ac.uk proxyCommand ssh -W login05.external.legion.ucl.ac.uk:22 ccxxxxx@socrates.ucl.ac.uk Host aristotle User ccxxxxx HostName aristotle.rc.ucl.ac.uk proxyCommand ssh -W aristotle.rc.ucl.ac.uk:22 ccxxxxx@socrates.ucl.ac.uk You can now just type ssh legion or scp file1 aristotle:~ and you will go through Socrates. You'll be asked for login details twice since you're logging in to two machines, Socrates and your endpoint. Windows - WinSCP \u00b6 WinSCP can also set up SSH tunnels. Create a new session as before, and tick the Advanced options box in the bottom left corner. Select Connection > Tunnel from the left pane. Tick the Connect through SSH tunnel box and enter the hostname of the gateway you are tunnelling through, for example socrates.ucl.ac.uk Fill in your username and password for that host. (Central UCL ones for Socrates). Select Session from the left pane and fill in the hostname you want to end up on after the tunnel. Fill in your username and password for that host and set the file protocol to SCP. Save your settings with a useful name. Windows - PuTTY \u00b6 You can use PuTTY for tunnelling when you just want a single-step login and not a file transfer. Managing your quota \u00b6 How do I submit a job to the scheduler? \u00b6 To submit a job to the scheduler you need to write a jobscript that contains the resources the job is asking for and the actual commands you want to run. This jobscript is then submitted using the qsub command. qsub myjobscript It will be put in to the queue and will begin running on the compute nodes at some point later when it has been allocated resources. Passing in qsub options on the command line \u00b6 The #$ lines in your jobscript are options to qsub. It will take each line which has #$ as the first two characters and use the contents beyond that as an option. You can also pass options directly to the qsub command and this will override the settings in your script. This can be useful if you are scripting your job submissions in more complicated ways. For example, if you want to change the name of the job for this one instance of the job you can submit your script with: qsub -N NewName myscript.sh Or if you want to increase the wall-clock time to 24 hours: qsub -l h_rt=24:0:0 myscript.sh You can submit jobs with dependencies by using the -hold_jid option. For example, the command below submits a job that won't run until job 12345 has finished: qsub -hold_jid 12345 myscript.sh You may specify node type with the -ac allow= flags as below: qsub -ac allow=XYZ myscript.sh That would restrict the job to running on nodes of type X, Y or Z (the older Legion nodes). Note that for debugging purposes, it helps us if you have these options inside your jobscript rather than passed in on the command line whenever possible. We (and you) can see the exact jobscript that was submitted for every job that ran but not what command line options you submitted it with. Checking your previous jobscripts \u00b6 If you want to check what you submitted for a specific job ID, you can do it with the scriptfor utility. scriptfor 12345 As mentioned above, this will not show any command line options you passed in. How do I monitor a job? \u00b6 qstat \u00b6 The qstat command shows the status of your jobs. By default, if you run it with no options, it shows only your jobs (and no-one else\u2019s). This makes it easier to keep track of your jobs. The output will look something like this: job-ID prior name user state submit/start at queue slots ja-task-ID ----------------------------------------------------------------------------------------------------------------- 123454 2.00685 DI_m3 ccxxxxx Eqw 10/13/2017 15:29:11 12 123456 2.00685 DI_m3 ccxxxxx r 10/13/2017 15:29:11 Yorick@node-x02e-006 24 123457 2.00398 DI_m2 ucappka qw 10/12/2017 14:42:12 1 This shows you the job ID, the numeric priority the scheduler has assigned to the job, the name you have given the job, your username, the state the job is in, the date and time it was submitted at (or started at, if it has begun), the head node of the job, the number of 'slots' it is taking up, and if it is an array job the last column shows the task ID. The queue name ( Yorick here) is generally not useful. The head node name ( node-x02e-006 ) is useful - the node-x part tells you this is an X-type node. If you want to get more information on a particular job, note its job ID and then use the -f and -j flags to get full output about that job. Most of this information is not very useful. qstat -f -j 12345 Job states \u00b6 qw : queueing, waiting r : running Rq : a pre-job check on a node failed and this job was put back in the queue Rr : this job was rescheduled but is now running on a new node Eqw : there was an error in this jobscript. This will not run. t : this job is being transferred dr : this job is being deleted Many jobs cycling between Rq and Rr generally means there is a dodgy compute node which is failing pre-job checks, but is free so everything tries to run there. In this case, let us know and we will investigate. If a job stays in t or dr state for a long time, the node it was on is likely to be unresponsive - again let us know and we'll investigate. A job in Eqw will remain in that state until you delete it - you should first have a look at what the error was with qexplain . qexplain \u00b6 This is a utility to show you the non-truncated error reported by your job. qstat -j will show you a truncated version near the bottom of the output. qexplain 123454 qdel \u00b6 You use qdel to delete a job from the queue. qdel 123454 You can delete all your jobs at once: qdel '*' More scheduler commands \u00b6 Have a look at man qstat and note the commands shown in the SEE ALSO section of the manual page. Exit the manual page and then look at the man pages for those. (You will not be able to run all commands). nodesforjob \u00b6 This is a utility that shows you the current How do I run a graphical program? \u00b6","title":"How do I?"},{"location":"howto/#how-do-i","text":"I have an account, now:","title":"How do I?"},{"location":"howto/#how-do-i-log-in","text":"Logging in is most straightforward if you are inside the UCL firewall. If you are logging in from home or other external networks then you first have to get on to the UCL network .","title":"How do I log in?"},{"location":"howto/#linux-unix-mac-os-x","text":"Use the terminal and type the below command to secure shell (ssh) into the machine you wish to access. Replace <your_UCL_user_id> with your central UCL username, and <system_name> with the name of the machine you want to log in to, eg. legion , grace , aristotle . ssh <your_UCL_user_id>@<system_name>.rc.ucl.ac.uk","title":"Linux / Unix / Mac OS X"},{"location":"howto/#windows","text":"On Windows you need something that will give you a suitable terminal and ssh - usually PuTTY, although you could also use Cygwin if you wanted a full Linux-like environment.","title":"Windows"},{"location":"howto/#using-putty","text":"PuTTY is a common SSH client on Windows and is available on Desktop@UCL. You can find it under Start > All Programs > Applications O-P > PuTTY You will need to create an entry for the host you are connecting to with the settings below. If you want to save your settings, give them an easily-identifiable name in the \"Saved Sessions\" box and press \"Save\". Then you can select it and \"Load\" next time you use PuTTY. In newer versions of PuTTY, it looks like this. TODO: new putty You will then be asked to enter your username and password. Only enter your username, not @legion.rc.ucl.ac.uk . The password field will remain entirely blank when you type in to it - it does not show placeholders to indicate you have typed something.","title":"Using PuTTY"},{"location":"howto/#logging-in-from-outside-the-ucl-firewall","text":"You will need to either use the UCL Virtual Private Network or ssh in to UCL's gateway socrates.ucl.ac.uk first. From Socrates you can then ssh in to our systems by typing ssh <your_UCL_user_id>@<system_name>.rc.ucl.ac.uk . Advanced: If you find you need to go via Socrates often, you can set up this jump automatically, see Single-step logins using tunnelling","title":"Logging in from outside the UCL firewall"},{"location":"howto/#login-problems","text":"If you experience difficulties with your login, please make sure that you are typing your UCL user ID and your password correctly. If you have recently updated your password, it takes some hours to propagate to all UCL systems. If you still cannot get access but can access other UCL services like Socrates, please contact us on rc-support@ucl.ac.uk. Your account may have expired, or you may have gone over quota. If you cannot access anything, please see UCL MyAccount - you may need to request a password reset from the Service Desk. If you get a host key error message, you will need to delete old host keys. TODO: details","title":"Login problems"},{"location":"howto/#how-do-i-transfer-data-onto-the-system","text":"You can transfer data to and from our systems using any program capable of using the Secure Copy (SCP) protocol. This uses the same SSH system as you use to log in to a command line session, but then transfers data over it. This means that if you can use SSH to connect to a system, you can usually use SCP to transfer files to it.","title":"How do I transfer data onto the system?"},{"location":"howto/#copying-files-using-linux-or-mac-os-x","text":"You can use the command-line utilities scp, sftp or rsync to copy your data about. You can also use a graphical client (Transmit, CyberDuck, FileZilla).","title":"Copying files using Linux or Mac OS X"},{"location":"howto/#scp","text":"This will copy a data file from somewhere on your local machine to a specified location on the remote machine (Legion, Grace etc). scp <local_data_file> <remote_user_id>@<remote_hostname>:<remote_path> # Example: copy myfile from your local current directory into Scratch on Legion scp myfile ccxxxxx@legion.rc.ucl.ac.uk:~/Scratch/ This will do the reverse, copying from the remote machine to your local machine. (This is still run from your local machine). scp <remote_user_id>@<remote_hostname>:<remote_path><remote_data_file> <local_path> # Example: copy myfile from Legion into the Backups directory in your local current directory scp ccxxxxx@legion.rc.ucl.ac.uk:~/Scratch/myfile Backups/","title":"scp"},{"location":"howto/#sftp","text":"You can use sftp to log in to the remote machine, navigate through directories and use put and get to copy files from and to your local machine. lcd and lls are local equivalents of cd and ls so you can navigate through your local directories as you go. sftp <remote_user_id>@<remote_hostname> cd <remote_path> get <remote_file> lcd <local_path> put <local_file> # Example: download a copy of file1 into your local current directory, # change local directory and upload a copy of file2 sftp ccxxxxx@legion.rc.ucl.ac.uk cd Scratch/files get file1 lcd ../files_to_upload put file2","title":"sftp"},{"location":"howto/#rsync","text":"Rsync is used to remotely synchronise directories, so can be used to only copy files which have changed. Have a look at man rsync as there are many options.","title":"rsync"},{"location":"howto/#copying-files-using-windows-and-winscp","text":"WinSCP is a graphical client that you can use for scp or sftp. The login/create new session screen will open if this is the first time you are using WinSCP. You can choose SFTP or SCP as the file protocol. If you have an unstable connection with one, you may wish to try the other. SCP is probably generally better. Fill in the hostname of the machine you wish to connect to, your username and password. Click Save and give your settings a useful name. You'll then be shown your list of Stored sessions, which will have the one you just created. Select the session and click Login.","title":"Copying files using Windows and WinSCP"},{"location":"howto/#transferring-files-from-outside-the-ucl-firewall","text":"As when logging in, when you are outside the UCL firewall you will need a method to connect inside it before you copy files. (You do not want to be copying files on to Socrates and then on to our systems - this is slow, unnecessary, and it means you need space available on Socrates too). You can use the UCL Virtual Private Network and scp direct to our systems or you can do some form of ssh tunnelling.","title":"Transferring files from outside the UCL firewall"},{"location":"howto/#single-step-logins-using-tunnelling","text":"","title":"Single-step logins using tunnelling"},{"location":"howto/#linux-unix-mac-os-x_1","text":"Inside your ~/.ssh directory on your local machine, add the below to your config file (or create a file called config if you don't already have one). Generically, it should be of this form where <name> can be anything you want to call this entry. Host <name> User <remote_user_id> HostName <remote_hostname> proxyCommand ssh -W <remote_hostname>:22 <remote_user_id>@socrates.ucl.ac.uk This causes the commands you type in your client to be forwarded on over a secure channel to the specified remote host. Here are some examples - you can have as many of these as you need in your config file. Host legion User ccxxxxx HostName legion.rc.ucl.ac.uk proxyCommand ssh -W legion.rc.ucl.ac.uk:22 ccxxxxx@socrates.ucl.ac.uk Host login05 User ccxxxxx HostName login05.external.legion.ucl.ac.uk proxyCommand ssh -W login05.external.legion.ucl.ac.uk:22 ccxxxxx@socrates.ucl.ac.uk Host aristotle User ccxxxxx HostName aristotle.rc.ucl.ac.uk proxyCommand ssh -W aristotle.rc.ucl.ac.uk:22 ccxxxxx@socrates.ucl.ac.uk You can now just type ssh legion or scp file1 aristotle:~ and you will go through Socrates. You'll be asked for login details twice since you're logging in to two machines, Socrates and your endpoint.","title":"Linux / Unix / Mac OS X"},{"location":"howto/#windows-winscp","text":"WinSCP can also set up SSH tunnels. Create a new session as before, and tick the Advanced options box in the bottom left corner. Select Connection > Tunnel from the left pane. Tick the Connect through SSH tunnel box and enter the hostname of the gateway you are tunnelling through, for example socrates.ucl.ac.uk Fill in your username and password for that host. (Central UCL ones for Socrates). Select Session from the left pane and fill in the hostname you want to end up on after the tunnel. Fill in your username and password for that host and set the file protocol to SCP. Save your settings with a useful name.","title":"Windows - WinSCP"},{"location":"howto/#windows-putty","text":"You can use PuTTY for tunnelling when you just want a single-step login and not a file transfer.","title":"Windows - PuTTY"},{"location":"howto/#managing-your-quota","text":"","title":"Managing your quota"},{"location":"howto/#how-do-i-submit-a-job-to-the-scheduler","text":"To submit a job to the scheduler you need to write a jobscript that contains the resources the job is asking for and the actual commands you want to run. This jobscript is then submitted using the qsub command. qsub myjobscript It will be put in to the queue and will begin running on the compute nodes at some point later when it has been allocated resources.","title":"How do I submit a job to the scheduler?"},{"location":"howto/#passing-in-qsub-options-on-the-command-line","text":"The #$ lines in your jobscript are options to qsub. It will take each line which has #$ as the first two characters and use the contents beyond that as an option. You can also pass options directly to the qsub command and this will override the settings in your script. This can be useful if you are scripting your job submissions in more complicated ways. For example, if you want to change the name of the job for this one instance of the job you can submit your script with: qsub -N NewName myscript.sh Or if you want to increase the wall-clock time to 24 hours: qsub -l h_rt=24:0:0 myscript.sh You can submit jobs with dependencies by using the -hold_jid option. For example, the command below submits a job that won't run until job 12345 has finished: qsub -hold_jid 12345 myscript.sh You may specify node type with the -ac allow= flags as below: qsub -ac allow=XYZ myscript.sh That would restrict the job to running on nodes of type X, Y or Z (the older Legion nodes). Note that for debugging purposes, it helps us if you have these options inside your jobscript rather than passed in on the command line whenever possible. We (and you) can see the exact jobscript that was submitted for every job that ran but not what command line options you submitted it with.","title":"Passing in qsub options on the command line"},{"location":"howto/#checking-your-previous-jobscripts","text":"If you want to check what you submitted for a specific job ID, you can do it with the scriptfor utility. scriptfor 12345 As mentioned above, this will not show any command line options you passed in.","title":"Checking your previous jobscripts"},{"location":"howto/#how-do-i-monitor-a-job","text":"","title":"How do I monitor a job?"},{"location":"howto/#qstat","text":"The qstat command shows the status of your jobs. By default, if you run it with no options, it shows only your jobs (and no-one else\u2019s). This makes it easier to keep track of your jobs. The output will look something like this: job-ID prior name user state submit/start at queue slots ja-task-ID ----------------------------------------------------------------------------------------------------------------- 123454 2.00685 DI_m3 ccxxxxx Eqw 10/13/2017 15:29:11 12 123456 2.00685 DI_m3 ccxxxxx r 10/13/2017 15:29:11 Yorick@node-x02e-006 24 123457 2.00398 DI_m2 ucappka qw 10/12/2017 14:42:12 1 This shows you the job ID, the numeric priority the scheduler has assigned to the job, the name you have given the job, your username, the state the job is in, the date and time it was submitted at (or started at, if it has begun), the head node of the job, the number of 'slots' it is taking up, and if it is an array job the last column shows the task ID. The queue name ( Yorick here) is generally not useful. The head node name ( node-x02e-006 ) is useful - the node-x part tells you this is an X-type node. If you want to get more information on a particular job, note its job ID and then use the -f and -j flags to get full output about that job. Most of this information is not very useful. qstat -f -j 12345","title":"qstat"},{"location":"howto/#job-states","text":"qw : queueing, waiting r : running Rq : a pre-job check on a node failed and this job was put back in the queue Rr : this job was rescheduled but is now running on a new node Eqw : there was an error in this jobscript. This will not run. t : this job is being transferred dr : this job is being deleted Many jobs cycling between Rq and Rr generally means there is a dodgy compute node which is failing pre-job checks, but is free so everything tries to run there. In this case, let us know and we will investigate. If a job stays in t or dr state for a long time, the node it was on is likely to be unresponsive - again let us know and we'll investigate. A job in Eqw will remain in that state until you delete it - you should first have a look at what the error was with qexplain .","title":"Job states"},{"location":"howto/#qexplain","text":"This is a utility to show you the non-truncated error reported by your job. qstat -j will show you a truncated version near the bottom of the output. qexplain 123454","title":"qexplain"},{"location":"howto/#qdel","text":"You use qdel to delete a job from the queue. qdel 123454 You can delete all your jobs at once: qdel '*'","title":"qdel"},{"location":"howto/#more-scheduler-commands","text":"Have a look at man qstat and note the commands shown in the SEE ALSO section of the manual page. Exit the manual page and then look at the man pages for those. (You will not be able to run all commands).","title":"More scheduler commands"},{"location":"howto/#nodesforjob","text":"This is a utility that shows you the current","title":"nodesforjob"},{"location":"howto/#how-do-i-run-a-graphical-program","text":"","title":"How do I run a graphical program?"}]}